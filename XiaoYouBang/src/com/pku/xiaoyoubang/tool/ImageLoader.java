package com.pku.xiaoyoubang.tool;import java.io.File;import java.io.FileInputStream;import java.io.FileOutputStream;import java.io.InputStream;import java.io.OutputStream;import java.net.HttpURLConnection;import java.net.URL;import java.util.Collections;import java.util.Map;import java.util.WeakHashMap;import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;import android.app.Activity;import android.content.Context;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.widget.ImageView;import com.pku.xiaoyoubang.R;public class ImageLoader {	private MemoryCache memoryCache = new MemoryCache();	private Map< ImageView, String > mapImageView = Collections.synchronizedMap( new WeakHashMap< ImageView, String >() );	//线程池	private ExecutorService executorService;		public ImageLoader( Context context )	{		executorService = Executors.newFixedThreadPool( 10 );	}		public void showImage( String url, ImageView imageView, boolean loadFromNet )	{		mapImageView.put( imageView, url );				Bitmap bitmap = memoryCache.getBitmap( url );		if( bitmap != null )		{			imageView.setImageBitmap( bitmap );		}		else if( loadFromNet == true )		{			downloadImage( url, imageView );		}	}		private void downloadImage( String url, ImageView imageView )	{		LoadImageRunnale runnable = new LoadImageRunnale( url, imageView );		executorService.submit( runnable );	}		public void clearCache()	{		memoryCache.clear();	}		private boolean imageViewReused( String url, ImageView imageView )	{		String value = mapImageView.get( imageView );		if( value == null || !url.equals( value ) )		{			return true;		}		return false;	}		private Bitmap getBitmap( String url )	{		try		{			File dir = new File( Information.Image_Path );			if( !dir.exists() )			{				dir.mkdirs();			}						final String fileName = Information.Image_Path + url.substring( url.lastIndexOf( "/" ) + 1, url.length() );			File file = new File( fileName );						if( file.exists() )			{				Bitmap bitmap = BitmapFactory.decodeStream( new FileInputStream( file ) );				if( bitmap != null )				{					return bitmap;				}			}			else			{				file.createNewFile();			}			URL imageUrl = new URL( Information.Server_Url + url );			HttpURLConnection connection = ( HttpURLConnection ) imageUrl.openConnection();			connection.setRequestProperty( "Connection", "keep-alive" );			connection.setRequestMethod( "GET" );			connection.setConnectTimeout( 10000 );			connection.setReadTimeout( 300000 );			connection.connect();			InputStream inputStream = connection.getInputStream();			OutputStream outputStream = new FileOutputStream( file );						byte[] buffer = new byte[ 1024 ];			while( true )			{				final int count = inputStream.read( buffer, 0, 1024 );				if( count == -1 )				{					break;				}				outputStream.write( buffer, 0, count );			}						outputStream.close();			return BitmapFactory.decodeStream( new FileInputStream( file ) );		}		catch( Exception ex )		{			ex.printStackTrace();			return null;		}	}		class ShowBitmapRunnable implements Runnable	{		private Bitmap bitmap;		private String url;		private ImageView imageView;				public ShowBitmapRunnable( Bitmap bitmap, String url, ImageView imageView )		{			this.bitmap = bitmap;			this.url = url;			this.imageView = imageView;		}				public void run()		{			if( imageViewReused( url, imageView ) == false && bitmap != null  )			{				imageView.setImageBitmap( bitmap );			}			else			{				imageView.setImageResource( R.drawable.head );			}		}	}		class LoadImageRunnale implements Runnable	{		private String url;		private ImageView imageView;				public LoadImageRunnale( String url, ImageView imageView )		{			this.url = url;			this.imageView = imageView;		}				public void run() 		{			if( imageViewReused( url, imageView ) == false )			{				Bitmap bitmap = getBitmap( url );				memoryCache.putBitmap( url, bitmap );				if( imageViewReused( url, imageView ) == false )				{					ShowBitmapRunnable runnable = new ShowBitmapRunnable( bitmap, url, imageView );					Activity activity = ( Activity ) imageView.getContext();					activity.runOnUiThread( runnable );				}			}		}			}}