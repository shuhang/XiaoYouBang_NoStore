package com.pku.xiaoyoubang.tool;import java.io.BufferedOutputStream;import java.io.BufferedReader;import java.io.File;import java.io.FileInputStream;import java.io.FileOutputStream;import java.io.IOException;import java.io.InputStreamReader;import java.net.HttpURLConnection;import java.net.URL;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Date;import java.util.List;import org.json.JSONArray;import org.json.JSONObject;import android.annotation.SuppressLint;import android.app.ActivityManager;import android.app.ActivityManager.RunningAppProcessInfo;import android.content.Context;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.graphics.Matrix;import android.media.ExifInterface;import android.net.ConnectivityManager;import android.net.NetworkInfo;import com.pku.xiaoyoubang.entity.AnswerEntity;import com.pku.xiaoyoubang.entity.CommentEntity;import com.pku.xiaoyoubang.entity.InviteEntity;import com.pku.xiaoyoubang.entity.QuestionEntity;import com.pku.xiaoyoubang.entity.ReplyEntity;@SuppressLint("SimpleDateFormat")public class Tool {	private static long lastClickTime = 0;	    public static boolean isFastDoubleClick()     {        long time = System.currentTimeMillis();        long timeD = time - lastClickTime;        if( 0 < timeD && timeD < 1000 )         {               return true;           }           lastClickTime = time;           return false;       }		public static String getFullPku( String pku )	{		final int count = Information.PKU2.length;		for( int i = 0; i < count; i ++ )		{			if( Information.PKU2[ i ].equals( pku ) )			{				return "北京大学 " + Information.PKU1[ i ];			}		}		return pku;	}		public static boolean isBackground( Context context ) 	{	    ActivityManager activityManager = ( ActivityManager ) context.getSystemService( Context.ACTIVITY_SERVICE );	    List< RunningAppProcessInfo > appProcesses = activityManager.getRunningAppProcesses();	    for( RunningAppProcessInfo appProcess : appProcesses ) 	    {	        if( appProcess.processName.equals( context.getPackageName() ) ) 	        {	            if( appProcess.importance == RunningAppProcessInfo.IMPORTANCE_BACKGROUND ) 	            {	                return true;	            }	            else	            {	                return false;	            }	        }	    }	    return false;	}	/**	 *  fetch picture degree	 * @param path	 * @return	 */	public static int getPictureDegree( String path ) 	{	    int degree = 0;	    try 	    {	        ExifInterface exifInterface = new ExifInterface( path );	        int orientation = exifInterface.getAttributeInt( ExifInterface.TAG_ORIENTATION, ExifInterface.ORIENTATION_NORMAL );	        switch( orientation ) 	        {	        case ExifInterface.ORIENTATION_ROTATE_90:	            degree = 90;	            break;	        case ExifInterface.ORIENTATION_ROTATE_180:	            degree = 180;	            break;	        case ExifInterface.ORIENTATION_ROTATE_270:	            degree = 270;	            break;	        }	    } 	    catch( IOException e ) 	    {	        e.printStackTrace();	    }	    return degree;	}	/**	 * 	 * @param bitmap	 * @param degree	 * @return	 */	public static Bitmap roateBitmap( Bitmap bitmap, int degree ) 	{	    if( degree == 0 ) 	    {	        return bitmap;	    }	    Matrix matrix = new Matrix();	    matrix.postRotate( degree );	    Bitmap bmp = Bitmap.createBitmap( bitmap, 0, 0, bitmap.getWidth(), bitmap.getHeight(), matrix, true );	    return bmp;	}		public static String judgeTimeSymbol( String time )	{		time = time.substring( 0, 19 );		String nowTime = getNowTime();				SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");		long between = 0;        try         {            Date begin = df.parse( time );            Date end = df.parse( nowTime );            between = ( end.getTime() - begin.getTime() );        }         catch( Exception ex ) {}                long day = between / ( 24 * 60 * 60 * 1000 );        long hour = ( between / ( 60 * 60 * 1000 ) - day * 24 );        long min = ( ( between / ( 60 * 1000 ) ) - day * 24 * 60 - hour * 60 );                if( day > 0 )        {        	return day + "天前";        }        if( hour > 0 )        {        	return hour + "小时前";        }        if( min >= 1 )        {        	return min + "分钟前";        }        return "刚刚";	}		public static String getNowTime()	{		SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");		return df.format( new Date() );	}		public static String getShowTime( String time )	{		if( time.equals( "" ) )			return "";		return time.substring( 5, 10 ) + " " + time.substring( 11, 16 );	}		public static boolean judgePhone( String phone )	{		final int count = phone.length();		if( count != 11 )		{			return false;		}		else		{			for( int i = 0; i < count; i ++ )			{				char c = phone.charAt( i );				if( i == 0 && c != '1' )				{					return false;				}				if( c >= '0' && c <= '9' ) 				{					continue;				}				else				{					return false;				}			}		}		return true;	}		public static boolean judgePassword( String password )	{		int length = password.replaceAll( " ", "" ).length();		if( length >= 6 && length <= 16 )		{			return true;		}		return false;	}		public static boolean judgeTextInput( int stringLength, int maxLength, int minLength )	{		if( stringLength < minLength || stringLength > maxLength )		{			return false;		}		return true;	}	/**	 * 	 * @param oldBitmap	 * @param newWidth	 * @return	 */	public static Bitmap zoomBitmap( Bitmap oldBitmap, int newWidth )	{		final int width = oldBitmap.getWidth();		final int height = oldBitmap.getHeight();		Bitmap newBitmap = null;		if( height >= width )		{			newBitmap = Bitmap.createBitmap( oldBitmap, 0, ( height - width ) / 2, width, width );		}		else		{			newBitmap = Bitmap.createBitmap( oldBitmap, ( width - height ) / 2, 0, height, height );		}		final int min = Math.min( width, height );		Matrix matrix = new Matrix();		float scaleWidth = ( ( float ) newWidth / min );        float scaleHeight = ( ( float ) newWidth / min );          matrix.postScale( scaleWidth, scaleHeight );        return Bitmap.createBitmap( newBitmap, 0, 0, min, min, matrix, true );	}	/**	 * 	 * @param oldBitmap	 * @param newWidth	 * @return	 */	public static Bitmap resizeBitmap( Bitmap oldBitmap, int newWidth )	{		final int width = oldBitmap.getWidth();		final int height = oldBitmap.getHeight();		if( Math.max( width, height ) <= newWidth )		{			return oldBitmap;		}		float scale = 0;		if( height >= width )		{			scale = ( float ) newWidth / height;		}		else		{			scale = ( float ) newWidth / width;		}		Matrix matrix = new Matrix();        matrix.postScale( scale, scale );        return Bitmap.createBitmap( oldBitmap, 0, 0, width, height, matrix, true );	}	/**	 * 	 */	public static void storeNewBitmap( Bitmap oldBitmap, String path1, String path2 )	{		try		{			int width = oldBitmap.getWidth();			int height = oldBitmap.getHeight();			Bitmap newBitmap = oldBitmap;			if( Math.min( width, height ) > 400 && Math.max( width, height ) > 1600 )			{				Matrix matrix = new Matrix();				if( 1600 * Math.min( width, height ) / ( ( float ) Math.max( width, height ) ) >= 400 )				{					        matrix.postScale( ( float ) 1600 / Math.max( width, height ), ( float ) 1600 / Math.max( width, height ) );				}				else				{			        matrix.postScale( ( float ) 400 / Math.min( width, height ), ( float ) 400 / Math.min( width, height ) );		   				}				newBitmap = Bitmap.createBitmap( oldBitmap, 0, 0, width, height, matrix, true );			}			File file = new File( path1  );			file.createNewFile();			BufferedOutputStream stream = new BufferedOutputStream( new FileOutputStream( file ) );			newBitmap.compress( Bitmap.CompressFormat.JPEG, 60, stream );			stream.close();			width = newBitmap.getWidth();			height = newBitmap.getHeight();			Bitmap smallBitmap = newBitmap;			if( Math.min( width, height ) > 160 )			{				Matrix matrix = new Matrix();				matrix.postScale( ( float ) 160 / Math.min( width, height ), ( float ) 160 / Math.min( width, height ) );				Bitmap temp = Bitmap.createBitmap( newBitmap, 0, 0, width, height, matrix, true );				if( height > width )				{					smallBitmap = Bitmap.createBitmap( temp, 0, ( temp.getHeight() - 160 ) / 2, 160, 160 );				}				else				{					smallBitmap = Bitmap.createBitmap( temp, ( temp.getWidth() - 160 ) / 2, 0, 160, 160 );				}			}			else if( Math.max( width, height ) > 160 )			{				Matrix matrix = new Matrix();				if( height > width )				{					matrix.postScale( 1, ( float ) 160 / Math.max( width, height ) );					smallBitmap = Bitmap.createBitmap( Bitmap.createBitmap( oldBitmap, 0, 0, width, height, matrix, true ), 0, ( height - 160 ) / 2, width, 160 );				}				else				{					matrix.postScale( ( float ) 160 / Math.max( width, height ), 1 );					smallBitmap = Bitmap.createBitmap( Bitmap.createBitmap( oldBitmap, 0, 0, width, height, matrix, true ), ( width - 160 ) / 2, 0, 160, height );				}			}			File file1 = new File( path2  );			file1.createNewFile();			BufferedOutputStream stream1 = new BufferedOutputStream( new FileOutputStream( file1 ) );			smallBitmap.compress( Bitmap.CompressFormat.PNG, 60, stream1 );						stream1.close();			oldBitmap.recycle();			newBitmap.recycle();			smallBitmap.recycle();		}		catch( Exception ex ) 		{			ex.printStackTrace();		}	}	/**	 * 	 */	public static String convertPNGtoJPG( String path )	{		try		{			String name = Information.Temp_Image_Path + System.currentTimeMillis() + ".jpg";						BufferedOutputStream stream = new BufferedOutputStream( new FileOutputStream( name ) );			BitmapFactory.decodeFile( path ).compress( Bitmap.CompressFormat.JPEG, 60, stream );			stream.close();						return name;		}		catch( Exception ex ) 		{			ex.printStackTrace();			return "";		}	}	/**	 *  判断是否联网	 * @param context	 * @return	 */	public static boolean isNetworkConnected( Context context ) 	{		if( context != null )		{  			ConnectivityManager mConnectivityManager = ( ConnectivityManager ) context.getSystemService( Context.CONNECTIVITY_SERVICE );  			NetworkInfo mNetworkInfo = mConnectivityManager.getActiveNetworkInfo();  			if( mNetworkInfo != null ) 			{  				return mNetworkInfo.isAvailable();  			}  		}		return false;  	}		/**	 *  Get Url Request	 */	public static JSONObject doGetWithUrl( String urlString )	{		HttpURLConnection connection = null;		try		{			URL url = new URL( urlString );			connection = ( HttpURLConnection ) url.openConnection();  			connection.setRequestProperty( "Connection", "keep-alive" );			connection.setRequestMethod( "GET" );			connection.setConnectTimeout( 10000 );			connection.setReadTimeout( 30000 );			connection.connect();			final int responseCode = connection.getResponseCode();			if( responseCode == 200 )			{				BufferedReader reader = new BufferedReader( new InputStreamReader( connection.getInputStream() ) );				String temp1 = null;				StringBuilder value = new StringBuilder();				while( ( temp1 = reader.readLine() ) != null )				{					value.append( temp1 );				}				return new JSONObject( value.toString() );			}			else			{								return null;			}		}		catch( Exception ex )		{			return null;		}		finally		{			if( connection != null )			{				connection.disconnect();			}		}	}		/**	 *  Post Url Request	 */	public static JSONObject doPostWithUrl( String urlString, JSONObject input )	{		HttpURLConnection connection = null;		try		{			URL url = new URL( urlString );			connection = ( HttpURLConnection ) url.openConnection();  			connection.setRequestProperty( "Connection", "keep-alive" );			connection.setRequestProperty( "Content-Type", "application/json" );			connection.setRequestMethod( "POST" );			connection.setConnectTimeout( 10000 );			connection.setReadTimeout( 30000 );			connection.setDoOutput( true );			connection.setDoInput( true );			connection.getOutputStream().write( input.toString().getBytes() );			final int responseCode = connection.getResponseCode();			if( responseCode == 200 )			{				BufferedReader reader = new BufferedReader( new InputStreamReader( connection.getInputStream() ) );				String temp1 = null;				StringBuilder value = new StringBuilder();				while( ( temp1 = reader.readLine() ) != null )				{					value.append( temp1 );				}				return new JSONObject( value.toString() );			}			else			{				return null;			}		}		catch( Exception ex )		{			return null;		}		finally		{			if( connection != null )			{				connection.disconnect();			}		}	}		/**	 *  Post Url Request	 */	public static JSONObject doPutWithUrl( String urlString, JSONObject input )	{		HttpURLConnection connection = null;		try		{			URL url = new URL( urlString );			connection = ( HttpURLConnection ) url.openConnection();  			connection.setRequestProperty( "Connection", "keep-alive" );			connection.setRequestProperty( "Content-Type", "application/json" );			connection.setRequestMethod( "PUT" );			connection.setConnectTimeout( 10000 );			connection.setReadTimeout( 30000 );			connection.setDoOutput( true );			connection.setDoInput( true );			connection.getOutputStream().write( input.toString().getBytes() );			final int responseCode = connection.getResponseCode();			if( responseCode == 200 )			{				BufferedReader reader = new BufferedReader( new InputStreamReader( connection.getInputStream() ) );				String temp1 = null;				StringBuilder value = new StringBuilder();				while( ( temp1 = reader.readLine() ) != null )				{					value.append( temp1 );				}				return new JSONObject( value.toString() );			}			else			{				return null;			}		}		catch( Exception ex )		{			return null;		}		finally		{			if( connection != null )			{				connection.disconnect();			}		}	}		/**	 *  Write question list to file	 */	public static void writeQuestionListToFile( String jsonString, int type )	{		try		{			String fileName = Information.File_Path + "all_question.txt";			if( type == 1 )			{				fileName = Information.File_Path + "my_question.txt";			}			else if( type == 2 )			{				fileName = Information.File_Path + "my_answer.txt";			}			File file = new File( fileName );			if( file.exists() )			{				file.delete();			}			file.createNewFile();			FileOutputStream out = new FileOutputStream( file, false );			out.write( jsonString.getBytes( "utf-8" ) );			out.close();		}		catch( Exception ex )		{			ex.printStackTrace();		}	}	/**	 * 	 * @param jsonString	 */	public static void writeAnswerListToFile( String jsonString )	{		try		{			String fileName = Information.File_Path + "my_answer.txt";			File file = new File( fileName );			if( file.exists() )			{				file.delete();			}			file.createNewFile();			FileOutputStream out = new FileOutputStream( file, false );			out.write( jsonString.getBytes( "utf-8" ) );			out.close();		}		catch( Exception ex )		{			ex.printStackTrace();		}	}	/**	 * 	 * @param context	 * @return	 */	public static List< AnswerEntity > loadLocalAnswerListFromFile( Context context )	{		List< AnswerEntity > list = new ArrayList< AnswerEntity >();		try		{			String fileName = Information.File_Path + "my_answer.txt";			File file = new File( fileName );			if( file.exists() )			{				StringBuilder jsonString = new StringBuilder();				InputStreamReader reader = new InputStreamReader( new FileInputStream( file ), "utf-8" );                BufferedReader bufferedReader = new BufferedReader( reader );                String lineTxt = null;                while( ( lineTxt = bufferedReader.readLine() ) != null )                {                	jsonString.append( lineTxt );                }                reader.close();                return loadLocalAnswerListFromString( jsonString.toString(), context );			}		}		catch( Exception ex ) {}		return list;	}	/**	 * 	 * @param jsonString	 */	public static void writeReplyListToFile( String jsonString )	{		try		{			String fileName = Information.File_Path + "my_reply.txt";			File file = new File( fileName );			if( file.exists() )			{				file.delete();			}			file.createNewFile();			FileOutputStream out = new FileOutputStream( file, false );			out.write( jsonString.getBytes( "utf-8" ) );			out.close();		}		catch( Exception ex )		{			ex.printStackTrace();		}	}	/**	 * 	 * @param context	 * @return	 */	public static List< ReplyEntity > loadReplyListFromFile( Context context )	{		List< ReplyEntity > list = new ArrayList< ReplyEntity >();		try		{			String fileName = Information.File_Path + "my_reply.txt";			File file = new File( fileName );			if( file.exists() )			{				StringBuilder jsonString = new StringBuilder();				InputStreamReader reader = new InputStreamReader( new FileInputStream( file ), "utf-8" );                BufferedReader bufferedReader = new BufferedReader( reader );                String lineTxt = null;                while( ( lineTxt = bufferedReader.readLine() ) != null )                {                	jsonString.append( lineTxt );                }                reader.close();                JSONArray array = new JSONArray( jsonString.toString() );    	        final int count = array.length();    	        for( int i = 0; i < count; i ++ )    	        {    	        	JSONObject object = array.getJSONObject( i );    	        	    	        	ReplyEntity entity = new ReplyEntity();    				entity.setHeadUrl( object.getString( "srcUserHeadUrl" ) );				    				entity.setReplyUserId( object.getString( "user" ) );    				entity.setReplyUserName( object.getString( "srcUserName" ) );    				entity.setTime( object.getString( "createTime" ) );    				    				JSONObject message = object.getJSONObject( "msg" );    				if( message.has( "qid" ) )    				{    					entity.setType( 0 );    					entity.setQuestionId( message.getString( "qid" ) );    				}    				else    				{    					entity.setType( 1 );    					entity.setAnswerId( message.getString( "aid" ) );    				}    				entity.setInfo( message.getString( "content" ) );    				entity.setTitle( message.getString( "title" ) );    				entity.setTitleUserName( message.getString( "username" ) );    				    				list.add( entity );    	        }			}		}		catch( Exception ex ) {}		return list;	}	/**	 * 	 * @param context	 * @return	 */	public static List< AnswerEntity > loadLocalAnswerListFromString( String jsonString, Context context )	{		List< AnswerEntity > list = new ArrayList< AnswerEntity >();		try		{			 JSONArray array = new JSONArray( jsonString );             final int count = array.length();             for( int i = 0; i < count; i ++ )             {             	AnswerEntity entity = new AnswerEntity();             	loadAnswerEntity( entity, array.getJSONObject( i ) );             	list.add( entity );             	             	MyDatabaseHelper.getInstance( context ).insertAnswer( entity.getId(), entity.getModifyTime() );             }             return list;		}		catch( Exception ex ) {}		return list;	}	/**	 *  type 	 *  0 : all	 *  1 : my_question	 *  	 *  Load local question list from file	 */	public static List< QuestionEntity > loadLocalQuestionListFromFile( Context context, int type )	{		List< QuestionEntity > list = new ArrayList< QuestionEntity >();		try		{			String fileName = Information.File_Path + "all_question.txt";			if( type == 1 )			{				fileName = Information.File_Path + "my_question.txt";			}			File file = new File( fileName );			if( file.exists() )			{				StringBuilder jsonString = new StringBuilder();				InputStreamReader reader = new InputStreamReader( new FileInputStream( file ), "utf-8" );                BufferedReader bufferedReader = new BufferedReader( reader );                String lineTxt = null;                while( ( lineTxt = bufferedReader.readLine() ) != null )                {                	jsonString.append( lineTxt );                }                reader.close();                                return loadLocalQuestionListFromJson( jsonString.toString(), context );			}		}		catch( Exception ex ) {}		return list;	}	/**	 *  Load local question list from jsonString	 */	public static List< QuestionEntity > loadLocalQuestionListFromJson( String jsonString, Context context )	{		List< QuestionEntity > list = new ArrayList< QuestionEntity >();		try		{             JSONArray array = new JSONArray( jsonString );             final int count = array.length();             for( int i = 0 ; i < count; i ++ )             {            	 QuestionEntity entity = new QuestionEntity();          	                  JSONObject object = array.getJSONObject( i );                	                 loadQuestionListEntity( entity, object );                                  if( entity.isInvisible() )                 {                	 entity.setUserHeadUrl( "" );                 }                                  if( MyDatabaseHelper.getInstance( context ).judgeQuestionHasRead( entity.getId() ) )                 {                	 entity.setNew( false );                 }                 else                 {                	 entity.setNew( true );                 }                                  if( MyDatabaseHelper.getInstance( context ).getQuestionModifyTime( entity.getId() ).compareTo( entity.getModifyTime() ) >= 0 )                 {                	 entity.setModified( false );                 }                 else                 {                	 if( !entity.isNew() )                	 {                		 entity.setModified( true );                	 }                	 else                	 {                		 entity.setModified( false );                	 }                 }                                  if( MyDatabaseHelper.getInstance( context ).getQuestionUpdateTime( entity.getId() ).compareTo( entity.getChangeTime() ) >= 0 )                 {                	 entity.setUpdated( false );                 }                 else                 {                	 if( !entity.isNew() )                	 {                		 entity.setUpdated( true );                	 }                	 else                	 {                		 entity.setUpdated( false );                	 }                 }                	                 list.add( entity );             }		}		catch( Exception ex ) 		{			ex.printStackTrace();		}		return list;	}	/**	 *  Load local question info	 */	public static QuestionEntity loadLocalQuestionInfoEntity( String id )	{		QuestionEntity entity = new QuestionEntity();		try		{			File file = new File( Information.File_Path + id + ".txt" );			StringBuilder jsonString = new StringBuilder();			InputStreamReader reader = new InputStreamReader( new FileInputStream( file ), "utf-8" );            BufferedReader bufferedReader = new BufferedReader( reader );            String lineTxt = null;            while( ( lineTxt = bufferedReader.readLine() ) != null )            {            	jsonString.append( lineTxt );            }            reader.close();                        JSONObject object = new JSONObject( jsonString.toString() );            loadQuestionInfoEntity( entity, object );		}		catch( Exception ex ) {}		return entity;	}	/**	 *  Load local question info	 */	public static JSONObject loadLocalQuestionInfoJSONObject( String id )	{		try		{			File file = new File( Information.File_Path + id + ".txt" );			StringBuilder jsonString = new StringBuilder();			InputStreamReader reader = new InputStreamReader( new FileInputStream( file ), "utf-8" );            BufferedReader bufferedReader = new BufferedReader( reader );            String lineTxt = null;            while( ( lineTxt = bufferedReader.readLine() ) != null )            {            	jsonString.append( lineTxt );            }            reader.close();            JSONObject object = new JSONObject( jsonString.toString() );            return object;		}		catch( Exception ex ) 		{			return new JSONObject();		}	}	/**	 *  Judge question info exists	 */	public static boolean judgeQuestionInfoExist( String id )	{		File file = new File( Information.File_Path + id + ".txt" );		return file.exists();	}	/**	 * 	 */	public static void loadQuestionListEntity( QuestionEntity questionEntity, JSONObject questionObject ) throws Exception	{		questionEntity.setId( questionObject.getString( "id" ) );		questionEntity.setQuestionTitle( questionObject.getString( "title" ) );		questionEntity.setQuestionInfo( questionObject.getString( "info" ) );		questionEntity.setPraiseCount( questionObject.getInt( "praiseCount" ) );				questionEntity.setCreateTime( questionObject.getString( "createTime" ) );		questionEntity.setModifyTime( questionObject.getString( "modifyTime" ) );    			questionEntity.setUserId( questionObject.getString( "userid" ) );		questionEntity.setUserName( questionObject.getString( "name" ) );		questionEntity.setUserHeadUrl( questionObject.getString( "headUrl" ) );		questionEntity.setCompany( questionObject.getString( "company" ) );		questionEntity.setPKU( questionObject.getString( "pku" ) );		questionEntity.setSex( questionObject.getInt( "sex" ) );    	questionEntity.setAnswerCount( questionObject.getInt( "answerCount" ) );    	questionEntity.setInvisible( questionObject.getBoolean( "invisible" ) );    	    	if( questionObject.has( "totalComment" ) )    	{    		questionEntity.setCommentCount( questionObject.getInt( "totalComment" ) );    	}    	if( questionObject.has( "changeTime" ) )    	{    		questionEntity.setChangeTime( questionObject.getString( "changeTime" ) );    	}    	    	if( questionObject.has( "images" ) )    	{	    	JSONArray imageArray = questionObject.getJSONArray( "images" );	    	final int imageCount = imageArray.length();	    	List< String > imageList = new ArrayList< String >( imageCount );	    	for( int i = 0; i < imageCount; i ++ )	    	{	    		imageList.add( imageArray.getString( i ) );	    	}	    	questionEntity.setImageList( imageList );    	}    	    	if( questionObject.has( "hasImage" ) )    	{    		questionEntity.setHasImage( questionObject.getBoolean( "hasImage" ) );    	}			    	JSONArray inviteArray1 = questionObject.getJSONArray( "inviterList" );		JSONArray inviteArray2 = questionObject.getJSONArray( "invitingList" );		final int inviteCount1 = inviteArray1.length();		List< InviteEntity > inivteMeList = new ArrayList< InviteEntity >( inviteCount1 );		for( int i = 0; i < inviteCount1; i ++ )		{			InviteEntity inviteEntity = new InviteEntity();						JSONObject inviteObject = inviteArray1.getJSONObject( i );			loadInviteEntity( inviteEntity, inviteObject );			inivteMeList.add( inviteEntity );		}		final int inviteCount2 = inviteArray2.length();		List< InviteEntity > myInivteList = new ArrayList< InviteEntity >( inviteCount2 );		for( int i = 0; i < inviteCount2; i ++ )		{			InviteEntity inviteEntity = new InviteEntity();						JSONObject inviteObject = inviteArray2.getJSONObject( i );			loadInviteEntity( inviteEntity, inviteObject );						myInivteList.add( inviteEntity );		}		questionEntity.setInviteMeList( inivteMeList );		questionEntity.setMyInviteList( myInivteList );	}	/**	 *  Load question entity	 */	public static void loadQuestionInfoEntity( QuestionEntity questionEntity, JSONObject questionObject ) throws Exception	{		questionEntity.setId( questionObject.getString( "id" ) );		questionEntity.setQuestionTitle( questionObject.getString( "title" ) );		questionEntity.setQuestionInfo( questionObject.getString( "info" ) );		questionEntity.setPraiseCount( questionObject.getInt( "praiseCount" ) );				questionEntity.setCreateTime( questionObject.getString( "createTime" ) );		questionEntity.setModifyTime( questionObject.getString( "modifyTime" ) );		questionEntity.setUpdateTime( questionObject.getString( "updateTime" ) );		questionEntity.setHasAnswered( questionObject.getBoolean( "answered" ) );		questionEntity.setUserId( questionObject.getString( "userid" ) );		questionEntity.setUserName( questionObject.getString( "name" ) );		questionEntity.setUserHeadUrl( questionObject.getString( "headUrl" ) );		questionEntity.setJob( questionObject.getString( "job" ) );		questionEntity.setCompany( questionObject.getString( "company" ) );		questionEntity.setPKU( questionObject.getString( "pku" ) );		questionEntity.setSex( questionObject.getInt( "sex" ) );		questionEntity.setInvisible( questionObject.getBoolean( "invisible" ) );		if( questionEntity.isInvisible() )		{			questionEntity.setUserId( "" );		}				if( questionObject.has( "images" ) )    	{			JSONArray imageArray = questionObject.getJSONArray( "images" );	    	final int imageCount = imageArray.length();	    	List< String > imageList = new ArrayList< String >( imageCount );	    	for( int i = 0; i < imageCount; i ++ )	    	{	    		imageList.add( imageArray.getString( i ) );	    	}	    	questionEntity.setImageList( imageList );    	}				if( questionObject.has( "hasImage" ) )    	{    		questionEntity.setHasImage( questionObject.getBoolean( "hasImage" ) );    	}    	    	JSONArray answerArray = questionObject.getJSONArray( "answers" );    	final int answerCount = answerArray.length();    	    	List< AnswerEntity > answerList = new ArrayList< AnswerEntity >( answerCount );    	for( int i = 0; i < answerCount; i ++ )    	{    		AnswerEntity answerEntity = new AnswerEntity();	    		answerEntity.setQuestionId( questionEntity.getId() );    		answerEntity.setQuestionTitle( questionEntity.getQuestionTitle() );    		    		JSONObject answerObject = answerArray.getJSONObject( i );    		loadAnswerEntity( answerEntity, answerObject );    		    		if( answerEntity.isInvisible() )    		{    			answerEntity.setUserHeadUrl( "" );    		}    		    		answerList.add( answerEntity );    	}    	questionEntity.setAnswerList( answerList );    	questionEntity.setAnswerCount( questionObject.getInt( "answerCount" ) );    	    	JSONArray commentArray = questionObject.getJSONArray( "comments" );		final int commentCount = commentArray.length();		List< CommentEntity > commentList = new ArrayList< CommentEntity >( commentCount );		for( int i = 0; i < commentCount; i ++ )		{			CommentEntity commentEntity = new CommentEntity();			commentEntity.setQuestionId( questionEntity.getId() );			JSONObject commentObject = commentArray.getJSONObject( i );			loadCommentEntity( commentEntity, commentObject );						commentList.add( commentEntity );		}		questionEntity.setCommentList( commentList );		JSONArray inviteArray1 = questionObject.getJSONArray( "inviterList" );		JSONArray inviteArray2 = questionObject.getJSONArray( "invitingList" );		final int inviteCount1 = inviteArray1.length();		List< InviteEntity > inivteMeList = new ArrayList< InviteEntity >( inviteCount1 );		List< String > inviteList = new ArrayList< String >( inviteCount1 );		for( int i = 0; i < inviteCount1; i ++ )		{			InviteEntity inviteEntity = new InviteEntity();						JSONObject inviteObject = inviteArray1.getJSONObject( i );			loadInviteEntity( inviteEntity, inviteObject );						inviteList.add( inviteEntity.getName() );			inivteMeList.add( inviteEntity );		}		final int inviteCount2 = inviteArray2.length();		List< InviteEntity > myInivteList = new ArrayList< InviteEntity >( inviteCount2 );		for( int i = 0; i < inviteCount2; i ++ )		{			InviteEntity inviteEntity = new InviteEntity();						JSONObject inviteObject = inviteArray2.getJSONObject( i );			loadInviteEntity( inviteEntity, inviteObject );						myInivteList.add( inviteEntity );		}		questionEntity.setInviteMeList( inivteMeList );		questionEntity.setMyInviteList( myInivteList );				if( questionEntity.isHasAnswered() )		{			JSONObject myAnswer = questionObject.getJSONObject( "myanswer" );			AnswerEntity answerEntity = new AnswerEntity();				answerEntity.setId( myAnswer.getString( "_id" ) );			answerEntity.setAnswerInfo( myAnswer.getString( "content" ) );			answerEntity.setCommentCount( 0 );			answerEntity.setCommentList( new ArrayList< CommentEntity >() );			answerEntity.setCompany( Information.Company );			answerEntity.setCreateTime( "" );			answerEntity.setHasPraised( true );			answerEntity.setInvisible( false );			answerEntity.setInvite( inviteList );			answerEntity.setJob( Information.Job );			answerEntity.setModifyTime( "" );			answerEntity.setName( Information.Name );			answerEntity.setPart( Information.Part );			answerEntity.setPku( Information.PKU_Value );			answerEntity.setPraise( new ArrayList< String >() );			answerEntity.setPraiseCount( 0 );			answerEntity.setQuestionerName( questionEntity.getUserName() );			answerEntity.setQuestionId( questionEntity.getId() );			answerEntity.setQuestionTitle( questionEntity.getQuestionTitle() );			answerEntity.setSex( Information.Sex );			answerEntity.setUserHeadUrl( Information.HeadUrl );			answerEntity.setUserId( Information.Id );						questionEntity.setMyAnswer( answerEntity );		}	}	/**	 *  Load answer entity	 */	public static void loadAnswerEntity( AnswerEntity answerEntity, JSONObject answerObject ) throws Exception	{		answerEntity.setId( answerObject.getString( "id" ) );		answerEntity.setCreateTime( answerObject.getString( "createTime" ) );		answerEntity.setModifyTime( answerObject.getString( "modifyTime" ) );		answerEntity.setAnswerInfo( answerObject.getString( "content" ) );		answerEntity.setInvisible( answerObject.getBoolean( "invisible" ) );		answerEntity.setHasPraised( answerObject.getBoolean( "praised" ) );		answerEntity.setPraiseCount( answerObject.getInt( "praiseCount" ) );		if( answerObject.has( "questionTitle" ) )		{			answerEntity.setQuestionTitle( answerObject.getString( "questionTitle" ) );		}		if( answerObject.has( "questionerName" ) )		{			answerEntity.setQuestionerName( answerObject.getString( "questionerName" ) );		}		if( answerObject.has( "editTime" ) )		{			answerEntity.setEditTime( answerObject.getString( "editTime" ) );		}				if( answerObject.has( "images" ) )    	{			JSONArray imageArray = answerObject.getJSONArray( "images" );	    	final int imageCount = imageArray.length();	    	List< String > imageList = new ArrayList< String >( imageCount );	    	for( int i = 0; i < imageCount; i ++ )	    	{	    		imageList.add( imageArray.getString( i ) );	    	}	    	answerEntity.setImageList( imageList );    	}				if( answerObject.has( "hasImage" ) )    	{			answerEntity.setHasImage( answerObject.getBoolean( "hasImage" ) );    	}				JSONArray inviteArray = answerObject.getJSONArray( "inviteList" );		final int inviteCount = inviteArray.length();		List< String > inviteList = new ArrayList< String >( inviteCount );		for( int i = 0; i < inviteCount; i ++ )		{			inviteList.add( inviteArray.getString( i ) );		}		answerEntity.setInvite( inviteList );				answerEntity.setCommentCount( answerObject.getInt( "commentCount" ) );		answerEntity.setCommentList( new ArrayList< CommentEntity >() );				List< String > praiseList = new ArrayList< String >();		answerEntity.setPraise( praiseList );				answerEntity.setUserId( answerObject.getString( "userid" ) );		answerEntity.setQuestionId( answerObject.getString( "questionId" ) );		answerEntity.setUserHeadUrl( answerObject.getString( "headUrl" ) );		answerEntity.setName( answerObject.getString( "name" ) );		answerEntity.setCompany( answerObject.getString( "company" ) );		answerEntity.setJob( answerObject.getString( "job" ) );		if( answerObject.has( "department" ) )		{			answerEntity.setPart( answerObject.getString( "department" ) );		}		answerEntity.setPku( answerObject.getString( "pku" ) );		answerEntity.setSex( answerObject.getInt( "sex" ) );				if( answerEntity.isInvisible() )		{			answerEntity.setUserHeadUrl( "" );			answerEntity.setUserId( "" );		}	}	/**	 *  Load comment entity	 */	public static void loadCommentEntity( CommentEntity commentEntity, JSONObject commentObject ) throws Exception	{		commentEntity.setId( "" );		commentEntity.setCommentInfo( commentObject.getString( "content" ) );		commentEntity.setTime( commentObject.getString( "time" ) );				commentEntity.setUserId( commentObject.getString( "userId" ) );		commentEntity.setUserName( commentObject.getString( "name" ) );		commentEntity.setUserHeadUrl( commentObject.getString( "headUrl" ) );		if( commentObject.has( "replyId" ) )		{			commentEntity.setReplyId( commentObject.getString( "replyId" ) );		}		if( commentObject.has( "replyName" ) )		{			commentEntity.setReplyName( commentObject.getString( "replyName" ) );		}	}	/**	 *  Load invite entity	 */	public static void loadInviteEntity( InviteEntity inviteEntity, JSONObject inviteObject ) throws Exception	{		inviteEntity.setInviterId( inviteObject.getString( "userId" ) );		inviteEntity.setHeadUrl( inviteObject.getString( "headUrl" ) );		inviteEntity.setName( inviteObject.getString( "name" ) );		inviteEntity.setInviteInfo( inviteObject.getString( "words" ) );		inviteEntity.setTime( inviteObject.getString( "time" ) );		inviteEntity.setHasAnswered( inviteObject.getBoolean( "answered" ) );	}	/**	 *  Load answer list	 */	public static List< AnswerEntity > loadAnswerList( JSONArray answerArray )	{		List< AnswerEntity > answerList = new ArrayList< AnswerEntity >();		try		{			final int answerCount = answerArray.length();    		    	for( int i = 0; i < answerCount; i ++ )	    	{	    		AnswerEntity answerEntity = new AnswerEntity();		    		JSONObject answerObject = answerArray.getJSONObject( i );	    		loadAnswerEntity( answerEntity, answerObject );	    			    		answerList.add( answerEntity );	    	}		}		catch( Exception ex )		{			ex.printStackTrace();		}		return answerList;	}	/**	 * 	 */	public static void deleteAllTempImage()	{		File file1 = new File( Information.Temp_Image_Path );		if( file1.exists() )		{			for( File file : file1.listFiles() )			{				file.delete();			}		}	}}