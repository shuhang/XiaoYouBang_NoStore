package com.pku.xiaoyoubang.model;import java.util.List;import android.content.Context;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.BaseAdapter;import android.widget.ImageView;import android.widget.TextView;import com.nostra13.universalimageloader.core.DisplayImageOptions;import com.nostra13.universalimageloader.core.ImageLoader;import com.nostra13.universalimageloader.core.ImageLoaderConfiguration;import com.pku.xiaoyoubang.R;import com.pku.xiaoyoubang.entity.AnswerEntity;import com.pku.xiaoyoubang.tool.Information;import com.pku.xiaoyoubang.tool.MyDatabaseHelper;public class AnswerListAdapter extends BaseAdapter{	private Context context;	private int count;	private List< AnswerEntity > list;	private ImageLoader imageLoader;	private DisplayImageOptions options;	/**	 *  type	 *  0 : question info answer	 *  1 : answer list answer	 */	private int type;		public AnswerListAdapter( Context context, List< AnswerEntity > list, int count, int type )	{		this.context = context;		this.list = list;		this.count = count;		this.type = type;				ImageLoaderConfiguration config = new ImageLoaderConfiguration.Builder( context ).build();		ImageLoader.getInstance().init( config );				this.options = new DisplayImageOptions.Builder()		.showImageOnLoading( R.drawable.head )		.showImageForEmptyUri( R.drawable.head )		.showImageOnFail( R.drawable.head )		.cacheInMemory( true )		.cacheOnDisk( true )		.build();		this.imageLoader = ImageLoader.getInstance();	}		public List< AnswerEntity > getList()	{		return list;	} 		public int getCount() 	{		return list.size();	}		public void addItemTop( AnswerEntity entity )	{		list.add( 0, entity );	}	public Object getItem( int position ) 	{		return list.get( position );	}	public long getItemId( int position ) 	{		return position;	}	public View getView( int position, View convertView, ViewGroup parent )	{		ViewHolder viewHolder;		if( convertView == null )		{			convertView = LayoutInflater.from( context ).inflate( R.layout.answer_list_item, null );			viewHolder = new ViewHolder();						viewHolder.headImage = ( ImageView ) convertView.findViewById( R.id.answer_list_item_head );			viewHolder.textName = ( TextView ) convertView.findViewById( R.id.answer_list_item_name );			viewHolder.textCommentCount = ( TextView ) convertView.findViewById( R.id.answer_list_item_comment_count );			viewHolder.textCommentTemp = ( TextView ) convertView.findViewById( R.id.answer_list_item_comment_count_temp );			viewHolder.textPraiseCount = ( TextView ) convertView.findViewById( R.id.answer_list_item_praise_count );			viewHolder.textPraiseTemp = ( TextView ) convertView.findViewById( R.id.answer_list_item_praise_temp );			viewHolder.textAnswerInfo = ( TextView ) convertView.findViewById( R.id.answer_list_item_answer );			viewHolder.textIndex = ( TextView ) convertView.findViewById( R.id.answer_list_item_index );						convertView.setTag( viewHolder );		}		else		{			viewHolder = ( ViewHolder ) convertView.getTag(); 		}				AnswerEntity entity = list.get( position );				viewHolder.textIndex.setText( ( count - position ) + "答" );				String url = entity.getUserHeadUrl();		if( entity.isInvisible() )		{			url = "";			viewHolder.textName.setText( "匿名用户" );		}		else		{			viewHolder.textName.setText( entity.getName() );		}		imageLoader.displayImage( Information.Server_Url + url, viewHolder.headImage, options );		viewHolder.textCommentCount.setText( entity.getCommentCount() + "" );		viewHolder.textAnswerInfo.setText( entity.getAnswerInfo() );		viewHolder.textPraiseCount.setText( entity.getPraiseCount() + "" );				if( type == 0 )		{			String time = MyDatabaseHelper.getInstance( context ).getQuestionUpdateTime( entity.getQuestionId() );			if( time.compareTo( entity.getModifyTime() ) < 0 )			{				viewHolder.textCommentCount.setTextColor( context.getResources().getColor( R.color.text_red ) );				viewHolder.textCommentTemp.setTextColor( context.getResources().getColor( R.color.text_red ) );				viewHolder.textPraiseCount.setTextColor( context.getResources().getColor( R.color.text_red ) );				viewHolder.textPraiseTemp.setTextColor( context.getResources().getColor( R.color.text_red ) );			}			else			{				viewHolder.textCommentCount.setTextColor( context.getResources().getColor( R.color.heavy_gray ) );				viewHolder.textCommentTemp.setTextColor( context.getResources().getColor( R.color.heavy_gray ) );				viewHolder.textPraiseCount.setTextColor( context.getResources().getColor( R.color.heavy_gray ) );				viewHolder.textPraiseTemp.setTextColor( context.getResources().getColor( R.color.heavy_gray ) );			}		}				return convertView;	}		static class ViewHolder	{		ImageView headImage;		TextView textName;		TextView textCommentCount;		TextView textCommentTemp;		TextView textPraiseCount;		TextView textPraiseTemp;		TextView textAnswerInfo;		TextView textIndex;	}}