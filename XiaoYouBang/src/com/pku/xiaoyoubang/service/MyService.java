package com.pku.xiaoyoubang.service;import java.io.BufferedReader;import java.io.InputStreamReader;import java.net.HttpURLConnection;import java.net.URL;import org.json.JSONObject;import android.app.Activity;import android.app.Service;import android.content.Intent;import android.content.SharedPreferences;import android.os.Binder;import android.os.IBinder;import android.os.Message;import android.util.Log;import com.pku.xiaoyoubang.MainActivity;import com.pku.xiaoyoubang.tool.Information;public class MyService extends Service{	/**	 *  Fetch My Question Count	 */	public void startTab2()	{		new Thread		(			new Thread()			{				public void run()				{					doGetMyQuestionUpdate();				}			}		).start();	}	/**	 *  	 */	private void doGetMyQuestionUpdate()	{		Log.e( "ff", "start" );		HttpURLConnection connection = null;		final String urlString = Information.Server_Url + "/api/user/" + Information.Id + "/questions/update?token=" + Information.Token;		try		{			URL url = new URL( urlString );			connection = ( HttpURLConnection ) url.openConnection();  			connection.setRequestProperty( "Connection", "keep-alive" );			connection.setRequestProperty( "Content-Type", "application/json" );			connection.setRequestMethod( "POST" );			connection.setConnectTimeout( 10000 );			connection.setReadTimeout( 30000 );			connection.setDoOutput( true );			connection.setDoInput( true );						SharedPreferences shared = getSharedPreferences( "whole2", Activity.MODE_PRIVATE );			JSONObject json = new JSONObject();			json.put( "updateTime", shared.getString( "tab2_update_count", "" ) );			connection.getOutputStream().write( json.toString().getBytes() );			final int responseCode = connection.getResponseCode();			if( responseCode == 200 )			{				BufferedReader reader = new BufferedReader( new InputStreamReader( connection.getInputStream() ) );				String temp1 = null;				StringBuilder value = new StringBuilder();				while( ( temp1 = reader.readLine() ) != null )				{					value.append( temp1 );				}				JSONObject jsonObject = new JSONObject( value.toString() );				if( jsonObject.getInt( "result" ) == 4000 )				{					Log.e( "ff", shared.getString( "tab2_update_count", "2015-01-01 16:36:26 +08:00" ) );					int change = jsonObject.getInt( "changes" );					Log.e( "ff", "" + change );					if( change > 0 )					{						if( change > 9 ) change = 9;						Message message = MainActivity.handler.obtainMessage();						message.what = 2;						message.arg1 = change;						MainActivity.handler.sendMessage( message );					}				}			}		}		catch( Exception ex )		{			ex.printStackTrace();		}		finally		{			if( connection != null )			{				connection.disconnect();			}		}	}		public void startTab3()	{		new Thread		(			new Thread()			{				public void run()				{					doGetAnswerUpdate();				}			}		).start();	}		/**	 *  	 */	private void doGetAnswerUpdate()	{		HttpURLConnection connection = null;		final String urlString = Information.Server_Url + "/api/user/" + Information.Id + "/answers/update?token=" + Information.Token;		try		{			URL url = new URL( urlString );			connection = ( HttpURLConnection ) url.openConnection();  			connection.setRequestProperty( "Connection", "keep-alive" );			connection.setRequestProperty( "Content-Type", "application/json" );			connection.setRequestMethod( "POST" );			connection.setConnectTimeout( 10000 );			connection.setReadTimeout( 30000 );			connection.setDoOutput( true );			connection.setDoInput( true );						SharedPreferences shared = getSharedPreferences( "whole2", Activity.MODE_PRIVATE );			JSONObject json = new JSONObject();			json.put( "updateTime", shared.getString( "tab3_update_count", "" ) );			connection.getOutputStream().write( json.toString().getBytes() );			final int responseCode = connection.getResponseCode();			if( responseCode == 200 )			{				BufferedReader reader = new BufferedReader( new InputStreamReader( connection.getInputStream() ) );				String temp1 = null;				StringBuilder value = new StringBuilder();				while( ( temp1 = reader.readLine() ) != null )				{					value.append( temp1 );				}				JSONObject jsonObject = new JSONObject( value.toString() );				if( jsonObject.getInt( "result" ) == 4000 )				{					int change = jsonObject.getInt( "changes" );					if( change > 0 )					{						if( change > 9 ) change = 9;						Message message = MainActivity.handler.obtainMessage();						message.what = 3;						message.arg1 = change;						MainActivity.handler.sendMessage( message );					}				}			}		}		catch( Exception ex )		{			ex.printStackTrace();		}		finally		{			if( connection != null )			{				connection.disconnect();			}		}	}		public void startTab4()	{		new Thread		(			new Thread()			{				public void run()				{					doGetReplyUpdate();				}			}		).start();	}		/**	 *  	 */	private void doGetReplyUpdate()	{		HttpURLConnection connection = null;		final String urlString = Information.Server_Url + "/api/mq/update?token=" + Information.Token;		try		{			URL url = new URL( urlString );			connection = ( HttpURLConnection ) url.openConnection();  			connection.setRequestProperty( "Connection", "keep-alive" );			connection.setRequestProperty( "Content-Type", "application/json" );			connection.setRequestMethod( "POST" );			connection.setConnectTimeout( 10000 );			connection.setReadTimeout( 30000 );			connection.setDoOutput( true );			connection.setDoInput( true );						SharedPreferences shared = getSharedPreferences( "whole2", Activity.MODE_PRIVATE );			JSONObject json = new JSONObject();			json.put( "updateTime", shared.getString( "tab4_update_count", "" ) );			connection.getOutputStream().write( json.toString().getBytes() );			final int responseCode = connection.getResponseCode();			if( responseCode == 200 )			{				BufferedReader reader = new BufferedReader( new InputStreamReader( connection.getInputStream() ) );				String temp1 = null;				StringBuilder value = new StringBuilder();				while( ( temp1 = reader.readLine() ) != null )				{					value.append( temp1 );				}				JSONObject jsonObject = new JSONObject( value.toString() );				if( jsonObject.getInt( "result" ) == 8000 )				{					int change = jsonObject.getInt( "changes" );					if( change > 0 )					{						if( change > 9 ) change = 9;						Message message = MainActivity.handler.obtainMessage();						message.what = 4;						message.arg1 = change;						MainActivity.handler.sendMessage( message );					}				}			}		}		catch( Exception ex )		{			ex.printStackTrace();		}		finally		{			if( connection != null )			{				connection.disconnect();			}		}	}	/**	 * 	 */	public IBinder onBind( Intent intent ) 	{		return new MyService.MyBinder();	}	/**	 * 	 */	public int onStartCommand( Intent intent, int flags, int startId )	{		return START_STICKY;	}	/**	 *  Binder	 * @author shuhang	 */	public class MyBinder extends Binder	{		public MyService getService()		{			return MyService.this;		}	}}