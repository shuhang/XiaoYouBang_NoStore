package com.pku.xiaoyoubang.view;import java.net.HttpURLConnection;import java.util.ArrayList;import java.util.List;import org.json.JSONArray;import org.json.JSONObject;import android.annotation.SuppressLint;import android.app.Activity;import android.app.AlertDialog;import android.app.Dialog;import android.content.Context;import android.content.DialogInterface;import android.content.DialogInterface.OnKeyListener;import android.content.Intent;import android.os.Bundle;import android.os.Handler;import android.os.Message;import android.text.ClipboardManager;import android.util.DisplayMetrics;import android.view.Gravity;import android.view.KeyEvent;import android.view.LayoutInflater;import android.view.View;import android.view.View.OnClickListener;import android.view.Window;import android.view.WindowManager;import android.widget.AdapterView;import android.widget.AdapterView.OnItemClickListener;import android.widget.Button;import android.widget.LinearLayout;import android.widget.RelativeLayout;import android.widget.TextView;import android.widget.Toast;import com.pku.xiaoyoubang.R;import com.pku.xiaoyoubang.entity.AnswerEntity;import com.pku.xiaoyoubang.entity.CommentEntity;import com.pku.xiaoyoubang.entity.UserEntity;import com.pku.xiaoyoubang.model.CommentListAdapter;import com.pku.xiaoyoubang.model.CommentListAdapter.CommentListener;import com.pku.xiaoyoubang.model.ShowImageGridAdapter;import com.pku.xiaoyoubang.selfview.CommentListView;import com.pku.xiaoyoubang.selfview.CommentListView.IXListViewListener;import com.pku.xiaoyoubang.selfview.GoodAnswerFragment;import com.pku.xiaoyoubang.selfview.MyAnswerFragment;import com.pku.xiaoyoubang.selfview.MyGridView;import com.pku.xiaoyoubang.selfview.MySaveAnswerFragment;import com.pku.xiaoyoubang.tool.Information;import com.pku.xiaoyoubang.tool.MyApplication;import com.pku.xiaoyoubang.tool.MyDatabaseHelper;import com.pku.xiaoyoubang.tool.Tool;import com.umeng.analytics.MobclickAgent;@SuppressWarnings("deprecation")@SuppressLint("HandlerLeak")public class AnswerInfoActivity extends Activity implements IXListViewListener, CommentListener{	/**	 *  Main	 */	private Button buttonBack;	private TextView textTitle;	private Button buttonPraise;	private Button buttonComment;	private Button buttonSave;		private MyGridView gridView;		private Dialog dialog;	/**	 *  List	 */	private CommentListView commentListView;	private CommentListAdapter adapter;		private int scrollPosition = 0;	private int scrollTop = 0;		private boolean hasEdit = false;	/**	 *  Data	 */	public static AnswerEntity entity;	private int commentClickIndex;		private HttpURLConnection connection = null;		private Handler handler;		private int type;		private boolean firstRefresh = true;		protected void onCreate( Bundle savedInstanceState )	{		super.onCreate( savedInstanceState );		requestWindowFeature( Window.FEATURE_NO_TITLE );		MyApplication.getInstance().addActivity( this );				type = getIntent().getIntExtra( "type", 0 );		if( type == 0 )		{			entity = QuestionInfoActivity.entity.getAnswerList().get( getIntent().getIntExtra( "index", 0 ) );			entity.setQuestionTitle( QuestionInfoActivity.entity.getQuestionTitle() );		}		else if( type == 1 )		{			entity = MyAnswerFragment.selectedEntity;		}		else if( type == 2 )		{			entity = AnswerListActivity.selectedEntity;		}		else if( type == 3 )		{			entity = QuestionInfoActivity.entity.getMyAnswer();		}		else if( type == 4 )		{			entity = ( AnswerEntity ) getIntent().getSerializableExtra( "answer" );		}		else if( type == 5 )		{			entity = GoodAnswerFragment.selectedEntity;		}		else if( type == 6 )		{			entity = MySaveAnswerFragment.selectedEntity;		}		handler = new Handler()		{			@SuppressWarnings("unchecked")			public void handleMessage( Message message )			{				switch( message.what )				{				case 0 : //refresh success									ArrayList< CommentEntity > newList = ( ArrayList< CommentEntity > ) message.obj;					if( newList.size() > 0 )					{						refreshCommentListUp( newList );					}					if( entity.isHasPraised() )					{						buttonPraise.setBackgroundColor( AnswerInfoActivity.this.getResources().getColor( R.color.bg_red ) );					}										if( !entity.getUserId().equals( Information.Id ) ) 					{						buttonSave.setEnabled( true );						if( entity.isHasSaved() )						{							buttonSave.setText( "已收藏" );						}						else						{							buttonSave.setText( "收藏" );						}					}										gridView.setAdapter( new ShowImageGridAdapter( AnswerInfoActivity.this, entity.getImageList() ) );					commentListView.updateHeader();					commentListView.stopRefresh();					if( firstRefresh )					{						firstRefresh = false;						commentListView.updateHeaderHeight( -120 );					}									commentListView.setRefreshTime( Tool.getShowTime( Tool.getNowTime() ) );					commentListView.setPullLoadEnable( true );					break;				case 1 : //refresh failed					showError( "刷新失败" );					break;				case 2 : //load more success					break;				case 3 : //get list failed					showError( "加载失败" );					commentListView.stopRefresh();					if( firstRefresh )					{						firstRefresh = false;						commentListView.updateHeaderHeight( -120 );					}					commentListView.setPullLoadEnable( true );					commentListView.stopLoadMore();					break;				case 4 : //No net - refresh					commentListView.stopRefresh();					if( firstRefresh )					{						firstRefresh = false;						commentListView.updateHeaderHeight( -120 );					}					commentListView.setPullLoadEnable( true );					showError( "网络不可用，请打开网络" );					break;				case 5 : //No net - laod more					commentListView.stopLoadMore();					showError( "网络不可用，请打开网络" );					break;				case 6 : //get user success					if( dialog != null )					{						dialog.dismiss();					}					showUser( ( UserEntity ) message.obj, 0 );					break;				case 7 : //get user failed					if( dialog != null )					{						dialog.dismiss();					}					showError( "获取用户资料失败" );					break;				case 8 : //praise success					if( dialog != null )					{						dialog.dismiss();					}							entity.setPraiseCount( entity.getPraiseCount() + 1 );					entity.setHasPraised( true );					entity.getPraise().add( Information.Name );					commentListView.updateHeader();					//gridView.setAdapter( new ShowImageGridAdapter( AnswerInfoActivity.this, entity.getImageList() ) );					buttonPraise.setBackgroundColor( AnswerInfoActivity.this.getResources().getColor( R.color.bg_red ) );					Tool.setHttpTag( buttonPraise.getId(), false );					break;				case 9 : //praise failed					if( dialog != null )					{						dialog.dismiss();					}					showError( "点赞失败" );					Tool.setHttpTag( buttonPraise.getId(), false );					break;				case 10 : //add save success					if( dialog != null )					{						dialog.dismiss();					}					showError( "收藏成功" );					entity.setHasSaved( true );					buttonSave.setText( "已收藏" );					break;				case 11 : //add save failed					if( dialog != null )					{						dialog.dismiss();					}					showError( "收藏失败" );					Tool.setHttpTag( buttonSave.getId(), false );					break;				case 12 : //delete save success					if( dialog != null )					{						dialog.dismiss();					}					entity.setHasSaved( false );					buttonSave.setText( "收藏" );					break;				case 13 : //delete save failed					if( dialog != null )					{						dialog.dismiss();					}					showError( "取消收藏失败" );					Tool.setHttpTag( buttonSave.getId(), false );					break;				}			}		};				initView();	}		private void initView()	{		setContentView( R.layout.answer_info );		commentListView = ( CommentListView ) findViewById( R.id.answer_info_list );		commentListView.setPullLoadEnable( true );		commentListView.setXListViewListener( this );		adapter = new CommentListAdapter( this, new ArrayList< CommentEntity >() );		adapter.setMyListener( this );		commentListView.setAdapter( adapter );		commentListView.updateHeader();		commentListView.setOnItemClickListener		(			new OnItemClickListener()			{				public void onItemClick( AdapterView<?> parent, View view, int position, long id )				{					if( Tool.isFastDoubleClick() )					{						return;					}					if( position >= 2 )					{						clickCommentAtIndex( position - 2 );					}				}			}		);				textTitle = ( TextView ) findViewById( R.id.answer_info_title );		if( entity.isInvisible() )		{			textTitle.setText( "匿名用户的回答" );		}		else		{			if( entity.getType() == 0 )			{				textTitle.setText( entity.getName() + "的回答" );			}			else			{				textTitle.setText( entity.getName() + "的总结" );			}		}						buttonBack = ( Button ) findViewById( R.id.answer_info_button_back );		buttonBack.setText( "<  " );		buttonBack.setOnClickListener		(			new OnClickListener()			{				public void onClick( View view )				{					if( Tool.isFastDoubleClick() )					{						return;					}					back();				}							}		);				if( entity.getUserId().equals( Information.Id ) ) 		{			RelativeLayout layout1 = ( RelativeLayout ) findViewById( R.id.answer_info_layout2 );			layout1.setVisibility( View.VISIBLE );						buttonPraise = ( Button ) findViewById( R.id.answer_info_button_praise );			buttonComment = ( Button ) findViewById( R.id.answer_info_button_comment );		}		else		{			LinearLayout layout2 = ( LinearLayout ) findViewById( R.id.answer_info_layout3 );			layout2.setVisibility( View.VISIBLE );						buttonPraise = ( Button ) findViewById( R.id.answer_info_button_praise_ );			buttonComment = ( Button ) findViewById( R.id.answer_info_button_comment_ );			buttonSave = ( Button ) findViewById( R.id.answer_info_button_save );			Tool.setHttpTag( buttonSave.getId(), false );			buttonSave.setEnabled( false );			buttonSave.setOnClickListener			(				new OnClickListener()				{					public void onClick( View view )					{						if( Tool.isFastDoubleClick() )						{							return;						}						if( Tool.getHttpTag( buttonSave.getId() ) )						{							return;						}						Tool.setHttpTag( buttonSave.getId(), true );						saveAnswer();					}								}			);		}				if( entity.getUserId().equals( Information.Id ) && !entity.isInvisible() )		{			if( entity.getType() == 0 )			{				buttonPraise.setText( "编辑回答" );			}			else			{				buttonPraise.setText( "编辑总结" );			}		}		else		{			if( entity.isHasPraised() || entity.getUserId().equals( Information.Id ) )			{				buttonPraise.setBackgroundColor( this.getResources().getColor( R.color.bg_red ) );			}		}		Tool.setHttpTag( buttonPraise.getId(), false );		buttonPraise.setOnClickListener		(			new OnClickListener()			{				public void onClick( View view )				{					if( Tool.isFastDoubleClick() )					{						return;					}					if( Tool.getHttpTag( buttonPraise.getId() ) )					{						return;					}					Tool.setHttpTag( buttonPraise.getId(), true );					praise();				}							}		);		buttonComment.setOnClickListener		(			new OnClickListener()			{				public void onClick( View view )				{					if( Tool.isFastDoubleClick() )					{						return;					}					comment();				}							}		);				onRefresh();				gridView = ( MyGridView ) findViewById( R.id.answer_info_list_header_gridView );		gridView.setAdapter( new ShowImageGridAdapter( this, entity.getImageList() ) );				gridView.setOnItemClickListener		(			new OnItemClickListener()			{				public void onItemClick(AdapterView<?> parent, View view, int position, long id) 				{					onClickImage( position );				}			}		);	}		private void back()	{				//MyDatabaseHelper.getInstance( this ).updateMyAnswer( entity.getId(), entity.getModifyTime() );		if( hasEdit )		{			Intent intent = getIntent();			intent.putExtra( "id", entity.getId() );			intent.putExtra( "answer", entity.getAnswerInfo() );			setResult( 8, intent );			finish();		}		else		{			entity.setModifyTime( "" );			setResult( 5 );			finish();		}	}		private void saveAnswer()	{		if( !entity.isHasSaved() )		{			startAddSave();		}		else		{			AlertDialog.Builder dialog = new AlertDialog.Builder( this );	        dialog.setTitle( "提示" ).setMessage( "确定要取消收藏吗？" )	        .setPositiveButton( "确定", new DialogInterface.OnClickListener() 	        {	        	public void onClick( DialogInterface dialog, int which ) 	        	{	        		startDeleteSave();	        	}	        }).setNegativeButton( "取消", new DialogInterface.OnClickListener() 	        {	        	public void onClick( DialogInterface dialog, int which ) 	        	{	        		dialog.cancel();	        	}	        }).create().show();		}	}		private void praise()	{		if( entity.getUserId().equals( Information.Id ) )		{			Intent intent = new Intent( this, AddAnswerActivity.class );			intent.putExtra( "type", 1 );			intent.putExtra( "value", entity.getAnswerInfo() );			intent.putExtra( "id", entity.getId() );			intent.putExtra( "questionTitle", entity.getQuestionTitle() );			intent.putExtra( "questionType", entity.getType() );			startActivityForResult( intent, 1005 );		}		else		{			if( entity.isHasPraised() )			{				Toast.makeText( this, "已经点过赞了亲", Toast.LENGTH_SHORT ).show();			}			else			{				startPraise();			}		}	}		private void startAddSave()	{		if( Tool.isNetworkConnected( this ) == true )		{			dialog = new Dialog( this, R.style.dialog_progress );			LayoutInflater inflater = LayoutInflater.from( this );  			View view = inflater.inflate( R.layout.dialog_progress, null );			TextView textView = ( TextView ) view.findViewById( R.id.dialog_textview );			textView.setText( "正在收藏" );						WindowManager.LayoutParams layoutParams = dialog.getWindow().getAttributes();			layoutParams.alpha = 0.8f;			dialog.getWindow().setAttributes( layoutParams );			dialog.setContentView( view );			dialog.setCancelable( false );			dialog.setOnKeyListener			(				new OnKeyListener()				{					public boolean onKey( DialogInterface dialog, int keyCode, KeyEvent event ) 					{						if( keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0 )						{							if( connection != null )							{								connection.disconnect();							}							dialog.dismiss();							return true;						}						return false;					}				}			);			dialog.show();						new Thread	    	(	    		new Thread()	    		{	    			public void run()	    			{	    				doAddSave();	    			}	    		}	    	).start();		}		else		{			Toast.makeText( this, "网络不可用，请打开网络", Toast.LENGTH_SHORT ).show();		}	}		private void startDeleteSave()	{		if( Tool.isNetworkConnected( this ) == true )		{			dialog = new Dialog( this, R.style.dialog_progress );			LayoutInflater inflater = LayoutInflater.from( this );  			View view = inflater.inflate( R.layout.dialog_progress, null );			TextView textView = ( TextView ) view.findViewById( R.id.dialog_textview );			textView.setText( "正在取消收藏" );						WindowManager.LayoutParams layoutParams = dialog.getWindow().getAttributes();			layoutParams.alpha = 0.8f;			dialog.getWindow().setAttributes( layoutParams );			dialog.setContentView( view );			dialog.setCancelable( false );			dialog.setOnKeyListener			(				new OnKeyListener()				{					public boolean onKey( DialogInterface dialog, int keyCode, KeyEvent event ) 					{						if( keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0 )						{							if( connection != null )							{								connection.disconnect();							}							dialog.dismiss();							return true;						}						return false;					}				}			);			dialog.show();						new Thread	    	(	    		new Thread()	    		{	    			public void run()	    			{	    				doDeleteSave();	    			}	    		}	    	).start();		}		else		{			Toast.makeText( this, "网络不可用，请打开网络", Toast.LENGTH_SHORT ).show();		}	}		private void startPraise()	{		if( Tool.isNetworkConnected( this ) == true )		{			dialog = new Dialog( this, R.style.dialog_progress );			LayoutInflater inflater = LayoutInflater.from( this );  			View view = inflater.inflate( R.layout.dialog_progress, null );			TextView textView = ( TextView ) view.findViewById( R.id.dialog_textview );			textView.setText( "正在点赞" );						WindowManager.LayoutParams layoutParams = dialog.getWindow().getAttributes();			layoutParams.alpha = 0.8f;			dialog.getWindow().setAttributes( layoutParams );			dialog.setContentView( view );			dialog.setCancelable( false );			dialog.setOnKeyListener			(				new OnKeyListener()				{					public boolean onKey( DialogInterface dialog, int keyCode, KeyEvent event ) 					{						if( keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0 )						{							if( connection != null )							{								connection.disconnect();							}							dialog.dismiss();							return true;						}						return false;					}				}			);			dialog.show();						new Thread	    	(	    		new Thread()	    		{	    			public void run()	    			{	    				doPraise();	    			}	    		}	    	).start();		}		else		{			Toast.makeText( this, "网络不可用，请打开网络", Toast.LENGTH_SHORT ).show();		}	}		private void doAddSave()	{		try		{			final String urlString = Information.Server_Url + "/api/user/saveanswers/add";						JSONObject json = new JSONObject();			json.put( "token", Information.Token );			json.put( "answerId", entity.getId() );						JSONObject result = Tool.doPostWithUrl( urlString, json );			if( result == null )			{				handler.sendEmptyMessage( 11 );			}			else			{				if( result.getInt( "result" ) == 4000 )				{					handler.sendEmptyMessage( 10 );				}				else				{					handler.sendEmptyMessage( 11 );				}			}		}		catch( Exception ex )		{			handler.sendEmptyMessage( 11 );		}	}		private void doDeleteSave()	{		try		{			final String urlString = Information.Server_Url + "/api/user/saveanswers/delete";						JSONObject json = new JSONObject();			json.put( "token", Information.Token );			json.put( "answerId", entity.getId() );						JSONObject result = Tool.doPostWithUrl( urlString, json );			if( result == null )			{				handler.sendEmptyMessage( 13 );			}			else			{				if( result.getInt( "result" ) == 4000 )				{					handler.sendEmptyMessage( 12 );				}				else				{					handler.sendEmptyMessage( 13 );				}			}		}		catch( Exception ex )		{			handler.sendEmptyMessage( 13 );		}	}		private void doPraise()	{		try		{			final String urlString = Information.Server_Url + "/api/answer/" + entity.getId() + "/praise";						JSONObject json = new JSONObject();			json.put( "token", Information.Token );						JSONObject result = Tool.doPostWithUrl( urlString, json );			if( result == null )			{				handler.sendEmptyMessage( 9 );			}			else			{				if( result.getInt( "result" ) == 6000 )				{					MyDatabaseHelper.getInstance( this ).updateQuestion2( entity.getQuestionId(), result.getString( "modifyTime" ) );					MyDatabaseHelper.getInstance( this ).updateMyAnswer( entity.getId(), result.getString( "modifyTime" ) );					handler.sendEmptyMessage( 8 );				}				else				{					handler.sendEmptyMessage( 9 );				}			}		}		catch( Exception ex )		{			handler.sendEmptyMessage( 9 );		}	}		private void comment()	{		Intent intent = new Intent( this, AddCommentActivity.class );		intent.putExtra( "type", 1 );		intent.putExtra( "answerId", entity.getId() );		intent.putExtra( "questionId", entity.getQuestionId() );		startActivityForResult( intent, 1007 );	}		private void clickCommentAtIndex( int position )	{		commentClickIndex = position;				dialog = new Dialog( this, R.style.my_dialog );		LayoutInflater inflater = LayoutInflater.from( this );  		View view = inflater.inflate( R.layout.comment_pop_view, null );		Button buttonReply = ( Button ) view.findViewById( R.id.comment_pop_view_button_reply );		buttonReply.setOnClickListener		(			new OnClickListener()			{				public void onClick( View view )				{					if( Tool.isFastDoubleClick() )					{						return;					}					reply();				}							}		);		Button buttonCopy = ( Button ) view.findViewById( R.id.comment_pop_view_button_copy );		buttonCopy.setOnClickListener		(			new OnClickListener()			{				public void onClick( View view )				{					if( Tool.isFastDoubleClick() )					{						return;					}					copy();				}							}		);				WindowManager.LayoutParams layoutParams = dialog.getWindow().getAttributes();		layoutParams.alpha = 1.0f;		dialog.getWindow().setAttributes( layoutParams );		dialog.setContentView( view );		dialog.setCancelable( true );		dialog.show();	}		private void reply()	{		dialog.dismiss();				Intent intent = new Intent( this, AddCommentActivity.class );		intent.putExtra( "replyId", ( ( CommentEntity ) adapter.getItem( commentClickIndex ) ).getUserId() );		intent.putExtra( "name", ( ( CommentEntity ) adapter.getItem( commentClickIndex ) ).getUserName() );		intent.putExtra( "questionId", entity.getQuestionId() );		intent.putExtra( "answerId", entity.getId() );		intent.putExtra( "type", 3 );		startActivityForResult( intent, 1010 );	}		private void copy()	{		ClipboardManager manager =( ClipboardManager ) getSystemService( Context.CLIPBOARD_SERVICE );		manager.setText( ( ( CommentEntity ) adapter.getItem( commentClickIndex ) ).getCommentInfo() );				dialog.dismiss();		Toast.makeText( this, "文字已复制", Toast.LENGTH_SHORT ).show();	}		private void copyAnswer()	{		ClipboardManager manager =( ClipboardManager ) getSystemService( Context.CLIPBOARD_SERVICE );		manager.setText( entity.getAnswerInfo() );				dialog.dismiss();		Toast.makeText( this, "文字已复制", Toast.LENGTH_SHORT ).show();	}		public void onResume() 	{		super.onResume();		MobclickAgent.onResume( this );	}		public void onPause()	{		super.onPause();		MobclickAgent.onPause( this );	}	public void onRefresh()	{		if( Tool.isNetworkConnected( this ) == true )		{			new Thread			(				new Thread()				{					public void run()					{						refresh();					}				}			).start();		}		else		{			handler.sendEmptyMessage( 4 );		}	}		private void refresh()	{		try		{			final String urlString = Information.Server_Url + "/api/answer/" + entity.getId() + "?token=" + Information.Token;			JSONObject result = Tool.doGetWithUrl( urlString );			if( result == null )			{				handler.sendEmptyMessage( 3 );			}			else			{				if( result.getInt( "result" ) == 4000 )				{					entity.setHasSaved( result.getBoolean( "saved" ) );					entity.setCreateTime( result.getString( "createTime" ) );					entity.setModifyTime( result.getString( "modifyTime" ) );					entity.setUserHeadUrl( result.getString( "headUrl" ) );					entity.setJob( result.getString( "job" ) );					entity.setCompany( result.getString( "company" ) );					if( result.has( "editTime" ) )					{						entity.setEditTime( result.getString( "editTime" ) );					}										if( result.has( "answerType" ) )			    	{						entity.setType( result.getInt( "answerType" ) );			    	}										if( result.has( "images" ) )			    	{						JSONArray imageArray = result.getJSONArray( "images" );				    	final int imageCount = imageArray.length();				    	List< String > imageList = new ArrayList< String >( imageCount );				    	for( int i = 0; i < imageCount; i ++ )				    	{				    		imageList.add( imageArray.getString( i ) );				    	}				    	entity.setImageList( imageList );			    	}										if( result.has( "hasImage" ) )			    	{						entity.setHasImage( result.getBoolean( "hasImage" ) );			    	}										JSONArray praise = result.getJSONArray( "praiseUserList" );					int tempCount = praise.length();					List< String > tempList = new ArrayList< String >();					for( int i = 0; i < tempCount; i ++ )					{						tempList.add( praise.getString( i ) );					}					entity.setPraise( tempList );										entity.setHasPraised( result.getBoolean( "praised" ) );										JSONArray array = result.getJSONArray( "comments" );					int count = array.length();					List< CommentEntity > list = new ArrayList< CommentEntity >( count );					for( int i = 0; i < count; i ++ )					{						JSONObject object = array.getJSONObject( i );						CommentEntity temp = new CommentEntity();						temp.setQuestionId( entity.getQuestionId() );						temp.setCommentInfo( object.getString( "content" ) );						temp.setTime( object.getString( "time" ) );						if( object.has( "replyId" ) )						{							temp.setReplyId( object.getString( "replyId" ) );						}						if( object.has( "replyName" ) )						{							temp.setReplyName( object.getString( "replyName" ) );						}						temp.setUserHeadUrl( object.getString( "headUrl" ) );						temp.setUserId( object.getString( "userId" ) );						temp.setUserName( object.getString( "name" ) );												list.add( temp );					}					Message message = handler.obtainMessage();					message.what = 0;					message.obj = list;					handler.sendMessage( message );				}				else				{					handler.sendEmptyMessage( 3 );				}			}		}		catch( Exception ex )		{			ex.printStackTrace();			handler.sendEmptyMessage( 3 );		}	}		private void refreshCommentListUp( ArrayList< CommentEntity > newCommentList )	{		entity.setCommentList( newCommentList );		entity.setCommentCount( entity.getCommentList().size() );				List< CommentEntity > commentList = new ArrayList< CommentEntity >();		int count = entity.getCommentList().size();		if( count > 0 )		{			if( count > 20 ) count = 20;			commentList = new ArrayList< CommentEntity >( entity.getCommentList().subList( 0, count ) );		}				adapter = new CommentListAdapter( this, commentList );					adapter.setMyListener( this );		commentListView.setAdapter( adapter );		adapter.notifyDataSetChanged();	}	public void onLoadMore()	{		scrollPosition = commentListView.getFirstVisiblePosition();		View v = commentListView.getChildAt( 0 );        scrollTop = ( v == null ) ? 0 : v.getTop();                List< CommentEntity > commentList = new ArrayList< CommentEntity >();		int count = entity.getCommentList().size() - adapter.getCount();		if( count > 0 )		{			if( count > 20 ) count = 20;			commentList = new ArrayList< CommentEntity >( entity.getCommentList().subList( adapter.getCount(), adapter.getCount() + count ) );						adapter = new CommentListAdapter( this, commentList );						adapter.setMyListener( this );			commentListView.setAdapter( adapter );			adapter.notifyDataSetChanged();		}				commentListView.setSelectionFromTop( scrollPosition, scrollTop );		commentListView.stopLoadMore();	}		private void showError( String text )	{		Toast.makeText( this, text, Toast.LENGTH_SHORT ).show();	}	public void backTo() 	{		back();	}		public void showCopy( int x, int y )	{		if( Tool.isFastDoubleClick() )		{			return;		}				dialog = new Dialog( this, R.style.my_dialog );		LayoutInflater inflater = LayoutInflater.from( this );  		View view = inflater.inflate( R.layout.answer_pop_view, null );		Button buttonCopy = ( Button ) view.findViewById( R.id.answer_pop_view_button );		buttonCopy.setOnClickListener		(			new OnClickListener()			{				public void onClick( View view )				{					if( Tool.isFastDoubleClick() )					{						return;					}					copyAnswer();				}							}		);				WindowManager.LayoutParams layoutParams = dialog.getWindow().getAttributes();		layoutParams.alpha = 1.0f;		DisplayMetrics dm = new DisplayMetrics();		getWindowManager().getDefaultDisplay().getMetrics(dm);		layoutParams.y = ( int )(  x + y / 2 - dm.heightPixels / 2 );		dialog.getWindow().setAttributes( layoutParams );		dialog.getWindow().setGravity( Gravity.CENTER );		dialog.setContentView( view );		dialog.setCancelable( true );		dialog.show();	}	public void showHead() 	{		if( entity.isInvisible() )		{			showError( "此乃匿名用户" );		}		else		{			getUser( entity.getUserId() );		}	}		public void getUser( final String id )	{		UserEntity user = null;		if( id.equals( Information.Id ) )		{			startActivity( new Intent( this, MyInfoActivity.class ) );			return;		}		else		{			user = MyDatabaseHelper.getInstance( this ).getFriend( id );		}		if( user == null )		{			if( Tool.isNetworkConnected( this ) == true )			{				dialog = new Dialog( this, R.style.dialog_progress );				LayoutInflater inflater = LayoutInflater.from( this );  				View view = inflater.inflate( R.layout.dialog_progress, null );				TextView textView = ( TextView ) view.findViewById( R.id.dialog_textview );				textView.setText( "正在获取用户资料" );								WindowManager.LayoutParams layoutParams = dialog.getWindow().getAttributes();				layoutParams.alpha = 0.8f;				dialog.getWindow().setAttributes( layoutParams );				dialog.setContentView( view );				dialog.setCancelable( false );				dialog.setOnKeyListener				(					new OnKeyListener()					{						public boolean onKey( DialogInterface dialog, int keyCode, KeyEvent event ) 						{							if( keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0 )							{								if( connection != null )								{									connection.disconnect();								}								dialog.dismiss();								return true;							}							return false;						}					}				);				dialog.show();								new Thread		    	(		    		new Thread()		    		{		    			public void run()		    			{		    				doLoadInformation( id );		    			}		    		}		    	).start();			}			else			{				Toast.makeText( this, "网络不可用，请打开网络", Toast.LENGTH_SHORT ).show();			}		}		else		{			showUser( user, 1 );		}	}		private void showUser( UserEntity user, int type )	{		Intent intent = new Intent( this, UserInfoActivity.class );		Bundle bundle = new Bundle();		bundle.putInt( "type", type );		bundle.putSerializable( "user", user );		intent.putExtras( bundle );		startActivity( intent );	}		private void doLoadInformation( final String id )	{		try		{			final String urlString = Information.Server_Url + "/api/user/" + id + "?token=" + Information.Token;			JSONObject jsonObject = Tool.doGetWithUrl( urlString );			if( jsonObject == null )			{				handler.sendEmptyMessage( 7 );			}			else			{				UserEntity user = new UserEntity();				user.setId( id );				user.setName( jsonObject.getString( "name" ) );				user.setHeadUrl( jsonObject.getString( "headUrl" ) );				user.setSex( jsonObject.getInt( "sex" ) );				user.setBirthday( jsonObject.getString( "birthyear" ) );				user.setPku( jsonObject.getString( "pku" ) );				user.setNowHome( jsonObject.getString( "base" ) );				user.setOldHome( jsonObject.getString( "hometown" ) );				user.setQq( jsonObject.getString( "qq" ) );				user.setJob1( jsonObject.getString( "company" ) );				user.setJob2( jsonObject.getString( "department" ) );				user.setJob3( jsonObject.getString( "job" ) );				user.setVersion( jsonObject.getInt( "version" ) );				user.setPraiseCount( jsonObject.getInt( "praisedCount" ) );				user.setAnswerCount( jsonObject.getInt( "answerCount" ) );				user.setQuestionCount( jsonObject.getInt( "questionCount" ) );				user.setAnswerMe( jsonObject.getInt( "answerMeCount" ) );				user.setMeAnswer( jsonObject.getInt( "myAnswerCount" ) );				user.setIntro( jsonObject.getString( "intro" ) );				if( jsonObject.has( "invitedBy" ) )				{					user.setInviteName( jsonObject.getJSONObject( "invitedBy" ).getString( "name" ) );					user.setInviteHeadUrl( jsonObject.getJSONObject( "invitedBy" ).getString( "headUrl" ) );					user.setInviteUserId( jsonObject.getJSONObject( "invitedBy" ).getString( "id" ) );				}				else				{					user.setInviteName( "元老" );					user.setInviteHeadUrl( "" );					user.setInviteUserId( "" );				}								String[] temp = new String[]{ "", "", "", "", "" };				JSONArray tags = jsonObject.getJSONArray( "tags" );				final int count = tags.length();				for( int i = 0; i < count; i ++ )				{					temp[ i ] = tags.getString( i );				}				user.setTag( temp );								Message message = handler.obtainMessage();				message.what = 6;				message.obj = user;				handler.sendMessage( message );			}		}		catch( Exception ex )		{			handler.sendEmptyMessage( 7 );		}	}		protected void onActivityResult( int requestCode, int resultCode, Intent data ) 	{		super.onActivityResult( requestCode, resultCode, data );		if( resultCode == 2 )		{			hasEdit = true;			commentListView.updateHeader();			gridView.setAdapter( new ShowImageGridAdapter( AnswerInfoActivity.this, entity.getImageList() ) );		}		else if( resultCode == 3 )		{			CommentEntity commentEntity = ( CommentEntity ) data.getSerializableExtra( "comment" );					MyDatabaseHelper.getInstance( this ).updateQuestion2( entity.getQuestionId(), commentEntity.getTime() );			MyDatabaseHelper.getInstance( this ).updateMyAnswer( entity.getId(), commentEntity.getTime() );			entity.getCommentList().add( 0, commentEntity );			entity.setCommentCount( entity.getCommentList().size() );			commentListView.updateHeader();			//gridView.setAdapter( new ShowImageGridAdapter( AnswerInfoActivity.this, entity.getImageList() ) );			List< CommentEntity > list = new ArrayList< CommentEntity >( adapter.getList() );			list.add( 0, commentEntity );			adapter = new CommentListAdapter( this, list );			adapter.setMyListener( this );			commentListView.setAdapter( adapter );			adapter.notifyDataSetChanged();		}	}		public boolean onKeyDown( int keyCode, KeyEvent event )	{		if( keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0 )		{			back();			return true;		}		return false;	}	public void showCommentHead( int index ) 	{		if( Tool.isFastDoubleClick() )		{			return;		}		getUser( entity.getCommentList().get( index ).getUserId() );	}		public void onClickImage( int index ) 	{		if( Tool.isFastDoubleClick() )		{			return;		}		Intent intent = new Intent( this, ViewPictureActivity.class );		intent.putExtra( "index", index );		ArrayList< String > pictureList = new ArrayList< String >( entity.getImageList().size() );		for( String temp : entity.getImageList() )		{			pictureList.add( Information.Server_Url + temp.replaceFirst( "_small", "" ) );		}		intent.putStringArrayListExtra( "pictureListBig", pictureList );		startActivity( intent );	}}