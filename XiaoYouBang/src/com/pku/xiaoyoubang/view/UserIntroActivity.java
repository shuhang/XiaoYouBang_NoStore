package com.pku.xiaoyoubang.view;import java.net.HttpURLConnection;import org.json.JSONObject;import android.annotation.SuppressLint;import android.app.Activity;import android.app.AlertDialog;import android.app.Dialog;import android.content.DialogInterface;import android.content.DialogInterface.OnKeyListener;import android.os.Bundle;import android.os.Handler;import android.os.Message;import android.view.KeyEvent;import android.view.LayoutInflater;import android.view.View;import android.view.View.OnClickListener;import android.view.Window;import android.view.WindowManager;import android.widget.Button;import android.widget.EditText;import android.widget.TextView;import android.widget.Toast;import com.pku.xiaoyoubang.R;import com.pku.xiaoyoubang.entity.UserEntity;import com.pku.xiaoyoubang.tool.Information;import com.pku.xiaoyoubang.tool.MyApplication;import com.pku.xiaoyoubang.tool.MyDatabaseHelper;import com.pku.xiaoyoubang.tool.Tool;@SuppressLint("HandlerLeak")public class UserIntroActivity extends Activity{	private String name;	private String value;	private String id;		private TextView textTitle;	private TextView textValue;		private Button buttonBack;	private Button buttonEdit;		private Button buttonBack1;	private Button buttonFinish;	private EditText input;		private int nowState = 0;		private Dialog dialog;	private HttpURLConnection connection = null;	private Handler handler;		protected void onCreate( Bundle savedInstanceState )	{		super.onCreate( savedInstanceState );		requestWindowFeature( Window.FEATURE_NO_TITLE );		MyApplication.getInstance().addActivity( this );				name = getIntent().getStringExtra( "name" );		value = getIntent().getStringExtra( "value" );		id = getIntent().getStringExtra( "id" );				handler = new Handler()		{			public void handleMessage( Message message )			{					switch( message.what )				{				case 0 : //edit success					if( dialog != null )					{						dialog.dismiss();					}					value = input.getText().toString();					Information.Intro = value;					editSuccess();					break;				case 1 : //edit failed					if( dialog != null )					{						dialog.dismiss();					}					showError( "编辑失败" );					break;				}			}		};				initView();	}		private void initView()	{		nowState = 0;		setContentView( R.layout.user_intro );				textTitle = ( TextView ) findViewById( R.id.user_intro_title );		textTitle.setText( name + "的自我介绍" );				textValue = ( TextView ) findViewById( R.id.user_intro_text );		textValue.setText( value );				buttonBack = ( Button ) findViewById( R.id.user_intro_button_back );		buttonBack.setText( "<  " );		buttonBack.setOnClickListener		(			new OnClickListener()			{				public void onClick( View view )				{					if( Tool.isFastDoubleClick() )					{						return;					}					finish();				}			}		);				buttonEdit = ( Button ) findViewById( R.id.user_intro_button_edit );		if( !id.equals( Information.Id ) )		{			buttonEdit.setVisibility( View.INVISIBLE );		}		buttonEdit.setOnClickListener		(			new OnClickListener()			{				public void onClick( View view )				{					if( Tool.isFastDoubleClick() )					{						return;					}					showEditView();				}			}		);	}		private void editSuccess()	{		UserEntity entity = new UserEntity();		entity.setId( Information.Id );		entity.setName( Information.Name );		entity.setHeadUrl( Information.HeadUrl );		entity.setSex( Information.Sex );		entity.setBirthday( Information.Birthday );		entity.setPku( Information.PKU_Value );		entity.setNowHome( Information.Now_Home );		entity.setOldHome( Information.Old_Home );		entity.setQq( Information.QQ );		entity.setJob1( Information.Company );		entity.setJob2( Information.Part );		entity.setJob3( Information.Job );		entity.setVersion( Information.Version );		entity.setTag( Information.Tag );		entity.setInviteName( Information.InviteUserName );		entity.setInviteHeadUrl( Information.InviteUserHeadUrl );		entity.setInviteUserId( Information.InviteUserId );		entity.setQuestionCount( Information.Question_Count );		entity.setAnswerCount( Information.Answer_Count );		entity.setPraiseCount( Information.Praise_Count );		entity.setIntro( Information.Intro );				MyDatabaseHelper.getInstance( this ).insertUser( entity );				initView();	}		private void showEditView()	{		nowState = 1;		setContentView( R.layout.edit_my_intro );				input = ( EditText ) findViewById( R.id.edit_my_intro_input );		input.setText( value );				buttonBack1 = ( Button ) findViewById( R.id.edit_my_intro_button_back );		buttonBack1.setText( "<  " );		buttonBack1.setOnClickListener		(			new OnClickListener()			{				public void onClick( View view )				{					if( Tool.isFastDoubleClick() )					{						return;					}					showExitDialog();				}			}		);				buttonFinish = ( Button ) findViewById( R.id.edit_my_intro_button_finish );		buttonFinish.setOnClickListener		(			new OnClickListener()			{				public void onClick( View view )				{					if( Tool.isFastDoubleClick() )					{						return;					}					doStartEdit();				}			}		);	}		private void doStartEdit()	{		if( Tool.isNetworkConnected( this ) == true )		{			dialog = new Dialog( this, R.style.dialog_progress );			LayoutInflater inflater = LayoutInflater.from( this );  			View view = inflater.inflate( R.layout.dialog_progress, null );			TextView textView = ( TextView ) view.findViewById( R.id.dialog_textview );				textView.setText( "正在保存" );						WindowManager.LayoutParams layoutParams = dialog.getWindow().getAttributes();			layoutParams.alpha = 0.8f;			dialog.getWindow().setAttributes( layoutParams );			dialog.setContentView( view );			dialog.setCancelable( false );			dialog.setOnKeyListener			(				new OnKeyListener()				{					public boolean onKey( DialogInterface dialog, int keyCode, KeyEvent event ) 					{						if( keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0 )						{							if( connection != null )							{								connection.disconnect();							}							dialog.dismiss();							return true;						}						return false;					}				}			);			dialog.show();						new Thread	    	(	    		new Thread()	    		{	    			public void run()	    			{	    				doEdit();	    			}	    		}	    	).start();		}		else		{			showError( "网络不可用，请打开网络" );		}	}		private void doEdit()	{		try		{			final String urlString = Information.Server_Url + "/api/user";						JSONObject json = new JSONObject();			json.put( "token", Information.Token );			json.put( "intro", input.getText().toString() );			JSONObject result = Tool.doPutWithUrl( urlString, json );			if( result == null )			{				handler.sendEmptyMessage( 1 );			}			else			{				if( result.getInt( "result" ) == 1000 )				{					handler.sendEmptyMessage( 0 );				}				else				{					handler.sendEmptyMessage( 1 );				}			}		}		catch( Exception ex )		{			handler.sendEmptyMessage( 1 );		}	}		private void showExitDialog()	{		AlertDialog.Builder dialog = new AlertDialog.Builder( this );        dialog.setTitle( "编辑个人资料" ).setMessage( "确定要放弃编辑吗？" )        .setPositiveButton( "确定", new DialogInterface.OnClickListener()         {        	public void onClick( DialogInterface dialog, int which )         	{        		initView();        	}        }).setNegativeButton( "取消", new DialogInterface.OnClickListener()         {        	public void onClick( DialogInterface dialog, int which )         	{        		dialog.cancel();        	}        }).create().show();	}		private void showError( String text )	{		Toast.makeText( this, text, Toast.LENGTH_SHORT ).show();	}		public boolean onKeyDown( int keyCode, KeyEvent event )	{		if( keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0 )		{			if( nowState == 0 )			{				finish();			}			else			{				showExitDialog();			}			return true;		}		return false;	}}