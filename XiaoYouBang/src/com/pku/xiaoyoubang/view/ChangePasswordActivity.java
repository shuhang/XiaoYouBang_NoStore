package com.pku.xiaoyoubang.view;import java.io.BufferedReader;import java.io.InputStreamReader;import java.net.HttpURLConnection;import java.net.URL;import org.json.JSONObject;import android.annotation.SuppressLint;import android.app.Activity;import android.app.Dialog;import android.content.DialogInterface;import android.content.DialogInterface.OnKeyListener;import android.os.Bundle;import android.os.Handler;import android.os.Message;import android.view.KeyEvent;import android.view.LayoutInflater;import android.view.View;import android.view.WindowManager;import android.view.View.OnClickListener;import android.view.Window;import android.widget.Button;import android.widget.EditText;import android.widget.TextView;import android.widget.Toast;import com.pku.xiaoyoubang.R;import com.pku.xiaoyoubang.tool.Information;import com.pku.xiaoyoubang.tool.MyApplication;import com.pku.xiaoyoubang.tool.Tool;@SuppressLint("HandlerLeak")public class ChangePasswordActivity extends Activity{	private Handler handler;		private EditText text1;	private EditText text2;	private EditText text3;		private Button buttonBack;	private Button buttonFinish;		private Dialog dialog;		private HttpURLConnection connection = null;		protected void onCreate( Bundle savedInstanceState )	{		super.onCreate( savedInstanceState );		requestWindowFeature( Window.FEATURE_NO_TITLE );		MyApplication.getInstance().addActivity( this );				handler = new Handler()		{			public void handleMessage( Message message )			{				if( dialog != null )				{					dialog.dismiss();				}				switch( message.what )				{				case 0 : //Change success					showError( "修改成功" );					back();					break;				case 1 : //Wrong old password					showError( "原密码不正确" );					break;				case 2 : //Change Failed;					showError( "修改失败" );					break;				}			}		};				initView();	}	private void initView()	{		setContentView( R.layout.change_password );				text1 = ( EditText ) findViewById( R.id.change_password_password );		text2 = ( EditText ) findViewById( R.id.change_password_password1 );		text3 = ( EditText ) findViewById( R.id.change_password_password2 );				buttonBack = ( Button ) findViewById( R.id.change_password_button_back );		buttonBack.setText( "<  " );		buttonBack.setOnClickListener		(			new OnClickListener()			{				public void onClick( View view )				{					back();				}			}		);				buttonFinish = ( Button ) findViewById( R.id.change_password_button_finish );		buttonFinish.setOnClickListener		(			new OnClickListener()			{				public void onClick( View view )				{					commitEdit();				}			}		);	}		private void showError( String text )	{		Toast.makeText( this, text, Toast.LENGTH_SHORT ).show();	}		private void back()	{		finish();	}		private void commitEdit()	{		String oldPassword = text1.getText().toString();		if( Tool.judgeTextInput( oldPassword.length(), 16, 6 ) == false )		{			showError( "密码在6-16位之间" );			return;		}		String newPassword1 = text2.getText().toString();		if( Tool.judgeTextInput( newPassword1.length(), 16, 6 ) == false )		{			showError( "密码在6-16位之间" );			return;		}		String newPassword2 = text3.getText().toString();		if( !newPassword1.equals( newPassword2 ) )		{			showError( "两次密码不一致" );			return;		}				startChange( oldPassword, newPassword1, newPassword2 );	}		private void startChange( final String oldPassword, final String newPassword1, final String newPassword2 )	{		if( Tool.isNetworkConnected( this ) == true )		{			dialog = new Dialog( this, R.style.dialog_progress );			LayoutInflater inflater = LayoutInflater.from( this );  			View view = inflater.inflate( R.layout.dialog_progress, null );			TextView textView = ( TextView ) view.findViewById( R.id.dialog_textview );			textView.setText( "正在修改" );						WindowManager.LayoutParams layoutParams = dialog.getWindow().getAttributes();			layoutParams.alpha = 0.8f;			dialog.getWindow().setAttributes( layoutParams );			dialog.setContentView( view );			dialog.setCancelable( false );			dialog.setOnKeyListener			(				new OnKeyListener()				{					public boolean onKey( DialogInterface dialog, int keyCode, KeyEvent event ) 					{						if( keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0 )						{							if( connection != null )							{								connection.disconnect();							}							dialog.dismiss();							return true;						}						return false;					}				}			);			dialog.show();						new Thread	    	(	    		new Thread()	    		{	    			public void run()	    			{	    				doChange( oldPassword, newPassword1, newPassword2 );	    			}	    		}	    	).start();		}		else		{			Toast.makeText( this, "网络不可用，请打开网络", Toast.LENGTH_SHORT ).show();		}	}		private void doChange( final String oldPassword, final String newPassword1, final String newPassword2 )	{		final String urlString = Information.Server_Url + "/api/user/changepwd";		try		{			HttpURLConnection.setFollowRedirects( false );						URL url = new URL( urlString );			connection = ( HttpURLConnection ) url.openConnection();  			connection.setRequestProperty( "Connection", "keep-alive" );			connection.setRequestProperty( "Content-Type", "application/json" );			connection.setRequestMethod( "PUT" );			connection.setConnectTimeout( 10000 );			connection.setReadTimeout( 30000 );			connection.setDoOutput( true );			connection.setDoInput( true );						JSONObject json = new JSONObject();			json.put( "token", Information.Token );			json.put( "oldpwd", oldPassword );			json.put( "newpwd", newPassword2 );						connection.getOutputStream().write( json.toString().getBytes() );						final int responseCode = connection.getResponseCode();			if( responseCode == 200 )			{				BufferedReader reader = new BufferedReader( new InputStreamReader( connection.getInputStream() ) );				String temp1 = null;				StringBuilder value = new StringBuilder();				while( ( temp1 = reader.readLine() ) != null )				{					value.append( temp1 );				}				JSONObject jsonObject = new JSONObject( value.toString() );				if( jsonObject.getInt( "result" ) == 1000 )				{					Information.Password = newPassword2;					handler.sendEmptyMessage( 0 );				}				else				{					handler.sendEmptyMessage( 1 );				}			}			else			{				handler.sendEmptyMessage( 2 );			}		}		catch( Exception ex )		{			handler.sendEmptyMessage( 2 );		}		finally		{			if( connection != null )			{				connection.disconnect();			}		}	}}