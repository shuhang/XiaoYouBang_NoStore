package com.pku.xiaoyoubang.view;import org.json.JSONObject;import android.annotation.SuppressLint;import android.app.Activity;import android.app.Dialog;import android.content.Intent;import android.content.SharedPreferences;import android.content.pm.PackageInfo;import android.content.pm.PackageManager;import android.content.pm.PackageManager.NameNotFoundException;import android.os.Bundle;import android.os.Handler;import android.os.Message;import android.support.v4.app.FragmentActivity;import android.support.v4.app.FragmentPagerAdapter;import android.support.v4.view.ViewPager;import android.support.v4.view.ViewPager.OnPageChangeListener;import android.view.KeyEvent;import android.view.LayoutInflater;import android.view.View;import android.view.View.OnClickListener;import android.view.Window;import android.widget.ImageButton;import android.widget.TextView;import com.pku.xiaoyoubang.R;import com.pku.xiaoyoubang.entity.QuestionEntity;import com.pku.xiaoyoubang.model.ViewPagerAdapter;import com.pku.xiaoyoubang.selfview.AllActFragment;import com.pku.xiaoyoubang.selfview.AllQuestionFragment;import com.pku.xiaoyoubang.tool.Information;import com.pku.xiaoyoubang.tool.MyApplication;import com.pku.xiaoyoubang.tool.Tool;import com.umeng.analytics.MobclickAgent;import com.umeng.update.UmengDialogButtonListener;import com.umeng.update.UmengUpdateAgent;import com.umeng.update.UmengUpdateListener;import com.umeng.update.UpdateResponse;import com.umeng.update.UpdateStatus;import com.viewpagerindicator.IconPagerAdapter;import com.viewpagerindicator.TabPageIndicator;@SuppressLint("HandlerLeak")public class TabActivity1 extends FragmentActivity{	/**	 *  	 */	private ImageButton buttonWrite;		private Dialog dialog;		private boolean force = false;	private boolean update = false;	/**	 *  	 */	private Handler handler;		private TabPageIndicator mIndicator ;	private ViewPager mViewPager ;	private FragmentPagerAdapter mAdapter ;		private int nowIndex = 0;		protected void onCreate( Bundle savedInstanceState )	{		super.onCreate( savedInstanceState );		requestWindowFeature( Window.FEATURE_NO_TITLE );		MyApplication.getInstance().addActivity( this );				if( Information.Type == 0 )		{			dialog = new Dialog( this, R.style.Transparent );			LayoutInflater inflater = LayoutInflater.from( this );  			View view = inflater.inflate( R.layout.start, null );			PackageManager pm = this.getPackageManager();  	        PackageInfo pi;			try 			{				pi = pm.getPackageInfo( this.getPackageName(), 0 );				TextView text = ( TextView ) view.findViewById( R.id.start_version );				text.setText( pi.versionName.replace( "F", "" )  );			}			catch (NameNotFoundException e) {} 						dialog.setContentView( view );			dialog.setCancelable( false );			dialog.show();						new Thread			(				new Thread()				{					public void run()					{						try						{							Thread.sleep( 4000 );						}						catch( Exception ex ) {}						handler.sendEmptyMessage( 8 );					}				}			).start();		}				showView();	}		private void showView()	{		setContentView( R.layout.tab_1 );				handler = new Handler()		{			public void handleMessage( Message message )			{								switch( message.what )				{				case 8 : 					if( dialog != null )					{						dialog.dismiss();					}					break;				case 9 :					showUpdateAt( 1 );					break;				}			}		};				initView();	}		private void initView()	{		buttonWrite = ( ImageButton ) findViewById( R.id.main_page_button_write );				buttonWrite.setOnClickListener		(			new OnClickListener()			{				public void onClick( View view )				{					if( Tool.isFastDoubleClick() )					{						return;					}					startWrite();				}			}		);				mIndicator = (TabPageIndicator) findViewById( R.id.id_indicator );		mViewPager = (ViewPager) findViewById( R.id.id_pager );		mAdapter = new ViewPagerAdapter( getSupportFragmentManager() );		mViewPager.setAdapter( mAdapter );		mIndicator.setViewPager( mViewPager, 0 );		mViewPager.setOffscreenPageLimit( 3 );				mIndicator.setOnPageChangeListener		(			new OnPageChangeListener()			{				public void onPageScrollStateChanged(int arg0)				{									}				public void onPageScrolled(int arg0, float arg1, int arg2) 				{									}				public void onPageSelected( int index ) 				{					nowIndex = index;					if( nowIndex == 1 )					{						removeUpdateAt( nowIndex );					}				}			}		);	}		private void doGetActUpdate()	{		try		{			final String urlString = Information.Server_Url + "/api/user/act/update?token=" + Information.Token;			SharedPreferences shared = getSharedPreferences( "whole2", Activity.MODE_PRIVATE );			JSONObject json = new JSONObject();			json.put( "updateTime", shared.getString( "all_act_time", "" ) );			JSONObject result = Tool.doPostWithUrl( urlString, json );			if( result != null )			{				if( result.getInt( "result" ) == 4000 )				{					SharedPreferences.Editor editor = shared.edit();					editor.putString( "all_act_time", result.getString( "updateTime" ) );					editor.commit();					int change = result.getInt( "changes" );					if( change > 0 )					{						handler.sendEmptyMessage( 9 );					}				}			}		}		catch( Exception ex ) {}	}		private void showUpdateAt( int index )	{		IconPagerAdapter iconAdapter = (IconPagerAdapter) mViewPager.getAdapter();		iconAdapter.setIconResId( index, R.drawable.point );		mIndicator.notifyDataSetChanged();	}		private void removeUpdateAt( int index )	{		IconPagerAdapter iconAdapter = ( IconPagerAdapter ) mViewPager.getAdapter();		iconAdapter.setIconResId( index, 0 );		mIndicator.notifyDataSetChanged();	}	private void startWrite()	{		Intent intent = new Intent( this, AddQuestionActivity.class );		if( nowIndex == 0 )		{			intent.putExtra( "type", 0 );		}		else		{			intent.putExtra( "type", 1 );		}		startActivityForResult(  intent, 1000 );	}	public void onResume() 	{		super.onResume();		MobclickAgent.onResume( this );				new Thread		(			new Thread()			{				public void run()				{					doGetActUpdate();				}			}		).start();				if( !update )		{			UmengUpdateAgent.setUpdateAutoPopup( false );			UmengUpdateAgent.setUpdateListener 			(				new UmengUpdateListener() 				{				    public void onUpdateReturned( int updateStatus, UpdateResponse updateInfo ) 				    {				        switch( updateStatus ) 				        {				        case UpdateStatus.Yes:				        	SharedPreferences shared = getSharedPreferences( "whole2", Activity.MODE_PRIVATE );				        	if( shared.getBoolean( "force_update", true ) == true )				        	{				        		if( updateInfo.version.indexOf( "F" ) != -1 )					        	{					        		force = true;					        	}				        		update = true;					            UmengUpdateAgent.showUpdateDialog( TabActivity1.this, updateInfo );				        	}				            break;				        }				    }				}			);			UmengUpdateAgent.update( this );			UmengUpdateAgent.setDialogListener			(				new UmengDialogButtonListener() 				{				    public void onClick( int status ) 				    {				        switch( status ) 				        {				        case UpdateStatus.Update:     				        	update = true;				            break;				        case UpdateStatus.NotNow:				            if( force == true )				            {				            	MyApplication.getInstance().logout();				            }				            else				            {				            	SharedPreferences shared = getSharedPreferences( "whole2", Activity.MODE_PRIVATE );				        		SharedPreferences.Editor editor = shared.edit();				        		editor.putBoolean( "force_update", false );				        		editor.commit();				            }				            break;				        }				    }				}			);		}	}		public void onPause()	{		super.onPause();		MobclickAgent.onPause( this );	}		public boolean onKeyDown( int keyCode, KeyEvent event )	{		if( keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0 )		{			Intent intent = new Intent( Intent.ACTION_MAIN );  			intent.setFlags( Intent.FLAG_ACTIVITY_NEW_TASK );  			intent.addCategory( Intent.CATEGORY_HOME );			startActivity( intent );  			return true;		}		return false;	}		public void onActivityResult( int requestCode, int resultCode, Intent data ) 	{		super.onActivityResult( requestCode, resultCode, data );		if( resultCode == 2 )		{			QuestionEntity entity = ( QuestionEntity ) data.getSerializableExtra( "question" );			if( nowIndex == 0 )			{				AllQuestionFragment fragment = ( AllQuestionFragment ) mAdapter.getItem( 0 );				fragment.addNewQuestion( entity );			}			else			{				AllActFragment fragment = ( AllActFragment ) mAdapter.getItem( 1 );				fragment.addNewAct( entity );			}		}	}}