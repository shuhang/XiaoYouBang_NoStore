package com.pku.xiaoyoubang.view;import java.io.BufferedReader;import java.io.InputStreamReader;import java.net.HttpURLConnection;import java.net.URL;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import org.json.JSONArray;import org.json.JSONObject;import android.annotation.SuppressLint;import android.app.Activity;import android.content.Intent;import android.content.SharedPreferences;import android.os.Bundle;import android.os.Handler;import android.os.Message;import android.util.Log;import android.view.KeyEvent;import android.view.View;import android.view.Window;import android.widget.AdapterView;import android.widget.AdapterView.OnItemClickListener;import android.widget.Toast;import com.pku.xiaoyoubang.R;import com.pku.xiaoyoubang.entity.UserEntity;import com.pku.xiaoyoubang.model.FriendListAdapter;import com.pku.xiaoyoubang.selfview.XListView;import com.pku.xiaoyoubang.selfview.XListView.IXListViewListener;import com.pku.xiaoyoubang.tool.Information;import com.pku.xiaoyoubang.tool.MyApplication;import com.pku.xiaoyoubang.tool.MyDatabaseHelper;import com.pku.xiaoyoubang.tool.Tool;import com.umeng.analytics.MobclickAgent;@SuppressLint("HandlerLeak")public class TabActivity3 extends Activity implements IXListViewListener{	private XListView friendListView;	private FriendListAdapter adapter;		private Handler handler;		private HttpURLConnection connection = null;		private boolean isChanged = false;		private HashMap< String, Boolean > map = new HashMap< String, Boolean >();		protected void onCreate( Bundle savedInstanceState )	{		super.onCreate( savedInstanceState );		requestWindowFeature( Window.FEATURE_NO_TITLE );		MyApplication.getInstance().addActivity( this );				handler = new Handler()		{			@SuppressWarnings("unchecked")			public void handleMessage( Message message )			{				friendListView.stopRefresh();				friendListView.updateHeaderHeight( -120 );				switch( message.what )				{				case 0 : //					addNewFriend( ( ArrayList< UserEntity > ) ( message.obj ) );					break;				case 1 : //					showError( "加载失败" );					break;				case 2 : //No net - refresh					showError( "网络不可用，请打开网络" );					break;				}			}		};				initView();				loadFriendList();				Information.IsFirst = false;	}		private void initView()	{		setContentView( R.layout.tab_3 );				friendListView = ( XListView ) findViewById( R.id.tab_3_list );		friendListView.setPullLoadEnable( false );		friendListView.setXListViewListener( this );		adapter = new FriendListAdapter( this, MyDatabaseHelper.getInstance( this ).getFriendList() );		friendListView.setAdapter( adapter );				friendListView.setOnItemClickListener		(			new OnItemClickListener()			{				public void onItemClick( AdapterView<?> parent, View view, int position, long id )				{					showUserAtIndex( position - 1 );				}			}		);				SharedPreferences shared = getSharedPreferences( "whole2", Activity.MODE_PRIVATE );		friendListView.setRefreshTime( shared.getString( "friend_update_time", "" ) );	}		private void addNewFriend( ArrayList< UserEntity > list )	{		SharedPreferences shared = getSharedPreferences( "whole2", Activity.MODE_PRIVATE );		friendListView.setRefreshTime( shared.getString( "friend_update_time", "" ) );		if( isChanged )		{			final int count1 = list.size();			for( int i = 0; i < count1; i ++ )			{				map.put( list.get( i ).getId(), true );			}						List< UserEntity > tempList = new ArrayList< UserEntity >( adapter.getList() );			final int count = tempList.size();			for( int i = count - 1; i >= 0; i -- )			{				if( map.containsKey( tempList.get( i ).getId() ) )				{					tempList.remove( i );				}			}						tempList.addAll( 0, list );			adapter = new FriendListAdapter( this, tempList );			friendListView.setAdapter( adapter );			adapter.notifyDataSetChanged();						isChanged = false;			map.clear();		}	}		private void showError( String text )	{		Toast.makeText( this, text, Toast.LENGTH_SHORT ).show();	}		private void loadFriendList()	{		friendListView.updateHeaderHeight( 120 );		friendListView.startRefresh();	}		private void doLoadFriendList()	{		SharedPreferences shared = getSharedPreferences( "whole2", Activity.MODE_PRIVATE );		String updateTime = shared.getString( "friend_update_time", "" );		Log.e( "test", "start:" + updateTime );		final String urlString = Information.Server_Url + "/api/users";		try		{			URL url = new URL( urlString );			connection = ( HttpURLConnection ) url.openConnection();  			connection.setRequestProperty( "Connection", "keep-alive" );			connection.setRequestProperty( "Content-Type", "application/json" );			connection.setRequestMethod( "POST" );			connection.setConnectTimeout( 10000 );			connection.setReadTimeout( 30000 );			connection.setDoOutput( true );			connection.setDoInput( true );						JSONObject json = new JSONObject();			json.put( "token", Information.Token );			json.put( "after", updateTime );			connection.getOutputStream().write( json.toString().getBytes() );			final int responseCode = connection.getResponseCode();			if( responseCode == 200 )			{				BufferedReader reader = new BufferedReader( new InputStreamReader( connection.getInputStream() ) );				String temp1 = null;				StringBuilder value = new StringBuilder();				while( ( temp1 = reader.readLine() ) != null )				{					value.append( temp1 );				}				JSONObject jsonObject1 = new JSONObject( value.toString() );				if( jsonObject1.getInt( "result" ) == 8000 )				{					updateTime = jsonObject1.getString( "updateTime" );					SharedPreferences.Editor editor = shared.edit();					editor.putString( "friend_update_time", updateTime );					editor.commit();					Log.e( "test", "end:" + updateTime );					JSONArray array = jsonObject1.getJSONArray( "data" );					int count = array.length();					if( count > 0 )					{						Log.e( "test", "aaa" );						isChanged = true;					}					List< UserEntity > list = new ArrayList< UserEntity >( count );					for( int i = 0; i < count; i ++ )					{						JSONObject jsonObject = array.getJSONObject( i );						UserEntity user = new UserEntity();												user.setId( jsonObject.getString( "id" ) );						user.setName( jsonObject.getString( "name" ) );						user.setHeadUrl( jsonObject.getString( "headUrl" ) );						user.setSex( jsonObject.getInt( "sex" ) );						user.setBirthday( jsonObject.getString( "birthyear" ) );						user.setPku( jsonObject.getString( "pku" ) );						user.setNowHome( jsonObject.getString( "base" ) );						user.setOldHome( jsonObject.getString( "hometown" ) );						user.setQq( jsonObject.getString( "qq" ) );						user.setJob1( jsonObject.getString( "company" ) );						user.setJob2( jsonObject.getString( "department" ) );						user.setJob3( jsonObject.getString( "job" ) );						user.setVersion( jsonObject.getInt( "version" ) );						user.setPraiseCount( jsonObject.getInt( "praisedCount" ) );						user.setAnswerCount( jsonObject.getInt( "answerCount" ) );						user.setQuestionCount( jsonObject.getInt( "questionCount" ) );						String[] temp = new String[]{ "", "", "", "", "" };						JSONArray tags = jsonObject.getJSONArray( "tags" );						final int count1 = tags.length();						for( int j = 0; j < count1; j ++ )						{							temp[ j ] = tags.getString( j );						}						user.setTag( temp );												MyDatabaseHelper.getInstance( this ).insertFriend( user );												list.add( user );					}										Message message = new Message();					message.what = 0;					message.obj = list;					handler.sendMessage( message );				}				else				{					handler.sendEmptyMessage( 1 );				}			}			else			{				handler.sendEmptyMessage( 1 );			}		}		catch( Exception ex )		{			ex.printStackTrace();			handler.sendEmptyMessage( 3 );		}		finally		{			if( connection != null )			{				connection.disconnect();			}		}	}		private void showUserAtIndex( int position )	{		Intent intent = new Intent( this, UserInfoActivity.class );		Bundle bundle = new Bundle();				bundle.putInt( "type", 1 );		bundle.putSerializable( "user", adapter.getList().get( position ) );				intent.putExtras( bundle );		startActivity( intent );	}		public void onResume() 	{		super.onResume();		MobclickAgent.onResume( this );				if( !Information.IsFirst && Information.IsMeChanged )		{			List< UserEntity > tempList = new ArrayList< UserEntity >( adapter.getList() );			final int count = tempList.size();			for( int i = count - 1; i >= 0; i -- )			{				if( tempList.get( i ).getId().equals( Information.Id ) )				{					tempList.remove( i );					tempList.add( MyDatabaseHelper.getInstance( this ).getUser( Information.Id ) );					break;				}			}						adapter = new FriendListAdapter( this, tempList );			friendListView.setAdapter( adapter );			adapter.notifyDataSetChanged();						Information.IsMeChanged = false;		}	}		public void onPause()	{		super.onPause();		MobclickAgent.onPause( this );	}		public boolean onKeyDown( int keyCode, KeyEvent event )	{		if( keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0 )		{			Intent intent= new Intent( Intent.ACTION_MAIN );  			intent.setFlags( Intent.FLAG_ACTIVITY_NEW_TASK );  			intent.addCategory( Intent.CATEGORY_HOME );			startActivity( intent );  			return true;		}		return false;	}		protected void onActivityResult( int requestCode, int resultCode, Intent data ) 	{		super.onActivityResult( requestCode, resultCode, data );		adapter.notifyDataSetChanged();	}	public void onRefresh() 	{		if( Tool.isNetworkConnected( this ) == true )		{			new Thread			(				new Thread()				{					public void run()					{						doLoadFriendList();					}				}			).start();		}		else		{			handler.sendEmptyMessage( 2 );		}	}	public void onLoadMore() {}}