package com.pku.xiaoyoubang.view;import java.io.BufferedReader;import java.io.InputStreamReader;import java.net.HttpURLConnection;import java.net.URL;import org.json.JSONArray;import org.json.JSONObject;import android.annotation.SuppressLint;import android.app.Activity;import android.content.Intent;import android.os.Bundle;import android.os.Handler;import android.os.Message;import android.view.View;import android.view.View.OnClickListener;import android.view.Window;import android.widget.Button;import android.widget.ImageView;import android.widget.RelativeLayout;import android.widget.TextView;import com.pku.xiaoyoubang.R;import com.pku.xiaoyoubang.entity.UserEntity;import com.pku.xiaoyoubang.tool.ImageLoader;import com.pku.xiaoyoubang.tool.Information;import com.pku.xiaoyoubang.tool.MyApplication;import com.pku.xiaoyoubang.tool.MyDatabaseHelper;import com.umeng.analytics.MobclickAgent;@SuppressLint("HandlerLeak")public class UserInfoActivity extends Activity{	private Button buttonBack;		private ImageView headImage;	private TextView textName;	private TextView textPraise;	private TextView textSex;	private TextView textBirthday;	private TextView textPku;	private TextView textJob;	private TextView textQQ;	private TextView textHome;	private TextView textTag;	private TextView textAnswerMe;	private TextView textMyAnswer;	private TextView textSymbol;	private ImageView inviteUser;	private TextView textInvite;	private TextView textQuestionCount;	private TextView textAnswerCount;		private RelativeLayout layout1;	private RelativeLayout layout2;	private RelativeLayout layout3;		private UserEntity entity;	private int type = 0;		private ImageLoader imageLoader;		private HttpURLConnection connection = null;		private Handler handler;		protected void onCreate( Bundle savedInstanceState )	{		super.onCreate( savedInstanceState );		requestWindowFeature( Window.FEATURE_NO_TITLE );		MyApplication.getInstance().addActivity( this );				handler = new Handler()		{			public void handleMessage( Message message )			{				switch( message.what )				{				case 0 : //refresh success					MyDatabaseHelper.getInstance( UserInfoActivity.this ).insertFriend( entity );					update();					break;				}			}		};				entity = ( UserEntity ) getIntent().getExtras().getSerializable( "user" );		type = getIntent().getExtras().getInt( "type", 0 );		imageLoader = new ImageLoader( this );				initView();				if( type == 1 )		{			startLoad();		}		else		{			MyDatabaseHelper.getInstance( this ).insertFriend( entity );		}	}		private void initView()	{		setContentView( R.layout.friend_info );				buttonBack = ( Button ) findViewById( R.id.friend_info_button_back );		buttonBack.setText( "<  " );		buttonBack.setOnClickListener		(			new OnClickListener()			{				public void onClick( View view )				{					back();				}			}		);				headImage = ( ImageView ) findViewById( R.id.friend_info_head );		inviteUser = ( ImageView ) findViewById( R.id.friend_info_layout1_head );		inviteUser.setVisibility( View.INVISIBLE );		textName = ( TextView ) findViewById( R.id.friend_info_name );		textName.setText( entity.getName() );				textPraise = ( TextView ) findViewById( R.id.friend_info_praise_count );		textSex = ( TextView ) findViewById( R.id.friend_info_sex );		if( entity.getSex() == 1 )			textSex.setText( "男" );		else			textSex.setText( "女" );				textBirthday = ( TextView ) findViewById( R.id.friend_info_birthday );		textBirthday.setText( entity.getBirthday() + "年生人" );				textPku = ( TextView ) findViewById( R.id.friend_info_pku );		textPku.setText( entity.getPku() );				textJob = ( TextView ) findViewById( R.id.friend_info_job );		textJob.setText( entity.getJob1() + "  " + entity.getJob2() + "  " + entity.getJob3() );				textHome = ( TextView ) findViewById( R.id.friend_info_home );		textHome.setText( entity.getOldHome() + "  现居" + entity.getNowHome() );				textQQ = ( TextView ) findViewById( R.id.friend_info_qq );		textQQ.setText( "QQ  " + entity.getQq() );				textTag = ( TextView ) findViewById( R.id.friend_info_tag  );			textAnswerMe = ( TextView ) findViewById( R.id.friend_info_other_answer_me );				textMyAnswer = ( TextView ) findViewById( R.id.friend_info_me_answer_other );				textSymbol = ( TextView ) findViewById( R.id.friend_info_layout1_symbol );		textInvite = ( TextView ) findViewById( R.id.friend_info_layout1_name );		textSymbol.setText( "注册邀请人" );		textInvite.setText( "元老" );				textQuestionCount = ( TextView ) findViewById( R.id.friend_info_question_count );				textAnswerCount = ( TextView ) findViewById( R.id.friend_info_answer_count );				layout1 = ( RelativeLayout ) findViewById( R.id.friend_info_layout1 );		layout1.setOnClickListener		(			new OnClickListener()			{				public void onClick( View view )				{					showRegister();				}			}		);				layout2 = ( RelativeLayout ) findViewById( R.id.friend_info_layout2 );		layout2.setOnClickListener		(			new OnClickListener()			{				public void onClick( View view )				{					showUserQuestion( true );				}			}		);				layout3 = ( RelativeLayout ) findViewById( R.id.friend_info_layout3 );		layout3.setOnClickListener		(			new OnClickListener()			{				public void onClick( View view )				{					showUserQuestion( false );				}			}		);				update();	}		private void update()	{		headImage.setTag( entity.getHeadUrl() );		imageLoader.showImage( entity.getHeadUrl(), headImage, true );				textPraise.setText( "获赞 "  + entity.getPraiseCount() );				String tag = "";		for( int i = 0; i < entity.getTags().length; i ++ )		{			if( !entity.getTags()[ i ].equals( "" ) )			{				tag += "[" + entity.getTags()[ i ] + "]  ";			}		}		textTag.setText( tag );				textJob.setText( entity.getJob1() + "  " + entity.getJob2() + "  " + entity.getJob3() );		textHome.setText( entity.getOldHome() + "  现居" + entity.getNowHome() );		textQQ.setText( "QQ  " + entity.getQq() );				textAnswerMe.setText( "他答过我 " + entity.getAnswerMe() );		textMyAnswer.setText( "我答过他 " + entity.getMeAnswer() );				textQuestionCount.setText( entity.getQuestionCount() + " >" );		textAnswerCount.setText( entity.getAnswerCount() + " >" );	}		private void startLoad()	{		new Thread		(			new Thread()			{				public void run()				{					doLoadInformation();				}			}		).start();	}		private void doLoadInformation()	{		final String urlString = Information.Server_Url + "/api/user/" + entity.getId() + "?token=" + Information.Token;		try		{			URL url = new URL( urlString );			connection = ( HttpURLConnection ) url.openConnection();  			connection.setRequestProperty( "Connection", "keep-alive" );			connection.setRequestMethod( "GET" );			connection.setConnectTimeout( 10000 );			connection.setReadTimeout( 30000 );			connection.connect();			final int responseCode = connection.getResponseCode();			if( responseCode == 200 )			{				BufferedReader reader = new BufferedReader( new InputStreamReader( connection.getInputStream() ) );				String temp1 = null;				StringBuilder value = new StringBuilder();				while( ( temp1 = reader.readLine() ) != null )				{					value.append( temp1 );				}				JSONObject jsonObject = new JSONObject( value.toString() );				entity.setHeadUrl( jsonObject.getString( "headUrl" ) );				entity.setNowHome( jsonObject.getString( "base" ) );				entity.setOldHome( jsonObject.getString( "hometown" ) );				entity.setQq( jsonObject.getString( "qq" ) );				entity.setJob1( jsonObject.getString( "company" ) );				entity.setJob2( jsonObject.getString( "department" ) );				entity.setJob3( jsonObject.getString( "job" ) );				entity.setVersion( jsonObject.getInt( "version" ) );				entity.setPraiseCount( jsonObject.getInt( "praisedCount" ) );				entity.setAnswerCount( jsonObject.getInt( "answerCount" ) );				entity.setQuestionCount( jsonObject.getInt( "questionCount" ) );				String[] temp = new String[]{ "", "", "", "", "" };				JSONArray tags = jsonObject.getJSONArray( "tags" );				final int count = tags.length();				for( int i = 0; i < count; i ++ )				{					temp[ i ] = tags.getString( i );				}				entity.setTag( temp );				entity.setAnswerMe( jsonObject.getInt( "answerMeCount" ) );				entity.setMeAnswer( jsonObject.getInt( "myAnswerCount" ) );								handler.sendEmptyMessage( 0 );			}		}		catch( Exception ex )		{			ex.printStackTrace();		}		finally		{			if( connection != null )			{				connection.disconnect();			}		}	}		private void showUserQuestion( boolean isQuestion )	{		Intent intent = new Intent( this, QuestionListActivity.class );		if( isQuestion )		{			intent.putExtra( "type", 1 );			intent.putExtra( "count", entity.getQuestionCount() );		}		else		{			intent.putExtra( "type", 2 );			intent.putExtra( "count", entity.getAnswerCount() );		}		intent.putExtra( "name", entity.getName() );		intent.putExtra( "id", entity.getId() );				startActivity( intent );	}		private void back()	{		finish();	}		private void showRegister()	{			}		public void onResume() 	{		super.onResume();		MobclickAgent.onResume( this );	}		public void onPause()	{		super.onPause();		MobclickAgent.onPause( this );	}}