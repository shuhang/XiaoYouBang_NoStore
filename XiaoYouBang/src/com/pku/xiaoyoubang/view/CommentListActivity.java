package com.pku.xiaoyoubang.view;import java.net.HttpURLConnection;import java.util.ArrayList;import java.util.List;import org.json.JSONArray;import org.json.JSONObject;import android.annotation.SuppressLint;import android.app.Activity;import android.app.Dialog;import android.content.Context;import android.content.DialogInterface;import android.content.DialogInterface.OnKeyListener;import android.content.Intent;import android.graphics.drawable.BitmapDrawable;import android.os.Bundle;import android.os.Handler;import android.os.Message;import android.text.ClipboardManager;import android.view.KeyEvent;import android.view.LayoutInflater;import android.view.View;import android.view.View.OnClickListener;import android.view.ViewGroup.LayoutParams;import android.view.Window;import android.view.WindowManager;import android.widget.AdapterView;import android.widget.AdapterView.OnItemClickListener;import android.widget.Button;import android.widget.PopupWindow;import android.widget.RelativeLayout;import android.widget.TextView;import android.widget.Toast;import com.pku.xiaoyoubang.R;import com.pku.xiaoyoubang.entity.CommentEntity;import com.pku.xiaoyoubang.entity.QuestionEntity;import com.pku.xiaoyoubang.entity.UserEntity;import com.pku.xiaoyoubang.model.CommentListAdapter;import com.pku.xiaoyoubang.model.CommentListAdapter.CommentListener;import com.pku.xiaoyoubang.selfview.XListView;import com.pku.xiaoyoubang.selfview.XListView.IXListViewListener;import com.pku.xiaoyoubang.tool.Information;import com.pku.xiaoyoubang.tool.MyApplication;import com.pku.xiaoyoubang.tool.MyDatabaseHelper;import com.pku.xiaoyoubang.tool.Tool;import com.umeng.analytics.MobclickAgent;@SuppressWarnings("deprecation")@SuppressLint("HandlerLeak")public class CommentListActivity extends Activity implements IXListViewListener, CommentListener{	private Button buttonBack;	private TextView textComment;	private TextView textQuestion;	private TextView textTitle;	private Button buttonComment;	private Button buttonCare;	private Button buttonAct;	private XListView commentListView;	private CommentListAdapter adapter;	private RelativeLayout layout;		private Dialog dialog;		private HttpURLConnection connection = null;		private String questionId;	private String questionTitle;	private int commentClickIndex;		private int scrollPosition = 0;	private int scrollTop = 0;		private String commentTime;	private String commentId;	private String commentInfo;		private PopupWindow pop;		/**	 *  0 : from question info comment 	 *  1 : from message comment	 *  2 : from act info comment	 *  3 : from message act	 */	private int type;		private Handler handler;		private List< CommentEntity > commentList = new ArrayList< CommentEntity >();		protected void onCreate( Bundle savedInstanceState )	{		super.onCreate( savedInstanceState );		requestWindowFeature( Window.FEATURE_NO_TITLE );		MyApplication.getInstance().addActivity( this );				type = getIntent().getIntExtra( "type", 0 );		questionTitle = getIntent().getStringExtra( "questionTitle" );		if( type == 0 )		{			commentList = QuestionInfoActivity.entity.getCommentList();			questionId = QuestionInfoActivity.entity.getId();		}		else if( type == 1 )		{			questionId = getIntent().getStringExtra( "questionId" );		}		else if( type == 2 )		{			commentList = QuestionInfoActivity.entity.getActList();			questionId = QuestionInfoActivity.entity.getId();		}		else if( type == 3 )		{			questionId = getIntent().getStringExtra( "questionId" );		}				handler = new Handler()		{			@SuppressWarnings("unchecked")			public void handleMessage( Message message )			{				switch( message.what )				{				case 0 : //Load answer list success					refreshSuccess( ( ArrayList< CommentEntity > ) message.obj );										commentListView.stopRefresh();					commentListView.updateHeaderHeight( -120 );					commentListView.setRefreshTime( Tool.getShowTime( Tool.getNowTime() ) );					break;				case 1 : //get list failed					showError( "加载失败" );					commentListView.stopRefresh();					commentListView.updateHeaderHeight( -120 );					commentListView.setPullLoadEnable( true );					break;				case 2 : //load info success					if( dialog != null )					{						dialog.dismiss();					}									try 					{						QuestionEntity questionEntity = new QuestionEntity();						Tool.loadQuestionInfoEntity( questionEntity, ( JSONObject ) message.obj );						showToQuestionInfo( questionEntity );					}					catch( Exception ex ) 					{						ex.printStackTrace();					}					break;				case 3 : //get info failed					if( dialog != null )					{						dialog.dismiss();					}					showError( "加载失败" );					break;				case 4 : //No net - refresh					commentListView.stopRefresh();					commentListView.updateHeaderHeight( -120 );					commentListView.setPullLoadEnable( true );					showError( "网络不可用，请打开网络" );					break;				case 6 : //get user success					if( dialog != null )					{						dialog.dismiss();					}					showUser( ( UserEntity ) message.obj, 0 );					break;				case 7 : //get user failed					if( dialog != null )					{						dialog.dismiss();					}					showError( "获取用户资料失败" );					break;				case 8 : //add success					if( dialog != null )					{						dialog.dismiss();					}					addSuccess();					break;				case 9 : //add failed								if( dialog != null )					{						dialog.dismiss();					}					showError( "添加评论失败" );					break;				}			}		};				initView();	}		private void initView()	{		setContentView( R.layout.comment_list );				buttonBack = ( Button ) findViewById( R.id.comment_list_button_back );		buttonBack.setText( "<  " );		buttonBack.setOnClickListener		(			new OnClickListener()			{				public void onClick( View view )				{					if( Tool.isFastDoubleClick() )					{						return;					}					back();				}			}		);				textQuestion = ( TextView ) findViewById( R.id.comment_list_question1 );		if( type == 0 || type == 1 )		{			textQuestion.setText( "问题：" + questionTitle );		}		else		{			textQuestion.setText( "活动：" + questionTitle );		}		textQuestion.setOnClickListener		(			new OnClickListener()			{				public void onClick( View view )				{					if( Tool.isFastDoubleClick() )					{						return;					}					clickQuestion();				}			}		);				textComment = ( TextView ) findViewById( R.id.comment_list_comment_count1 );		if( type == 0 )		{			textComment.setText( "问题的评论 " + QuestionInfoActivity.entity.getCommentList().size() );		}		else if( type == 1 )		{			textComment.setText( "问题的评论 0" );		}		else if( type == 2 )		{			textComment.setText( "活动报名 " + QuestionInfoActivity.entity.getActList().size() );		}		else if( type == 3 )		{			textComment.setText( "活动报名 0" );		}				textTitle = ( TextView ) findViewById( R.id.comment_list_title );		if( type == 2 || type == 3 )		{			textTitle.setText( "活动报名" );		}				layout = ( RelativeLayout ) findViewById( R.id.comment_list_layout );				buttonComment = ( Button ) findViewById( R.id.comment_list_button_comment );		buttonComment.setOnClickListener		(			new OnClickListener()			{				public void onClick( View view )				{					if( Tool.isFastDoubleClick() )					{						return;					}					comment();				}			}		);				buttonCare = ( Button ) findViewById( R.id.comment_list_button_care );		buttonCare.setOnClickListener		(			new OnClickListener()			{				public void onClick( View view )				{					if( Tool.isFastDoubleClick() )					{						return;					}					showCare();				}			}		);				buttonAct = ( Button ) findViewById( R.id.comment_list_button_act );		if( type == 2 && QuestionInfoActivity.entity.isHasSigned() )		{			buttonAct.setText( "修改报名" );		}		buttonAct.setOnClickListener		(			new OnClickListener()			{				public void onClick( View view )				{					if( Tool.isFastDoubleClick() )					{						return;					}					act();				}			}		);				if( type == 0 || type == 1 )		{			buttonComment.setVisibility( View.VISIBLE );			buttonCare.setVisibility( View.VISIBLE );			buttonAct.setVisibility( View.GONE );		}		else if( type == 2 )		{			buttonComment.setVisibility( View.GONE );			buttonCare.setVisibility( View.GONE );			buttonAct.setVisibility( View.VISIBLE );		}		commentListView = ( XListView ) findViewById( R.id.comment_list_list );		commentListView.setPullLoadEnable( true );		commentListView.setXListViewListener( this );				commentListView.setOnItemClickListener		(			new OnItemClickListener()			{				public void onItemClick( AdapterView<?> parent, View view, int position, long id )				{					if( Tool.isFastDoubleClick() )					{						return;					}					if( position >= 1 && ( type == 0 || type == 1 ) )					{						clickCommentAtIndex( position - 1 );					}				}			}		);		if( type == 0 || type == 2 )		{			loadCommentList();		}		else		{			commentListView.updateHeaderHeight( 120 );			commentListView.startRefresh();		}	}		private void act()	{		if( QuestionInfoActivity.entity.isHasSigned() )		{			Intent intent = new Intent( this, AddCommentActivity.class );			intent.putExtra( "questionId", QuestionInfoActivity.entity.getId() );			for( CommentEntity temp : QuestionInfoActivity.entity.getActList() )			{				if( temp.getUserId().equals( Information.Id ) )				{					intent.putExtra( "myAct", temp );					break;				}			}			intent.putExtra( "type", 5 );			startActivityForResult( intent, 1010 );		}		else		{			Intent intent = new Intent( this, AddCommentActivity.class );			intent.putExtra( "questionId", QuestionInfoActivity.entity.getId() );			intent.putExtra( "type", 4 );			startActivityForResult( intent, 1010 );		}	}		private void showCare()	{        View view = LayoutInflater.from( this ).inflate( R.layout.care_pop_view, null );         // 创建PopupWindow对象         pop = new PopupWindow( view, LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT );        // 需要设置一下此参数，点击外边可消失         pop.setBackgroundDrawable( new BitmapDrawable() );         //设置点击窗口外边窗口消失         pop.setOutsideTouchable( true );         // 设置此参数获得焦点，否则无法点击         pop.setFocusable( true );         //pop.showAsDropDown( buttonCare );        int w = View.MeasureSpec.makeMeasureSpec(0,View.MeasureSpec.UNSPECIFIED);        int h = View.MeasureSpec.makeMeasureSpec(0,View.MeasureSpec.UNSPECIFIED);        view.measure(w, h);        int height = view.getMeasuredHeight();        pop.showAsDropDown( buttonCare, 0, -height - layout.getHeight() / 2 - buttonCare.getHeight() / 2 );                Button button1 = ( Button ) view.findViewById( R.id.care_pop_view_button_1 );        button1.setOnClickListener		(			new OnClickListener()			{				public void onClick( View view )				{					if( Tool.isFastDoubleClick() )					{						return;					}					if( pop != null )					{						pop.dismiss();					}					startAddComment( "沉思中，稍后作答" );				}			}		);        Button button2 = ( Button ) view.findViewById( R.id.care_pop_view_button_2 );        button2.setOnClickListener		(			new OnClickListener()			{				public void onClick( View view )				{					if( Tool.isFastDoubleClick() )					{						return;					}					if( pop != null )					{						pop.dismiss();					}					startAddComment( "帮你留意着" );				}			}		);        Button button3 = ( Button ) view.findViewById( R.id.care_pop_view_button_3 );        button3.setOnClickListener		(			new OnClickListener()			{				public void onClick( View view )				{					if( Tool.isFastDoubleClick() )					{						return;					}					if( pop != null )					{						pop.dismiss();					}					startAddComment( "爱莫能助的飘过" );				}			}		);	}		private void startAddComment( final String value )	{		if( Tool.isNetworkConnected( this ) == true )		{			dialog = new Dialog( this, R.style.dialog_progress );			LayoutInflater inflater = LayoutInflater.from( this );  			View view = inflater.inflate( R.layout.dialog_progress, null );			TextView textView = ( TextView ) view.findViewById( R.id.dialog_textview );			textView.setText( "正在添加评论" );						WindowManager.LayoutParams layoutParams = dialog.getWindow().getAttributes();			layoutParams.alpha = 0.8f;			dialog.getWindow().setAttributes( layoutParams );			dialog.setContentView( view );			dialog.setCancelable( false );			dialog.setOnKeyListener			(				new OnKeyListener()				{					public boolean onKey( DialogInterface dialog, int keyCode, KeyEvent event ) 					{						if( keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0 )						{							if( connection != null )							{								connection.disconnect();							}							dialog.dismiss();							return true;						}						return false;					}				}			);			dialog.show();						new Thread	    	(	    		new Thread()	    		{	    			public void run()	    			{	    				doAddToQuestion( value );	    			}	    		}	    	).start();		}		else		{			showError( "网络不可用，请打开网络" );		}	}		private void addSuccess()	{		CommentEntity entity = new CommentEntity();		entity.setId( commentId );		entity.setTime( commentTime );		entity.setCommentInfo( commentInfo );		entity.setUserHeadUrl( Information.HeadUrl );		entity.setUserId( Information.Id );		entity.setUserName( Information.Name );		entity.setQuestionId( questionId );		entity.setReplyId( "" );		entity.setReplyName( "" );				commentList.add( 0, entity );		List< CommentEntity > list = new ArrayList< CommentEntity >( adapter.getList() );		list.add( 0, entity );		adapter = new CommentListAdapter( this, list );		adapter.setMyListener( this );		commentListView.setAdapter( adapter );		adapter.notifyDataSetChanged();		textComment.setText( "问题的评论 " + commentList.size() );	}		private void doAddToQuestion( final String value )	{		try		{			final String urlString = Information.Server_Url + "/api/question/" + questionId + "/comment";						JSONObject json = new JSONObject();			json.put( "token", Information.Token );			json.put( "content", value );			JSONObject result = Tool.doPostWithUrl( urlString, json );			if( result == null )			{				handler.sendEmptyMessage( 9 );			}			else			{				if( result.getInt( "result" ) == 3000 )				{					commentTime = result.getString( "time" );					commentId = result.getString( "id" );					commentInfo = value;					handler.sendEmptyMessage( 8 );				}				else				{					handler.sendEmptyMessage( 9 );				}			}		}		catch( Exception ex )		{			handler.sendEmptyMessage( 9 );		}	}		private void loadCommentList()	{		int count = commentList.size();		if( count > 20 ) count = 20;		adapter = new CommentListAdapter( this, new ArrayList< CommentEntity >( commentList.subList( 0, count ) ) );		adapter.setMyListener( this );		commentListView.setAdapter( adapter );	}		private void showError( String text )	{		Toast.makeText( this, text, Toast.LENGTH_SHORT ).show();	}		private void clickQuestion()	{		if( type == 0 )		{			back();		}		else		{			if( Tool.isNetworkConnected( this ) == true )			{				dialog = new Dialog( this, R.style.dialog_progress );				LayoutInflater inflater = LayoutInflater.from( this );  				View view = inflater.inflate( R.layout.dialog_progress, null );				TextView textView = ( TextView ) view.findViewById( R.id.dialog_textview );				textView.setText( "正在加载问题详情" );								WindowManager.LayoutParams layoutParams = dialog.getWindow().getAttributes();				layoutParams.alpha = 0.8f;				dialog.getWindow().setAttributes( layoutParams );				dialog.setContentView( view );				dialog.setCancelable( false );				dialog.setOnKeyListener				(					new OnKeyListener()					{						public boolean onKey( DialogInterface dialog, int keyCode, KeyEvent event ) 						{							if( keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0 )							{								if( connection != null )								{									connection.disconnect();								}								dialog.dismiss();								return true;							}							return false;						}					}				);				dialog.show();								new Thread		    	(		    		new Thread()		    		{		    			public void run()		    			{		    				loadQuestionInfoFromNet();		    			}		    		}		    	).start();			}			else			{				Toast.makeText( this, "网络不可用，请打开网络", Toast.LENGTH_SHORT ).show();			}		}	}		/**	 *  Load question info from net	 */	private void loadQuestionInfoFromNet()	{		try		{			final String urlString = Information.Server_Url + "/api/question/" + questionId + "?token=" + Information.Token;			JSONObject result = Tool.doGetWithUrl( urlString );			if( result == null )			{				handler.sendEmptyMessage( 3 );			}			else			{				if( result.getInt( "result" ) == 3000 )				{					Message message = handler.obtainMessage();					message.what = 2;					message.obj = result;					handler.sendMessage( message );				}				else				{					handler.sendEmptyMessage( 3 );				}			}		}		catch( Exception ex )		{			handler.sendEmptyMessage( 3 );		}	}		private void back()	{		if( type == 0 )		{			QuestionInfoActivity.entity.setCommentList( commentList );		}		else if( type == 2 )		{			QuestionInfoActivity.entity.setActList( commentList );		}				setResult( 4 );		finish();	}		private void comment()	{		Intent intent = new Intent( this, AddCommentActivity.class );		intent.putExtra( "questionId", questionId );		intent.putExtra( "type", 0 );		startActivityForResult( intent, 1010 );	}		private void clickCommentAtIndex( int position )	{		commentClickIndex = position;				dialog = new Dialog( this, R.style.my_dialog );		LayoutInflater inflater = LayoutInflater.from( this );  		View view = inflater.inflate( R.layout.comment_pop_view, null );		Button buttonReply = ( Button ) view.findViewById( R.id.comment_pop_view_button_reply );		buttonReply.setOnClickListener		(			new OnClickListener()			{				public void onClick( View view )				{					if( Tool.isFastDoubleClick() )					{						return;					}					reply();				}							}		);		Button buttonCopy = ( Button ) view.findViewById( R.id.comment_pop_view_button_copy );		buttonCopy.setOnClickListener		(			new OnClickListener()			{				public void onClick( View view )				{					if( Tool.isFastDoubleClick() )					{						return;					}					copy();				}							}		);				WindowManager.LayoutParams layoutParams = dialog.getWindow().getAttributes();		layoutParams.alpha = 1.0f;		dialog.getWindow().setAttributes( layoutParams );		dialog.setContentView( view );		dialog.setCancelable( true );		dialog.show();	}		private void reply()	{		dialog.dismiss();				Intent intent = new Intent( this, AddCommentActivity.class );		intent.putExtra( "replyId", ( ( CommentEntity ) adapter.getItem( commentClickIndex ) ).getUserId() );		intent.putExtra( "name", ( ( CommentEntity ) adapter.getItem( commentClickIndex ) ).getUserName() );		intent.putExtra( "questionId", questionId );		intent.putExtra( "type", 2 );		startActivityForResult( intent, 1010 );	}		private void copy()	{		ClipboardManager manager =( ClipboardManager ) getSystemService( Context.CLIPBOARD_SERVICE );		manager.setText( ( ( CommentEntity )adapter.getItem( commentClickIndex ) ).getCommentInfo() );				dialog.dismiss();		Toast.makeText( this, "文字已复制", Toast.LENGTH_SHORT ).show();	}		public void onRefresh() 	{		if( Tool.isNetworkConnected( this ) == true )		{			new Thread			(				new Thread()				{					public void run()					{						refresh();					}				}			).start();		}		else		{			handler.sendEmptyMessage( 4 );		}	}		private void refresh()	{		try		{			final String urlString = Information.Server_Url + "/api/question/" + questionId + "/comments/update?token=" + Information.Token;						JSONObject json = new JSONObject();			json.put( "after", "2015-01-06 10:43:26 +08:00" );						JSONObject result = Tool.doPostWithUrl( urlString, json );			if( result == null )			{				handler.sendEmptyMessage( 1 );			}			else			{				if( result.getInt( "result" ) == 3000 )				{					JSONArray array = result.getJSONArray( "data" );					int count = array.length();					List< CommentEntity > list = new ArrayList< CommentEntity >( count );					for( int i = 0; i < count; i ++ )					{						JSONObject object = array.getJSONObject( i );						CommentEntity temp = new CommentEntity();						if( object.has( "commentType" ) )						{							temp.setType( object.getInt( "commentType" ) );						}						if( ( type == 0 || type == 1 ) && temp.getType() == 1 ) continue;						if( ( type == 2 || type == 3 ) && temp.getType() == 0 ) continue;						temp.setQuestionId( questionId );						temp.setCommentInfo( object.getString( "content" ) );						temp.setTime( object.getString( "time" ) );						if( object.has( "replyId" ) )						{							temp.setReplyId( object.getString( "replyId" ) );						}						if( object.has( "replyName" ) )						{							temp.setReplyName( object.getString( "replyName" ) );						}											temp.setUserHeadUrl( object.getString( "headUrl" ) );						temp.setUserId( object.getString( "userId" ) );						temp.setUserName( object.getString( "name" ) );						temp.setId( object.getString( "id" ) );												list.add( temp );					}					Message message = handler.obtainMessage();					message.what = 0;					message.obj = list;					handler.sendMessage( message );				}				else				{					handler.sendEmptyMessage( 1 );				}			}		}		catch( Exception ex )		{			handler.sendEmptyMessage( 1 );		}	}		private void refreshSuccess( ArrayList< CommentEntity > list )	{		commentList = list;		loadCommentList();		adapter.notifyDataSetChanged();		if( type == 0 || type == 1 )		{			textComment.setText( "问题的评论 " + list.size() );		}		else		{			textComment.setText( "活动报名 " + list.size() );		}	}	public void onLoadMore() 	{		scrollPosition = commentListView.getFirstVisiblePosition();		View v = commentListView.getChildAt( 0 );        scrollTop = ( v == null ) ? 0 : v.getTop();				int count = commentList.size() - adapter.getCount();		if( count > 0 )		{			if( count > 20 ) count = 20;			List< CommentEntity > list = new ArrayList< CommentEntity >( adapter.getList() );			list.addAll( new ArrayList< CommentEntity >( commentList.subList( adapter.getCount(), adapter.getCount() + count ) ) );			adapter = new CommentListAdapter( this, list );			adapter.setMyListener( this );			commentListView.setAdapter( adapter );			adapter.notifyDataSetChanged();		}		commentListView.stopLoadMore();				commentListView.setSelectionFromTop( scrollPosition, scrollTop );	}		public void getUser( final String id )	{		UserEntity user = null;		if( id.equals( Information.Id ) )		{			startActivity( new Intent( this, MyInfoActivity.class ) );			return;		}		else		{			user = MyDatabaseHelper.getInstance( this ).getFriend( id );		}		if( user == null )		{			if( Tool.isNetworkConnected( this ) == true )			{				dialog = new Dialog( this, R.style.dialog_progress );				LayoutInflater inflater = LayoutInflater.from( this );  				View view = inflater.inflate( R.layout.dialog_progress, null );				TextView textView = ( TextView ) view.findViewById( R.id.dialog_textview );				textView.setText( "正在获取用户资料" );								WindowManager.LayoutParams layoutParams = dialog.getWindow().getAttributes();				layoutParams.alpha = 0.8f;				dialog.getWindow().setAttributes( layoutParams );				dialog.setContentView( view );				dialog.setCancelable( false );				dialog.setOnKeyListener				(					new OnKeyListener()					{						public boolean onKey( DialogInterface dialog, int keyCode, KeyEvent event ) 						{							if( keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0 )							{								if( connection != null )								{									connection.disconnect();								}								dialog.dismiss();								return true;							}							return false;						}					}				);				dialog.show();								new Thread		    	(		    		new Thread()		    		{		    			public void run()		    			{		    				doLoadInformation( id );		    			}		    		}		    	).start();			}			else			{				Toast.makeText( this, "网络不可用，请打开网络", Toast.LENGTH_SHORT ).show();			}		}		else		{			showUser( user, 1 );		}	}		private void showToQuestionInfo( QuestionEntity questionEntity )	{		Intent intent = new Intent( this, QuestionInfoActivity.class );		intent.putExtra( "type", 3 );		intent.putExtra( "question", questionEntity );		startActivity( intent );	}		private void doLoadInformation( final String id )	{		try		{			final String urlString = Information.Server_Url + "/api/user/" + id + "?token=" + Information.Token;			JSONObject jsonObject = Tool.doGetWithUrl( urlString );			if( jsonObject == null )			{				handler.sendEmptyMessage( 7 );			}			else			{				UserEntity user = new UserEntity();				user.setId( id );				user.setName( jsonObject.getString( "name" ) );				user.setHeadUrl( jsonObject.getString( "headUrl" ) );				user.setSex( jsonObject.getInt( "sex" ) );				user.setBirthday( jsonObject.getString( "birthyear" ) );				user.setPku( jsonObject.getString( "pku" ) );				user.setNowHome( jsonObject.getString( "base" ) );				user.setOldHome( jsonObject.getString( "hometown" ) );				user.setQq( jsonObject.getString( "qq" ) );				user.setJob1( jsonObject.getString( "company" ) );				user.setJob2( jsonObject.getString( "department" ) );				user.setJob3( jsonObject.getString( "job" ) );				user.setVersion( jsonObject.getInt( "version" ) );				user.setPraiseCount( jsonObject.getInt( "praisedCount" ) );				user.setAnswerCount( jsonObject.getInt( "answerCount" ) );				user.setQuestionCount( jsonObject.getInt( "questionCount" ) );				user.setAnswerMe( jsonObject.getInt( "answerMeCount" ) );				user.setMeAnswer( jsonObject.getInt( "myAnswerCount" ) );				user.setIntro( jsonObject.getString( "intro" ) );				String[] temp = new String[]{ "", "", "", "", "" };				JSONArray tags = jsonObject.getJSONArray( "tags" );				final int count = tags.length();				for( int i = 0; i < count; i ++ )				{					temp[ i ] = tags.getString( i );				}				user.setTag( temp );				if( jsonObject.has( "invitedBy" ) )				{					user.setInviteName( jsonObject.getJSONObject( "invitedBy" ).getString( "name" ) );					user.setInviteHeadUrl( jsonObject.getJSONObject( "invitedBy" ).getString( "headUrl" ) );					user.setInviteUserId( jsonObject.getJSONObject( "invitedBy" ).getString( "id" ) );				}				else				{					user.setInviteName( "元老" );					user.setInviteHeadUrl( "" );					user.setInviteUserId( "" );				}								Message message = handler.obtainMessage();				message.what = 6;				message.obj = user;				handler.sendMessage( message );			}		}		catch( Exception ex )		{			handler.sendEmptyMessage( 7 );		}	}		private void showUser( UserEntity user, int type )	{		Intent intent = new Intent( this, UserInfoActivity.class );		Bundle bundle = new Bundle();		bundle.putInt( "type", type );		bundle.putSerializable( "user", user );		intent.putExtras( bundle );		startActivity( intent );	}		public void showCommentHead( int index ) 	{		getUser( adapter.getItem( index ).getUserId() );	}		protected void onActivityResult( int requestCode, int resultCode, Intent data ) 	{		super.onActivityResult( requestCode, resultCode, data );		if( resultCode == 3 )		{			CommentEntity commentEntity = ( CommentEntity ) data.getSerializableExtra( "comment" );			commentList.add( 0, commentEntity );			List< CommentEntity > list = new ArrayList< CommentEntity >( adapter.getList() );			list.add( 0, commentEntity );			adapter = new CommentListAdapter( this, list );			adapter.setMyListener( this );			commentListView.setAdapter( adapter );			adapter.notifyDataSetChanged();			if( type == 0 || type == 1 )			{				textComment.setText( "问题的评论 " + commentList.size() );			}			else			{				textComment.setText( "活动报名 " + commentList.size() );			}		}		else if( resultCode == 11 )		{			CommentEntity commentEntity = ( CommentEntity ) data.getSerializableExtra( "myAct" );			for( CommentEntity temp : QuestionInfoActivity.entity.getActList() )			{				if( temp.getUserId().equals( Information.Id ) )				{					temp.setCommentInfo( commentEntity.getCommentInfo() );					break;				}			}						final int count = adapter.getCount();			for( int i = 0; i < count; i ++ )			{				if( adapter.getItem( i ).getUserId().equals( Information.Id ) )				{					adapter.getItem( i ).setCommentInfo( commentEntity.getCommentInfo() );					adapter.notifyDataSetChanged();					break;				}			}		}	}		public boolean onKeyDown( int keyCode, KeyEvent event )	{		if( keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0 )		{			back();			return true;		}		return false;	}		public void onResume() 	{		super.onResume();		MobclickAgent.onResume( this );	}		public void onPause()	{		super.onPause();		MobclickAgent.onPause( this );	}}