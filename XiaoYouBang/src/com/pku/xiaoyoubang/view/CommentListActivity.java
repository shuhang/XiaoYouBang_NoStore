package com.pku.xiaoyoubang.view;import java.io.BufferedReader;import java.io.InputStreamReader;import java.net.HttpURLConnection;import java.net.URL;import java.util.ArrayList;import java.util.List;import org.json.JSONArray;import org.json.JSONObject;import android.annotation.SuppressLint;import android.app.Activity;import android.app.Dialog;import android.content.Context;import android.content.Intent;import android.os.Bundle;import android.os.Handler;import android.os.Message;import android.text.ClipboardManager;import android.view.KeyEvent;import android.view.LayoutInflater;import android.view.View;import android.view.View.OnClickListener;import android.view.Window;import android.view.WindowManager;import android.widget.AdapterView;import android.widget.AdapterView.OnItemClickListener;import android.widget.Button;import android.widget.TextView;import android.widget.Toast;import com.pku.xiaoyoubang.R;import com.pku.xiaoyoubang.entity.CommentEntity;import com.pku.xiaoyoubang.model.CommentListAdapter;import com.pku.xiaoyoubang.selfview.XListView;import com.pku.xiaoyoubang.selfview.XListView.IXListViewListener;import com.pku.xiaoyoubang.tool.Information;import com.pku.xiaoyoubang.tool.MyApplication;import com.pku.xiaoyoubang.tool.Tool;import com.umeng.analytics.MobclickAgent;@SuppressWarnings("deprecation")@SuppressLint("HandlerLeak")public class CommentListActivity extends Activity implements IXListViewListener{	private Button buttonBack;	private TextView textComment;	private Button buttonComment;	private XListView commentListView;	private CommentListAdapter adapter;		private Dialog dialog;		private HttpURLConnection connection = null;		private String questionId;	private int commentClickIndex;		private int scrollPosition = 0;	private int scrollTop = 0;		private Handler handler;		protected void onCreate( Bundle savedInstanceState )	{		super.onCreate( savedInstanceState );		requestWindowFeature( Window.FEATURE_NO_TITLE );		MyApplication.getInstance().addActivity( this );				handler = new Handler()		{			@SuppressWarnings("unchecked")			public void handleMessage( Message message )			{				switch( message.what )				{				case 0 : //Load answer list success					refreshSuccess( ( ArrayList< CommentEntity > ) message.obj );										commentListView.stopRefresh();					commentListView.setRefreshTime( Tool.getShowTime( Tool.getNowTime() ) );					break;				case 1 : //get list failed					showError( "加载失败" );					commentListView.stopRefresh();					commentListView.updateHeaderHeight( -120 );					commentListView.setPullLoadEnable( true );					break;				case 4 : //No net - refresh					commentListView.stopRefresh();					commentListView.updateHeaderHeight( -120 );					commentListView.setPullLoadEnable( true );					showError( "网络不可用，请打开网络" );					break;				}			}		};				questionId = QuestionInfoActivity.entity.getId();				initView();	}		private void initView()	{		setContentView( R.layout.comment_list );				buttonBack = ( Button ) findViewById( R.id.comment_list_button_back );		buttonBack.setText( "<  " );		buttonBack.setOnClickListener		(			new OnClickListener()			{				public void onClick( View view )				{					back();				}			}		);				textComment = ( TextView ) findViewById( R.id.comment_list_comment_count );		textComment.setText( "评论 " + QuestionInfoActivity.entity.getCommentList().size() );				buttonComment = ( Button ) findViewById( R.id.comment_list_button_comment );		buttonComment.setOnClickListener		(			new OnClickListener()			{				public void onClick( View view )				{					comment();				}			}		);				commentListView = ( XListView ) findViewById( R.id.comment_list_list );		commentListView.setPullLoadEnable( true );		commentListView.setXListViewListener( this );				commentListView.setOnItemClickListener		(			new OnItemClickListener()			{				public void onItemClick( AdapterView<?> parent, View view, int position, long id )				{					if( position >= 1 )					{						clickCommentAtIndex( position - 1 );					}				}			}		);				loadCommentList();	}		private void loadCommentList()	{		int count = QuestionInfoActivity.entity.getCommentList().size();		if( count > 20 ) count = 20;		adapter = new CommentListAdapter( this, new ArrayList< CommentEntity >( QuestionInfoActivity.entity.getCommentList().subList( 0, count ) ) );		commentListView.setAdapter( adapter );	}		private void showError( String text )	{		Toast.makeText( this, text, Toast.LENGTH_SHORT ).show();	}		private void back()	{		finish();	}		private void comment()	{		Intent intent = new Intent( this, AddCommentActivity.class );		intent.putExtra( "id", questionId );		intent.putExtra( "type", 0 );		startActivityForResult( intent, 1010 );	}		private void clickCommentAtIndex( int position )	{		commentClickIndex = position;				dialog = new Dialog( this, R.style.my_dialog );		LayoutInflater inflater = LayoutInflater.from( this );  		View view = inflater.inflate( R.layout.comment_pop_view, null );		Button buttonReply = ( Button ) view.findViewById( R.id.comment_pop_view_button_reply );		buttonReply.setOnClickListener		(			new OnClickListener()			{				public void onClick( View view )				{					reply();				}							}		);		Button buttonCopy = ( Button ) view.findViewById( R.id.comment_pop_view_button_copy );		buttonCopy.setOnClickListener		(			new OnClickListener()			{				public void onClick( View view )				{					copy();				}							}		);				WindowManager.LayoutParams layoutParams = dialog.getWindow().getAttributes();		layoutParams.alpha = 1.0f;		dialog.getWindow().setAttributes( layoutParams );		dialog.setContentView( view );		dialog.setCancelable( true );		dialog.show();	}		private void reply()	{		dialog.dismiss();				Intent intent = new Intent( this, AddCommentActivity.class );		intent.putExtra( "replyId", ( ( CommentEntity ) adapter.getItem( commentClickIndex ) ).getUserId() );		intent.putExtra( "name", ( ( CommentEntity )adapter.getItem( commentClickIndex ) ).getUserName() );		intent.putExtra( "type", 2 );		startActivityForResult( intent, 1010 );	}		private void copy()	{		ClipboardManager manager =( ClipboardManager ) getSystemService( Context.CLIPBOARD_SERVICE );		manager.setText( ( ( CommentEntity )adapter.getItem( commentClickIndex ) ).getCommentInfo() );				dialog.dismiss();		Toast.makeText( this, "文字已复制", Toast.LENGTH_SHORT ).show();	}		public void onRefresh() 	{		if( Tool.isNetworkConnected( this ) == true )		{			new Thread			(				new Thread()				{					public void run()					{						refresh();					}				}			).start();		}		else		{			handler.sendEmptyMessage( 4 );		}	}		private void refresh()	{		final String urlString = Information.Server_Url + "/api/question/" + QuestionInfoActivity.entity.getId() + "/comments/update?token=" + Information.Token;		try		{			URL url = new URL( urlString );			connection = ( HttpURLConnection ) url.openConnection();  			connection.setRequestProperty( "Connection", "keep-alive" );			connection.setRequestProperty( "Content-Type", "application/json" );			connection.setRequestMethod( "POST" );			connection.setConnectTimeout( 10000 );			connection.setReadTimeout( 30000 );			connection.setDoOutput( true );			connection.setDoInput( true );						JSONObject json = new JSONObject();			json.put( "after", "2015-01-06 10:43:26 +08:00" );			connection.getOutputStream().write( json.toString().getBytes() );			final int responseCode = connection.getResponseCode();			if( responseCode == 200 )			{				BufferedReader reader = new BufferedReader( new InputStreamReader( connection.getInputStream() ) );				String temp1 = null;				StringBuilder value = new StringBuilder();				while( ( temp1 = reader.readLine() ) != null )				{					value.append( temp1 );				}				JSONObject jsonObject = new JSONObject( value.toString() );				if( jsonObject.getInt( "result" ) == 3000 )				{					JSONArray array = jsonObject.getJSONArray( "data" );					int count = array.length();					List< CommentEntity > list = new ArrayList< CommentEntity >( count );					for( int i = 0; i < count; i ++ )					{						JSONObject object = array.getJSONObject( i );						CommentEntity temp = new CommentEntity();						temp.setQuestionId( QuestionInfoActivity.entity.getId() );						temp.setCommentInfo( object.getString( "content" ) );						temp.setTime( object.getString( "time" ) );						if( object.has( "replyId" ) )						{							temp.setReplyId( object.getString( "replyId" ) );						}						if( object.has( "replyName" ) )						{							temp.setReplyName( object.getString( "replyName" ) );						}						temp.setUserHeadUrl( object.getString( "headUrl" ) );						temp.setUserId( object.getString( "userId" ) );						temp.setUserName( object.getString( "name" ) );												list.add( temp );					}					Message message = handler.obtainMessage();					message.what = 0;					message.obj = list;					handler.sendMessage( message );				}				else				{					handler.sendEmptyMessage( 1 );				}			}			else			{				handler.sendEmptyMessage( 1 );			}		}		catch( Exception ex )		{			ex.printStackTrace();			handler.sendEmptyMessage( 1 );		}		finally		{			if( connection != null )			{				connection.disconnect();			}		}	}		private void refreshSuccess( ArrayList< CommentEntity > list )	{		QuestionInfoActivity.entity.setCommentList( list );		loadCommentList();		adapter.notifyDataSetChanged();		textComment.setText( "评论 " + list.size() );	}	public void onLoadMore() 	{		scrollPosition = commentListView.getFirstVisiblePosition();		View v = commentListView.getChildAt( 0 );        scrollTop = ( v == null ) ? 0 : v.getTop();				int count = QuestionInfoActivity.entity.getCommentList().size() - adapter.getCount();		if( count > 0 )		{			if( count > 20 ) count = 20;			List< CommentEntity > list = new ArrayList< CommentEntity >( adapter.getList() );			list.addAll( new ArrayList< CommentEntity >( QuestionInfoActivity.entity.getCommentList().subList( adapter.getCount(), adapter.getCount() + count ) ) );			adapter = new CommentListAdapter( this, list );			commentListView.setAdapter( adapter );			adapter.notifyDataSetChanged();		}		commentListView.stopLoadMore();				commentListView.setSelectionFromTop( scrollPosition, scrollTop );	}		protected void onActivityResult( int requestCode, int resultCode, Intent data ) 	{		super.onActivityResult( requestCode, resultCode, data );		if( resultCode == 3 )		{			CommentEntity commentEntity = ( CommentEntity ) data.getSerializableExtra( "comment" );			QuestionInfoActivity.entity.getCommentList().add( 0, commentEntity );			List< CommentEntity > list = new ArrayList< CommentEntity >( adapter.getList() );			list.add( 0, commentEntity );			adapter = new CommentListAdapter( this, list );			commentListView.setAdapter( adapter );			adapter.notifyDataSetChanged();			textComment.setText( "评论 " + QuestionInfoActivity.entity.getCommentList().size() );		}	}		public boolean onKeyDown( int keyCode, KeyEvent event )	{		if( keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0 )		{			setResult( 4 );			finish();			return true;		}		return false;	}		public void onResume() 	{		super.onResume();		MobclickAgent.onResume( this );	}		public void onPause()	{		super.onPause();		MobclickAgent.onPause( this );	}}