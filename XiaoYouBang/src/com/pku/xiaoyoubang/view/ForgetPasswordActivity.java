package com.pku.xiaoyoubang.view;import java.io.BufferedReader;import java.io.InputStreamReader;import java.net.HttpURLConnection;import java.net.URL;import org.json.JSONObject;import android.annotation.SuppressLint;import android.app.Activity;import android.app.Dialog;import android.content.DialogInterface;import android.content.DialogInterface.OnKeyListener;import android.os.Bundle;import android.os.Handler;import android.os.Message;import android.view.KeyEvent;import android.view.LayoutInflater;import android.view.View;import android.view.WindowManager;import android.view.View.OnClickListener;import android.view.Window;import android.widget.Button;import android.widget.EditText;import android.widget.TextView;import android.widget.Toast;import com.pku.xiaoyoubang.R;import com.pku.xiaoyoubang.tool.Information;import com.pku.xiaoyoubang.tool.MyApplication;import com.pku.xiaoyoubang.tool.Tool;@SuppressLint("HandlerLeak")public class ForgetPasswordActivity extends Activity{	/**	 *  View1	 */	private EditText textName;	private EditText textPhone;	private EditText textCode;	private Button buttonSendCode;	private Button buttonFinish1;	private Button buttonBack1;	/**	 *  View2	 */	private EditText textPassword1;	private EditText textPassword2;	private Button buttonFinish2;	private Button buttonBack2;		private Dialog dialog;	private HttpURLConnection connection = null;		private Handler handler;		protected void onCreate( Bundle savedInstanceState )	{		super.onCreate( savedInstanceState );		requestWindowFeature( Window.FEATURE_NO_TITLE );		MyApplication.getInstance().addActivity( this );				handler = new Handler()		{			public void handleMessage( Message message )			{							switch( message.what )				{				case 0 : //Code Right					if( dialog != null )					{						dialog.dismiss();					}					showView2();					break;				case 1 : //Code Wrong					if( dialog != null )					{						dialog.dismiss();					}					showError( "验证码不正确" );					break;				case 2 : //Send code success					if( dialog != null )					{						dialog.dismiss();					}					textCode.setText( "123456" );					buttonFinish1.setEnabled( true );					break;				case 3 : //Send code failed								if( dialog != null )					{						dialog.dismiss();					}					showError( "发送验证码失败" );					break;				case 4 : //name and phone not match					if( dialog != null )					{						dialog.dismiss();					}					showError( "姓名和手机号不匹配" );					break;				case 5 : //check success					startSendCode();					break;				case 6 : //reset success					if( dialog != null )					{						dialog.dismiss();					}					showError( "重置成功" );					back();					break;				case 7 : //reset failed					if( dialog != null )					{						dialog.dismiss();					}					showError( "重置失败" );					break;				}			}		};				showView1();	}	private void showView1()	{		setContentView( R.layout.forget_password1 );				textName = ( EditText ) findViewById( R.id.forget_password1_name );		textPhone = ( EditText ) findViewById( R.id.forget_password1_phone );		textCode = ( EditText ) findViewById( R.id.forget_password1_code );				buttonBack1 = ( Button ) findViewById( R.id.forget_password1_button_back );		buttonBack1.setText( "<  " );		buttonBack1.setOnClickListener		(			new OnClickListener()			{				public void onClick( View view )				{					back();				}			}		);				buttonSendCode = ( Button ) findViewById( R.id.forget_password1_button_send );		buttonSendCode.setOnClickListener		(			new OnClickListener()			{				public void onClick( View view )				{					if( Tool.isFastDoubleClick() )					{						return;					}					sendCode();				}			}		);				buttonFinish1 = ( Button ) findViewById( R.id.forget_password1_button_finish );		buttonFinish1.setEnabled( false );		buttonFinish1.setOnClickListener		(			new OnClickListener()			{				public void onClick( View view )				{					if( Tool.isFastDoubleClick() )					{						return;					}					finish1();				}			}		);	}		private void showView2()	{		setContentView( R.layout.forget_password2 );				textPassword1 = ( EditText ) findViewById( R.id.forget_password2_password1 );		textPassword2 = ( EditText ) findViewById( R.id.forget_password2_password2 );				buttonBack2 = ( Button ) findViewById( R.id.forget_password2_button_back );		buttonBack2.setText( "<  " );		buttonBack2.setOnClickListener		(			new OnClickListener()			{				public void onClick( View view )				{					back();				}			}		);				buttonFinish2 = ( Button ) findViewById( R.id.forget_password2_button_finish );		buttonFinish2.setOnClickListener		(			new OnClickListener()			{				public void onClick( View view )				{					if( Tool.isFastDoubleClick() )					{						return;					}					finish2();				}			}		);	}		private void sendCode()	{		Information.Name = textName.getText().toString();		if( !Tool.judgeTextInput( Information.Name.length(), 6, 2 ) )		{			showError( "姓名2~6个字" );			return;		}		Information.Phone = textPhone.getText().toString();		if( !Tool.judgePhone( Information.Phone ) )		{			showError( "手机输入不正确" );			return;		}				startCheckPhone();	}		private void finish1()	{		if( textCode.getText().toString().equals( "123456" ) )		{			handler.sendEmptyMessage( 0 );		}		else		{			handler.sendEmptyMessage( 1 );		}	}		private void startCheckPhone()	{		if( Tool.isNetworkConnected( this ) == true )		{			dialog = new Dialog( this, R.style.dialog_progress );			LayoutInflater inflater = LayoutInflater.from( this );  			View view = inflater.inflate( R.layout.dialog_progress, null );			TextView textView = ( TextView ) view.findViewById( R.id.dialog_textview );			textView.setText( "正在验证" );						WindowManager.LayoutParams layoutParams = dialog.getWindow().getAttributes();			layoutParams.alpha = 0.8f;			dialog.getWindow().setAttributes( layoutParams );			dialog.setContentView( view );			dialog.setCancelable( false );			dialog.setOnKeyListener			(				new OnKeyListener()				{					public boolean onKey( DialogInterface dialog, int keyCode, KeyEvent event ) 					{						if( keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0 )						{							if( connection != null )							{								connection.disconnect();							}							dialog.dismiss();							return true;						}						return false;					}				}			);			dialog.show();						new Thread	    	(	    		new Thread()	    		{	    			public void run()	    			{	    				doCheckPhone();	    			}	    		}	    	).start();		}		else		{			Toast.makeText( this, "网络不可用，请打开网络", Toast.LENGTH_SHORT ).show();		}	}		private void doCheckPhone()	{		final String urlString = Information.Server_Url + "/signup/check";		try		{			HttpURLConnection.setFollowRedirects( false );						URL url = new URL( urlString );			connection = ( HttpURLConnection ) url.openConnection();  			connection.setRequestProperty( "Connection", "keep-alive" );			connection.setRequestProperty( "Content-Type", "application/json" );			connection.setRequestMethod( "POST" );			connection.setConnectTimeout( 10000 );			connection.setReadTimeout( 30000 );			connection.setDoOutput( true );			connection.setDoInput( true );						JSONObject json = new JSONObject();			json.put( "phone", Information.Phone );			json.put( "type", "resetpwd" );						connection.getOutputStream().write( json.toString().getBytes() );						final int responseCode = connection.getResponseCode();			if( responseCode == 200 )			{				BufferedReader reader = new BufferedReader( new InputStreamReader( connection.getInputStream() ) );				String temp1 = null;				StringBuilder value = new StringBuilder();				while( ( temp1 = reader.readLine() ) != null )				{					value.append( temp1 );				}				JSONObject jsonObject = new JSONObject( value.toString() );				if( jsonObject.getInt( "result" ) == 2000 )				{					Information.Key1 = jsonObject.getString( "key" );					handler.sendEmptyMessage( 5 );				}				else				{					handler.sendEmptyMessage( 4 );				}			}			else			{				handler.sendEmptyMessage( 3 );			}		}		catch( Exception ex )		{			handler.sendEmptyMessage( 3 );		}		finally		{			if( connection != null )			{				connection.disconnect();			}		}	}		private void startSendCode()	{		new Thread    	(    		new Thread()    		{    			public void run()    			{    				doSendCode();    			}    		}    	).start();	}		private void doSendCode()	{		final String urlString = Information.Server_Url + "/signup/verify";		try		{			HttpURLConnection.setFollowRedirects( false );						URL url = new URL( urlString );			connection = ( HttpURLConnection ) url.openConnection();  			connection.setRequestProperty( "Connection", "keep-alive" );			connection.setRequestProperty( "Content-Type", "application/json" );			connection.setRequestMethod( "POST" );			connection.setConnectTimeout( 10000 );			connection.setReadTimeout( 30000 );			connection.setDoOutput( true );			connection.setDoInput( true );						JSONObject json = new JSONObject();			json.put( "phone", Information.Phone );			json.put( "key", Information.Key1 );						connection.getOutputStream().write( json.toString().getBytes() );						final int responseCode = connection.getResponseCode();			if( responseCode == 200 )			{				BufferedReader reader = new BufferedReader( new InputStreamReader( connection.getInputStream() ) );				String temp1 = null;				StringBuilder value = new StringBuilder();				while( ( temp1 = reader.readLine() ) != null )				{					value.append( temp1 );				}				JSONObject jsonObject = new JSONObject( value.toString() );				if( jsonObject.getInt( "result" ) == 2000 )				{					Information.Key2 = jsonObject.getString( "key" );					handler.sendEmptyMessage( 2 );				}				else				{					handler.sendEmptyMessage( 3 );				}			}			else			{				handler.sendEmptyMessage( 3 );			}		}		catch( Exception ex )		{			handler.sendEmptyMessage( 3 );		}		finally		{			if( connection != null )			{				connection.disconnect();			}		}	}		private void finish2()	{		Information.Password = textPassword1.getText().toString();		if( !Tool.judgeTextInput( Information.Password.length(), 16, 6 ) )		{			showError( "密码不正确" );			return;		}		String password2 = textPassword2.getText().toString();		if( !Information.Password.equals( password2 ) )		{			showError( "两次密码不一致" );			return;		}				startReset();	}		private void startReset()	{		if( Tool.isNetworkConnected( this ) == true )		{			dialog = new Dialog( this, R.style.dialog_progress );			LayoutInflater inflater = LayoutInflater.from( this );  			View view = inflater.inflate( R.layout.dialog_progress, null );			TextView textView = ( TextView ) view.findViewById( R.id.dialog_textview );			textView.setText( "正在提交" );						WindowManager.LayoutParams layoutParams = dialog.getWindow().getAttributes();			layoutParams.alpha = 0.8f;			dialog.getWindow().setAttributes( layoutParams );			dialog.setContentView( view );			dialog.setCancelable( false );			dialog.setOnKeyListener			(				new OnKeyListener()				{					public boolean onKey( DialogInterface dialog, int keyCode, KeyEvent event ) 					{						if( keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0 )						{							if( connection != null )							{								connection.disconnect();							}							dialog.dismiss();							return true;						}						return false;					}				}			);			dialog.show();						new Thread	    	(	    		new Thread()	    		{	    			public void run()	    			{	    				doReset();	    			}	    		}	    	).start();		}		else		{			Toast.makeText( this, "网络不可用，请打开网络", Toast.LENGTH_SHORT ).show();		}	}		private void doReset()	{		final String urlString = Information.Server_Url + "/signup/resetpwd";		try		{			HttpURLConnection.setFollowRedirects( false );						URL url = new URL( urlString );			connection = ( HttpURLConnection ) url.openConnection();  			connection.setRequestProperty( "Connection", "keep-alive" );			connection.setRequestProperty( "Content-Type", "application/json" );			connection.setRequestMethod( "POST" );			connection.setConnectTimeout( 10000 );			connection.setReadTimeout( 30000 );			connection.setDoOutput( true );			connection.setDoInput( true );						JSONObject json = new JSONObject();			json.put( "code", "123456" );			json.put( "key", Information.Key2 );			json.put( "username", Information.Phone );			json.put( "password", Information.Password );			json.put( "name", Information.Name );						connection.getOutputStream().write( json.toString().getBytes() );			final int responseCode = connection.getResponseCode();			if( responseCode == 200 )			{				BufferedReader reader = new BufferedReader( new InputStreamReader( connection.getInputStream() ) );				String temp1 = null;				StringBuilder value = new StringBuilder();				while( ( temp1 = reader.readLine() ) != null )				{					value.append( temp1 );				}				JSONObject jsonObject = new JSONObject( value.toString() );				if( jsonObject.getInt( "result" ) == 2000 )				{					handler.sendEmptyMessage( 6 );				}				else				{					handler.sendEmptyMessage( 7 );				}						}			else			{				handler.sendEmptyMessage( 7 );			}		}		catch( Exception ex )		{			handler.sendEmptyMessage( 7 );		}		finally		{			if( connection != null )			{				connection.disconnect();			}		}	}		private void back()	{		setResult( 0 );		finish();	}		private void showError( String text )	{		Toast.makeText( this, text, Toast.LENGTH_SHORT ).show();	}		public boolean onKeyDown( int keyCode, KeyEvent event )	{		if( keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0 )		{			back();			return true;		}		return false;	}}