package com.pku.xiaoyoubang.view;import java.io.File;import java.io.FileInputStream;import java.util.ArrayList;import java.util.LinkedHashMap;import self.chooseimage.FileListActivity;import self.chooseimage.MyAdapter;import android.annotation.SuppressLint;import android.app.Activity;import android.app.AlertDialog;import android.app.Dialog;import android.content.ContentResolver;import android.content.ContentValues;import android.content.DialogInterface;import android.content.DialogInterface.OnKeyListener;import android.content.Intent;import android.database.Cursor;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.net.Uri;import android.os.Bundle;import android.os.Handler;import android.os.Message;import android.provider.MediaStore;import android.view.KeyEvent;import android.view.LayoutInflater;import android.view.View;import android.view.View.OnClickListener;import android.view.ViewGroup;import android.view.ViewGroup.LayoutParams;import android.view.Window;import android.view.WindowManager;import android.widget.Button;import android.widget.GridView;import android.widget.TextView;import android.widget.Toast;import com.pku.xiaoyoubang.R;import com.pku.xiaoyoubang.model.ImageGridAdapter;import com.pku.xiaoyoubang.model.ImageGridAdapter.ImageClickListener;import com.pku.xiaoyoubang.tool.Information;import com.pku.xiaoyoubang.tool.MyApplication;import com.pku.xiaoyoubang.tool.Tool;@SuppressLint("HandlerLeak")public class AddPictureActivity extends Activity implements ImageClickListener{	private Button buttonBack;	private Button buttonFinish;		//private TableLayout table;		private GridView gridView;		private ArrayList< String > pictureListBig;	private ArrayList< String > pictureListSmall;	private ArrayList< String > pictureListBigNew = new ArrayList< String >();	private ArrayList< String > pictureListSmallNew = new ArrayList< String >();	private LinkedHashMap< String, Integer > mapUrl = new LinkedHashMap< String, Integer >();		private Uri photoUri = null;	private String chooseUrl = "";	private String bigUrl = "";	private String smallUrl = "";		private int type;		private Dialog dialog;	private Handler handler;		public static int totalCount = 0;	private ImageGridAdapter dapter;		protected void onCreate( Bundle savedInstanceState )	{		super.onCreate( savedInstanceState );		requestWindowFeature( Window.FEATURE_NO_TITLE );		MyApplication.getInstance().addActivity( this );		pictureListBig = getIntent().getStringArrayListExtra( "pictureListBig" );		pictureListSmall = getIntent().getStringArrayListExtra( "pictureListSmall" );				totalCount = pictureListBig.size();		type = getIntent().getIntExtra( "type", 0 );		if( type == 1 )		{			pictureListBigNew = getIntent().getStringArrayListExtra( "pictureListBigNew" );			pictureListSmallNew = getIntent().getStringArrayListExtra( "pictureListSmallNew" );		}				handler = new Handler()		{			public void handleMessage( Message message )			{					if( dialog != null )				{					dialog.dismiss();				}				switch( message.what )				{				case 0 : //add success										updateTable();					break;				case 1 : //add failed					showError( "读取照片失败" );					break;				}			}		};				initView();	}		private void initView()	{		setContentView( R.layout.add_picture );				buttonBack = ( Button ) findViewById( R.id.add_picture_button_back );		buttonBack.setText( "<  " );		buttonBack.setOnClickListener		(			new OnClickListener()			{				public void onClick( View view )				{					if( Tool.isFastDoubleClick() )					{						return;					}					back();				}			}		);				buttonFinish = ( Button ) findViewById( R.id.add_picture_button_finish );		buttonFinish.setOnClickListener		(			new OnClickListener()			{				public void onClick( View view )				{					if( Tool.isFastDoubleClick() )					{						return;					}					finishChoose();				}			}		);				//table = ( TableLayout ) findViewById( R.id.add_picture_table );		gridView = ( GridView ) findViewById( R.id.add_picture_gridView );				final int count = pictureListSmall.size();		for( int i = 0; i < count; i ++ )		{			mapUrl.put( pictureListSmall.get( i ), i );		}				if( type == 1 )		{			final int sum = pictureListSmallNew.size();			for( int i = 0; i < sum; i ++ )			{				mapUrl.put( pictureListSmallNew.get( i ), i + count );			}		}				updateTable();	}		private void updateTable()	{		ArrayList< String > temp1 = new ArrayList< String >();		ArrayList< String > temp2 = new ArrayList< String >();				for( String url : mapUrl.keySet() )		{			temp1.add( url );			if( url.startsWith( Information.Temp_Image_Path ) )			{				if( type == 0 )				{					temp2.add( pictureListBig.get( mapUrl.get( url ) ) );				}				else				{					temp2.add( pictureListBigNew.get( mapUrl.get( url ) ) );				}			}			else			{				temp2.add( "" );			}		}				temp1.add( "" );		dapter = new ImageGridAdapter( this, temp1, temp2 );		dapter.setListener( this );		gridView.setAdapter( dapter );	}		private void back()	{		finish();	}		private void finishChoose()	{		Intent intent = getIntent();				ArrayList< String > tempBig = new ArrayList< String >();		ArrayList< String > tempSmall = new ArrayList< String >();				if( type == 0 )		{			for( String url : mapUrl.keySet() )				if( !url.equals( "" ) )				{					tempSmall.add( url );					tempBig.add( pictureListBig.get( mapUrl.get( url ) ) );				}			intent.putStringArrayListExtra( "pictureListBig", tempBig );			intent.putStringArrayListExtra( "pictureListSmall", tempSmall );		}		else		{			for( String url : mapUrl.keySet() )				if( !url.equals( "" ) )				{					if( url.startsWith( Information.Temp_Image_Path ) )					{						tempSmall.add( url );						tempBig.add( pictureListBigNew.get( mapUrl.get( url ) ) );					}				}			intent.putStringArrayListExtra( "pictureListBigNew", tempBig );			intent.putStringArrayListExtra( "pictureListSmallNew", tempSmall );		}				setResult( 1, intent );		finish();	}//	public void onClick( final View v ) //	{//		if( Tool.isFastDoubleClick() )//		{//			return;//		}//		final String symbol = mapImage.get( ( ImageView ) v );//		if( symbol.equals( "" ) )//		{//			showAddPicture();//		}//		else if( symbol.startsWith( Information.Temp_Image_Path ) )//		{//			AlertDialog.Builder dialog = new AlertDialog.Builder( this );//	        dialog.setTitle( "编辑照片" ).setMessage( "是否删除选定照片？" )//	        .setPositiveButton( "确定", new DialogInterface.OnClickListener() //	        {//	        	public void onClick( DialogInterface dialog, int which ) //	        	{//	        		mapImage.remove( ( ImageView ) v );//	        		mapUrl.remove( symbol );//	        		updateTable();//	        	}//	        }).setNegativeButton( "取消", new DialogInterface.OnClickListener() //	        {//	        	public void onClick( DialogInterface dialog, int which ) //	        	{//	        		dialog.cancel();//	        	}//	        }).create().show();//		}//	}		@SuppressWarnings("deprecation")	private void showAddPicture()	{		View view = getLayoutInflater().inflate( R.layout.photo_choose_dialog, null );		dialog = new Dialog( this, R.style.transparentFrameWindowStyle );		dialog.setContentView( view, new LayoutParams( LayoutParams.MATCH_PARENT,LayoutParams.WRAP_CONTENT ) );				Button button1 = ( Button ) view.findViewById( R.id.photo_choose_dialog_button1 );		button1.setOnClickListener		(			new OnClickListener()			{				public void onClick( View view )				{					if( Tool.isFastDoubleClick() )					{						return;					}					chooseFromGallery();					dialog.dismiss();				}			}		);				Button button2 = ( Button ) view.findViewById( R.id.photo_choose_dialog_button2 );		button2.setOnClickListener		(			new OnClickListener()			{				public void onClick( View view )				{					if( Tool.isFastDoubleClick() )					{						return;					}					chooseFromCamera();					dialog.dismiss();				}			}		);				Button button3 = ( Button ) view.findViewById( R.id.photo_choose_dialog_button3 );		button3.setOnClickListener		(			new OnClickListener()			{				public void onClick( View view )				{					if( Tool.isFastDoubleClick() )					{						return;					}					dialog.dismiss();				}			}		);				Window window = dialog.getWindow();		// 设置显示动画		window.setWindowAnimations( R.style.main_menu_animstyle );		WindowManager.LayoutParams wl = window.getAttributes();		wl.x = 0;		wl.y = getWindowManager().getDefaultDisplay().getHeight();		// 以下这两句是为了保证按钮可以水平满屏		wl.width = ViewGroup.LayoutParams.MATCH_PARENT;		wl.height = ViewGroup.LayoutParams.WRAP_CONTENT;		// 设置显示位置		dialog.onWindowAttributesChanged( wl );		// 设置点击外围解散		dialog.setCanceledOnTouchOutside( true );		dialog.show();	}		private void chooseFromCamera()	{		Intent getImageByCamera = new Intent( "android.media.action.IMAGE_CAPTURE" );   		ContentValues value = new ContentValues();		photoUri = this.getContentResolver().insert( MediaStore.Images.Media.EXTERNAL_CONTENT_URI, value );		getImageByCamera.putExtra( android.provider.MediaStore.EXTRA_OUTPUT, photoUri );		startActivityForResult( getImageByCamera, 1 );	}		private void chooseFromGallery()	{//		Intent getImage = new Intent( Intent.ACTION_GET_CONTENT ); //		getImage.addCategory( Intent.CATEGORY_OPENABLE ); //		getImage.setType("image/*"); //		startActivityForResult( getImage, 0 );		MyAdapter.mSelectedImage.clear();		startActivityForResult( new Intent( this, FileListActivity.class ), 2 );	}		protected void onActivityResult( int requestCode, int resultCode, Intent data ) 	{		super.onActivityResult( requestCode, resultCode, data );		if( requestCode == 1 ) 		{			ContentResolver resolver = getContentResolver(); 			if( requestCode == 0 ) 			{				try 				{					Cursor cursor = resolver.query( data.getData(), null, null, null, null );            	                if( cursor != null )	                {	                	cursor.moveToFirst();	                	chooseUrl = cursor.getString( 1 );	                	cursor.close();	                		                	checkFile();	                }	                else if( data.getData() != null )	                {	                	chooseUrl = data.getData().getPath();	                	checkFile();	                }				} 				catch( Exception ex ) {}			}			else if( requestCode == 1 )			{	            try 	            {	                Cursor cursor = resolver.query( photoUri, null, null, null, null );            	                if( cursor != null )	                {	                	cursor.moveToFirst();	                	chooseUrl = cursor.getString( 1 );	                	cursor.close();	                		                	checkFile();	                }	            } 	            catch( Exception ex ) {}			}		}		else if( resultCode == 2 )		{			startStoreFile();		}	}		private void checkFile()	{		try		{			final String symbol = chooseUrl.substring( chooseUrl.lastIndexOf( "." ) + 1, chooseUrl.length() );			if( symbol.compareToIgnoreCase( "jpg" ) == 0 || symbol.compareToIgnoreCase( "jpeg" ) == 0 || symbol.compareToIgnoreCase( "png" ) == 0 )			{				dialog = new Dialog( this, R.style.dialog_progress );				LayoutInflater inflater = LayoutInflater.from( this );  				View view = inflater.inflate( R.layout.dialog_progress, null );				TextView textView = ( TextView ) view.findViewById( R.id.dialog_textview );					textView.setText( "正在处理照片" );								WindowManager.LayoutParams layoutParams = dialog.getWindow().getAttributes();				layoutParams.alpha = 0.8f;				dialog.getWindow().setAttributes( layoutParams );				dialog.setContentView( view );				dialog.setCancelable( false );				dialog.setOnKeyListener				(					new OnKeyListener()					{						public boolean onKey( DialogInterface dialog, int keyCode, KeyEvent event ) 						{							if( keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0 )							{								dialog.dismiss();								return true;							}							return false;						}					}				);				dialog.show();								new Thread		    	(		    		new Thread()		    		{		    			public void run()		    			{		    				try		    				{		    					String name = chooseUrl;		    					if( symbol.compareToIgnoreCase( "png" ) == 0 )		    					{		    						name = Tool.convertPNGtoJPG( chooseUrl );		    						if( name.equals( "" ) )		    						{		    							handler.sendEmptyMessage( 1 );		    							return;		    						}		    					}		    								    				Bitmap oldBitmap = BitmapFactory.decodeStream( new FileInputStream( new File( name ) ) );			    				oldBitmap = Tool.roateBitmap( oldBitmap, Tool.getPictureDegree( name ) );			    							    				String temp = System.currentTimeMillis() + "";			    							    				bigUrl = Information.Temp_Image_Path + temp + ".jpg";			    				smallUrl = Information.Temp_Image_Path + temp + "_small.jpg";			    							    				Tool.storeNewBitmap( oldBitmap, bigUrl, smallUrl );			    							    				if( type == 0 )			    				{			    					pictureListBig.add( bigUrl );			    					pictureListSmall.add( smallUrl );			    					mapUrl.put( smallUrl, pictureListBig.size() - 1 );			    				}			    				else			    				{			    					pictureListBigNew.add( bigUrl );			    					pictureListSmallNew.add( smallUrl );			    					mapUrl.put( smallUrl, pictureListBigNew.size() - 1 );			    				}				    							    				totalCount = mapUrl.size();				    							    			handler.sendEmptyMessage( 0 );		    				}		    				catch( Exception ex ) 		    				{		    					handler.sendEmptyMessage( 1 );		    				}		    			}		    		}		    	).start();			}			else			{				showError( "只支持jpg和png格式照片" );			}		}		catch( Exception ex ) {}	}		/**	 * 	 */	private void startStoreFile()	{		dialog = new Dialog( this, R.style.dialog_progress );		LayoutInflater inflater = LayoutInflater.from( this );  		View view = inflater.inflate( R.layout.dialog_progress, null );		TextView textView = ( TextView ) view.findViewById( R.id.dialog_textview );			textView.setText( "正在处理照片" );				WindowManager.LayoutParams layoutParams = dialog.getWindow().getAttributes();		layoutParams.alpha = 0.8f;		dialog.getWindow().setAttributes( layoutParams );		dialog.setContentView( view );		dialog.setCancelable( false );		dialog.setOnKeyListener		(			new OnKeyListener()			{				public boolean onKey( DialogInterface dialog, int keyCode, KeyEvent event ) 				{					if( keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0 )					{						dialog.dismiss();						return true;					}					return false;				}			}		);		dialog.show();				new Thread    	(    		new Thread()    		{    			public void run()    			{    				savePhotoToNative();    			}    		}    	).start();	}	/**	 *  保存用户自己的头像，上传成功之前	 */	private void savePhotoToNative()	{		try		{			for( String url : MyAdapter.mSelectedImage )			{				String symbol = url.substring( url.lastIndexOf( "." ) + 1, url.length() );				String name = url;				if( symbol.compareToIgnoreCase( "png" ) == 0 )				{					name = Tool.convertPNGtoJPG( url );					if( name.equals( "" ) )					{						handler.sendEmptyMessage( 1 );						continue;					}				}								Bitmap oldBitmap = BitmapFactory.decodeStream( new FileInputStream( new File( url ) ) );				oldBitmap = Tool.roateBitmap( oldBitmap, Tool.getPictureDegree( url ) );				String temp = System.currentTimeMillis() + "";								bigUrl = Information.Temp_Image_Path + temp + ".jpg";				smallUrl = Information.Temp_Image_Path + temp + "_small.jpg";								Tool.storeNewBitmap( oldBitmap, bigUrl, smallUrl );								if( type == 0 )				{					pictureListBig.add( bigUrl );					pictureListSmall.add( smallUrl );					mapUrl.put( smallUrl, pictureListBig.size() - 1 );				}				else				{					pictureListBigNew.add( bigUrl );					pictureListSmallNew.add( smallUrl );					mapUrl.put( smallUrl, pictureListBigNew.size() - 1 );				}				}						totalCount = mapUrl.size();						handler.sendEmptyMessage( 0 );		}		catch( Exception ex )		{			ex.printStackTrace();			handler.sendEmptyMessage( 1 );		}	}	private void showError( String text )	{		Toast.makeText( this, text, Toast.LENGTH_SHORT ).show();	}	@Override	public void clickImage(final String symbol) 	{		if( symbol.equals( "" ) )		{			showAddPicture();		}		else if( symbol.startsWith( Information.Temp_Image_Path ) )		{			AlertDialog.Builder dialog = new AlertDialog.Builder( this );	        dialog.setTitle( "删除图片" ).setMessage( "是否删除选定图片？" )	        .setPositiveButton( "删除", new DialogInterface.OnClickListener() 	        {	        	public void onClick( DialogInterface dialog, int which ) 	        	{	        		mapUrl.remove( symbol );	        		totalCount = mapUrl.size();	        		updateTable();	        	}	        }).setNegativeButton( "取消", new DialogInterface.OnClickListener() 	        {	        	public void onClick( DialogInterface dialog, int which ) 	        	{	        		dialog.cancel();	        	}	        }).create().show();		}	}}