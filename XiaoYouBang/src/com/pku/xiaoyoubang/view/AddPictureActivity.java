package com.pku.xiaoyoubang.view;import java.io.File;import java.io.FileInputStream;import java.util.ArrayList;import java.util.LinkedHashMap;import java.util.List;import self.chooseimage.FileListActivity;import self.chooseimage.MyAdapter;import android.annotation.SuppressLint;import android.app.Activity;import android.app.AlertDialog;import android.app.Dialog;import android.content.ContentResolver;import android.content.ContentValues;import android.content.DialogInterface;import android.content.DialogInterface.OnKeyListener;import android.content.Intent;import android.database.Cursor;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.net.Uri;import android.os.Bundle;import android.os.Handler;import android.os.Message;import android.provider.MediaStore;import android.view.KeyEvent;import android.view.LayoutInflater;import android.view.View;import android.view.View.OnClickListener;import android.view.Window;import android.view.WindowManager;import android.widget.Button;import android.widget.ImageView;import android.widget.TableLayout;import android.widget.TableRow;import android.widget.TextView;import android.widget.Toast;import com.nostra13.universalimageloader.core.ImageLoader;import com.pku.xiaoyoubang.R;import com.pku.xiaoyoubang.model.MyAlertDialog;import com.pku.xiaoyoubang.tool.Information;import com.pku.xiaoyoubang.tool.MyApplication;import com.pku.xiaoyoubang.tool.Tool;@SuppressLint("HandlerLeak")public class AddPictureActivity extends Activity implements OnClickListener{	private Button buttonBack;	private Button buttonFinish;		private TableLayout table;		private ArrayList< String > pictureListBig;	private ArrayList< String > pictureListSmall;	private ArrayList< String > pictureListBigNew = new ArrayList< String >();	private ArrayList< String > pictureListSmallNew = new ArrayList< String >();	private LinkedHashMap< ImageView, String > mapImage = new LinkedHashMap< ImageView, String >();	private LinkedHashMap< String, Integer > mapUrl = new LinkedHashMap< String, Integer >();		private Uri photoUri = null;	private String chooseUrl = "";	private String bigUrl = "";	private String smallUrl = "";		private int type;		private Dialog dialog;	private Handler handler;		public static int totalCount = 0;	protected void onCreate( Bundle savedInstanceState )	{		super.onCreate( savedInstanceState );		requestWindowFeature( Window.FEATURE_NO_TITLE );		MyApplication.getInstance().addActivity( this );		pictureListBig = getIntent().getStringArrayListExtra( "pictureListBig" );		pictureListSmall = getIntent().getStringArrayListExtra( "pictureListSmall" );				type = getIntent().getIntExtra( "type", 0 );		if( type == 1 )		{			totalCount = pictureListBig.size();			pictureListBigNew = getIntent().getStringArrayListExtra( "pictureListBigNew" );			pictureListSmallNew = getIntent().getStringArrayListExtra( "pictureListSmallNew" );		}				handler = new Handler()		{			public void handleMessage( Message message )			{					if( dialog != null )				{					dialog.dismiss();				}				switch( message.what )				{				case 0 : //add success										updateTable();					break;				case 1 : //add failed					showError( "读取照片失败" );					break;				}			}		};				initView();	}		private void initView()	{		setContentView( R.layout.add_picture );				buttonBack = ( Button ) findViewById( R.id.add_picture_button_back );		buttonBack.setText( "<  " );		buttonBack.setOnClickListener		(			new OnClickListener()			{				public void onClick( View view )				{					back();				}			}		);				buttonFinish = ( Button ) findViewById( R.id.add_picture_button_finish );		buttonFinish.setOnClickListener		(			new OnClickListener()			{				public void onClick( View view )				{					finishChoose();				}			}		);				table = ( TableLayout ) findViewById( R.id.add_picture_table );				final int count = pictureListSmall.size();		for( int i = 0; i < count; i ++ )		{			mapUrl.put( pictureListSmall.get( i ), i );		}				if( type == 1 )		{			final int sum = pictureListSmallNew.size();			for( int i = 0; i < sum; i ++ )			{				mapUrl.put( pictureListSmallNew.get( i ), i + count );			}		}				updateTable();	}		private void updateTable()	{		table.removeAllViews();		ArrayList< String > temp = new ArrayList< String >();				for( String url : mapUrl.keySet() )		{			temp.add( url );		}				int sum = 0;		final int count = temp.size();		for( int i = 0; i < count / 3 + 1; i ++ )		{			if( sum == 9 ) break;			TableRow row = ( TableRow ) LayoutInflater.from( this ).inflate( R.layout.add_picture_row, null );			table.addView( row );			ImageView image1 = ( ImageView ) row.findViewById( R.id.add_picture_row1 );			image1.setOnClickListener( this );			if( sum == count )			{				mapImage.put( image1, "" );				image1.setImageResource( R.drawable.picture );				break;			}			else			{				mapImage.put( image1, temp.get( sum ) );				if( temp.get( sum ).startsWith( Information.Temp_Image_Path ) )				{					image1.setImageBitmap( BitmapFactory.decodeFile( temp.get( sum ) ) );				}				else				{					ImageLoader.getInstance().displayImage( Information.Server_Url + temp.get( sum ), image1, Information.options_image );				}				sum ++;			}						ImageView image2 = ( ImageView ) row.findViewById( R.id.add_picture_row2 );			image2.setOnClickListener( this );			if( sum == count )			{				mapImage.put( image2, "" );				image2.setImageResource( R.drawable.picture );				break;			}			else			{				mapImage.put( image2, temp.get( sum ) );				if( temp.get( sum ).startsWith( Information.Temp_Image_Path ) )				{					image2.setImageBitmap( BitmapFactory.decodeFile( temp.get( sum ) ) );				}				else				{					ImageLoader.getInstance().displayImage( Information.Server_Url + temp.get( sum ), image2, Information.options_image );				}				sum ++;			}						ImageView image3 = ( ImageView ) row.findViewById( R.id.add_picture_row3 );			image3.setOnClickListener( this );			if( sum == count )			{				mapImage.put( image3, "" );				image3.setImageResource( R.drawable.picture );				break;			}			else			{				mapImage.put( image3, temp.get( sum ) );				if( temp.get( sum ).startsWith( Information.Temp_Image_Path ) )				{					image3.setImageBitmap( BitmapFactory.decodeFile( temp.get( sum ) ) );				}				else				{					ImageLoader.getInstance().displayImage( Information.Server_Url + temp.get( sum ), image3, Information.options_image );				}				sum ++;			}		}	}		private void back()	{		finish();	}		private void finishChoose()	{		Intent intent = getIntent();				ArrayList< String > tempBig = new ArrayList< String >();		ArrayList< String > tempSmall = new ArrayList< String >();				if( type == 0 )		{			for( String url : mapUrl.keySet() )			{				tempSmall.add( url );				tempBig.add( pictureListBig.get( mapUrl.get( url ) ) );			}			intent.putStringArrayListExtra( "pictureListBig", tempBig );			intent.putStringArrayListExtra( "pictureListSmall", tempSmall );		}		else		{			for( String url : mapUrl.keySet() )			{				if( url.startsWith( Information.Temp_Image_Path ) )				{					tempSmall.add( url );					tempBig.add( pictureListBigNew.get( mapUrl.get( url ) ) );				}			}			intent.putStringArrayListExtra( "pictureListBigNew", tempBig );			intent.putStringArrayListExtra( "pictureListSmallNew", tempSmall );		}				setResult( 1, intent );		finish();	}	public void onClick( final View v ) 	{		final String symbol = mapImage.get( ( ImageView ) v );		if( symbol.equals( "" ) )		{			showAddPicture();		}		else if( symbol.startsWith( Information.Temp_Image_Path ) )		{			AlertDialog.Builder dialog = new AlertDialog.Builder( this );	        dialog.setTitle( "编辑照片" ).setMessage( "是否删除选定照片？" )	        .setPositiveButton( "确定", new DialogInterface.OnClickListener() 	        {	        	public void onClick( DialogInterface dialog, int which ) 	        	{	        		mapImage.remove( ( ImageView ) v );	        		mapUrl.remove( symbol );	        		updateTable();	        	}	        }).setNegativeButton( "取消", new DialogInterface.OnClickListener() 	        {	        	public void onClick( DialogInterface dialog, int which ) 	        	{	        		dialog.cancel();	        	}	        }).create().show();		}	}		private void showAddPicture()	{		List< String > list = new ArrayList< String >();		list.add( "相册" );		list.add( "拍照" );		MyAlertDialog.showAlert		( 			this, "选择照片来源", list, null, new MyAlertDialog.OnAlertSelectId()			{				public void onClick( int whichButton ) 				{											switch( whichButton )					{					case 0 :						chooseFromGallery();						break;					case 1 :						chooseFromCamera();						break;					}				}			}		);	}		private void chooseFromCamera()	{		Intent getImageByCamera = new Intent( "android.media.action.IMAGE_CAPTURE" );   		ContentValues value = new ContentValues();		photoUri = this.getContentResolver().insert( MediaStore.Images.Media.EXTERNAL_CONTENT_URI, value );		getImageByCamera.putExtra( android.provider.MediaStore.EXTRA_OUTPUT, photoUri );		startActivityForResult( getImageByCamera, 1 );	}		private void chooseFromGallery()	{//		Intent getImage = new Intent( Intent.ACTION_GET_CONTENT ); //		getImage.addCategory( Intent.CATEGORY_OPENABLE ); //		getImage.setType("image/*"); //		startActivityForResult( getImage, 0 );		MyAdapter.mSelectedImage.clear();		startActivityForResult( new Intent( this, FileListActivity.class ), 2 );	}		protected void onActivityResult( int requestCode, int resultCode, Intent data ) 	{		super.onActivityResult( requestCode, resultCode, data );		if( requestCode == 1 ) 		{			ContentResolver resolver = getContentResolver(); 			if( requestCode == 0 ) 			{				try 				{					Cursor cursor = resolver.query( data.getData(), null, null, null, null );            	                if( cursor != null )	                {	                	cursor.moveToFirst();	                	chooseUrl = cursor.getString( 1 );	                	cursor.close();	                		                	checkFile();	                }	                else if( data.getData() != null )	                {	                	chooseUrl = data.getData().getPath();	                	checkFile();	                }				} 				catch( Exception ex ) {}			}			else if( requestCode == 1 )			{	            try 	            {	                Cursor cursor = resolver.query( photoUri, null, null, null, null );            	                if( cursor != null )	                {	                	cursor.moveToFirst();	                	chooseUrl = cursor.getString( 1 );	                	cursor.close();	                		                	checkFile();	                }	            } 	            catch( Exception ex ) {}			}		}		else if( resultCode == 2 )		{			startStoreFile();		}	}		private void checkFile()	{		try		{			String symbol = chooseUrl.substring( chooseUrl.lastIndexOf( "." ) + 1, chooseUrl.length() );			if( symbol.compareToIgnoreCase( "jpg" ) == 0 || symbol.compareToIgnoreCase( "jpeg" ) == 0 || symbol.compareToIgnoreCase( "png" ) == 0 )			{				startStoreFile();							}			else			{				showError( "只支持jpg和png格式照片" );			}		}		catch( Exception ex ) {}	}		/**	 * 	 */	private void startStoreFile()	{		dialog = new Dialog( this, R.style.dialog_progress );		LayoutInflater inflater = LayoutInflater.from( this );  		View view = inflater.inflate( R.layout.dialog_progress, null );		TextView textView = ( TextView ) view.findViewById( R.id.dialog_textview );			textView.setText( "正在处理照片" );				WindowManager.LayoutParams layoutParams = dialog.getWindow().getAttributes();		layoutParams.alpha = 0.8f;		dialog.getWindow().setAttributes( layoutParams );		dialog.setContentView( view );		dialog.setCancelable( false );		dialog.setOnKeyListener		(			new OnKeyListener()			{				public boolean onKey( DialogInterface dialog, int keyCode, KeyEvent event ) 				{					if( keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0 )					{						dialog.dismiss();						return true;					}					return false;				}			}		);		dialog.show();				new Thread    	(    		new Thread()    		{    			public void run()    			{    				savePhotoToNative();    			}    		}    	).start();	}	/**	 *  保存用户自己的头像，上传成功之前	 */	private void savePhotoToNative()	{		try		{			for( String url : MyAdapter.mSelectedImage )			{				Bitmap oldBitmap = BitmapFactory.decodeStream( new FileInputStream( new File( url ) ) );				oldBitmap = Tool.roateBitmap( oldBitmap, Tool.getPictureDegree( url ) );								String symbol = url.substring( url.lastIndexOf( "." ) + 1, url.length() );				String temp = System.currentTimeMillis() + "";								bigUrl = Information.Temp_Image_Path + temp + "." + symbol;				smallUrl = Information.Temp_Image_Path + temp + "_small." + symbol;								Tool.storeNewBitmap( oldBitmap, bigUrl, smallUrl, symbol );								if( type == 0 )				{					pictureListBig.add( bigUrl );					pictureListSmall.add( smallUrl );					mapUrl.put( smallUrl, pictureListBig.size() - 1 );				}				else				{					pictureListBigNew.add( bigUrl );					pictureListSmallNew.add( smallUrl );					mapUrl.put( smallUrl, pictureListBigNew.size() - 1 );				}				}						totalCount = mapUrl.size();						handler.sendEmptyMessage( 0 );		}		catch( Exception ex )		{			ex.printStackTrace();			handler.sendEmptyMessage( 1 );		}	}	private void showError( String text )	{		Toast.makeText( this, text, Toast.LENGTH_SHORT ).show();	}}