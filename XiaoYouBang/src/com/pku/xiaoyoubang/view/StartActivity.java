package com.pku.xiaoyoubang.view;import java.io.BufferedOutputStream;import java.io.BufferedReader;import java.io.DataOutputStream;import java.io.File;import java.io.FileInputStream;import java.io.FileOutputStream;import java.io.InputStreamReader;import java.net.HttpURLConnection;import java.net.URL;import org.json.JSONArray;import org.json.JSONObject;import android.annotation.SuppressLint;import android.app.Activity;import android.app.AlertDialog;import android.app.Dialog;import android.content.ContentResolver;import android.content.ContentValues;import android.content.DialogInterface;import android.content.DialogInterface.OnKeyListener;import android.content.Intent;import android.content.SharedPreferences;import android.database.Cursor;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.net.Uri;import android.os.Bundle;import android.os.Handler;import android.os.Message;import android.provider.MediaStore;import android.view.KeyEvent;import android.view.LayoutInflater;import android.view.View;import android.view.View.OnClickListener;import android.view.ViewGroup;import android.view.ViewGroup.LayoutParams;import android.view.Window;import android.view.WindowManager;import android.widget.Button;import android.widget.EditText;import android.widget.ImageView;import android.widget.TextView;import android.widget.Toast;import com.pku.xiaoyoubang.R;import com.pku.xiaoyoubang.entity.UserEntity;import com.pku.xiaoyoubang.tool.Information;import com.pku.xiaoyoubang.tool.MyApplication;import com.pku.xiaoyoubang.tool.MyDatabaseHelper;import com.pku.xiaoyoubang.tool.Tool;import com.umeng.analytics.MobclickAgent;import com.umeng.message.UmengRegistrar;@SuppressLint("HandlerLeak")public class StartActivity extends Activity{	private enum NowView 	{		Login,		View_1,		View_2,		View_3,		View_4	}	private NowView nowView;	/**	 *  Login	 */	private Button buttonRegister;	private Button buttonLogin;	private Button buttonForgetPassword;	private EditText textLoginPhone;	private EditText textPassword;		private Dialog dialog;		private HttpURLConnection connection = null;	/**	 *  View_1	 */	private Button buttonBack1;	private Button buttonNext1;	private EditText textPhone;	private EditText textPassword1;	private EditText textPassword2;	private EditText textCode;	private EditText textInviteName;	/**	 *  View_2	 */	private Button buttonBack2;	private Button buttonNext2;	private ImageView buttonMale;	private ImageView buttonFemale;	private ImageView imageHead;	private TextView imageText;	private EditText textName;	private EditText textBirthday;	private Button textPKU;	private EditText textNowHome;	private EditText textOldHome;	private EditText textQQ;		private AlertDialog dialog1;	//private AlertDialog dialog2;		private int indexPKU1 = 0;	//private int indexPKU2 = 0;	private Uri photoUri = null;	private String chooseUrl = "";	private String saveUrl = "";	private String inviteCode = "";	/**	 *  View_3	 */	private Button buttonBack3;	private Button buttonNext3;	private EditText textCompany;	private EditText textPart;	private EditText textJob;	/**	 *  View_4	 */	private Button buttonBack4;	private Button buttonFinish;	private EditText textTag1;	private EditText textTag2;	private EditText textTag3;	private EditText textTag4;	private EditText textTag5;		private Handler handler;		private boolean hasGetDevice = false;		protected void onCreate( Bundle savedInstanceState )	{		super.onCreate( savedInstanceState );		requestWindowFeature( Window.FEATURE_NO_TITLE );		MyApplication.getInstance().addActivity( this );				Information.Type = 1;				SharedPreferences shared = getSharedPreferences( "whole2", Activity.MODE_PRIVATE );		if( shared.getBoolean( "showStart", true ) == true )		{			dialog = new Dialog( this, R.style.Transparent );			LayoutInflater inflater = LayoutInflater.from( this );  			View view = inflater.inflate( R.layout.start, null );			dialog.setContentView( view );			dialog.setCancelable( false );			dialog.show();						new Thread			(				new Thread()				{					public void run()					{						try						{							Thread.sleep( 4000 );						}						catch( Exception ex ) {}						handler.sendEmptyMessage( 11 );					}				}			).start();		}		else		{			SharedPreferences.Editor editor = shared.edit();			editor.putBoolean( "showStart", true );			editor.commit();		}				handler = new Handler()		{			public void handleMessage( Message message )			{				switch( message.what )				{				case 0 : //Login Success						if( hasGetDevice )					{						SharedPreferences shared = getSharedPreferences( "whole2", Activity.MODE_PRIVATE );						SharedPreferences.Editor editor = shared.edit();						editor.putBoolean( "device_token_update", true );						editor.commit();					}					else					{						SharedPreferences shared = getSharedPreferences( "whole2", Activity.MODE_PRIVATE );						SharedPreferences.Editor editor = shared.edit();						editor.putBoolean( "device_token_update", false );						editor.commit();					}										loadInformation();					break;				case 1 : //Login Failed					if( dialog != null )					{						dialog.dismiss();					}					showError( "登录失败" );					break;				case 2 : //Finish Upload Head Image					startRegister();					break;				case 3 : //Register Success					if( dialog != null )					{						dialog.dismiss();					}					saveUrl = "";					if( hasGetDevice )					{						SharedPreferences shared1 = getSharedPreferences( "whole2", Activity.MODE_PRIVATE );						SharedPreferences.Editor editor1 = shared1.edit();						editor1.putBoolean( "device_token_update", true );						editor1.commit();						}					else					{						SharedPreferences shared = getSharedPreferences( "whole2", Activity.MODE_PRIVATE );						SharedPreferences.Editor editor = shared.edit();						editor.putBoolean( "device_token_update", false );						editor.commit();					}					successToMain( false );					break;				case 4 : //Register Exist					if( dialog != null )					{						dialog.dismiss();					}					showError( "该手机号已注册" );					break;				case 5 : //Register Failed					if( dialog != null )					{						dialog.dismiss();					}					showError( "注册失败" );					break;				case 6 : //Upload phone success					startSendCode();					break;				case 7 : //Get Code Success					if( dialog != null )					{						dialog.dismiss();					}					showView_2();					break;				case 8 : //Load info success					successToMain( false );					break;				case 9 : //Load info failed - user					if( dialog != null )					{						dialog.dismiss();					}					showError( "用户不存在" );					break;				case 10 : //Load info failed - password					if( dialog != null )					{						dialog.dismiss();					}					showError( "密码错误" );					break;				case 11 : 					if( dialog != null )					{						dialog.dismiss();					}					break;				case 12 : 					if( dialog != null )					{						dialog.dismiss();					}					showError( "邀请码不正确" );					break;				}			}		};				initView();	}	/**	 *  Login	 */	private void initView()	{		setContentView( R.layout.login );		nowView = NowView.Login;				buttonRegister = ( Button ) findViewById( R.id.login_button_register );		buttonLogin = ( Button ) findViewById( R.id.login_button_login );		buttonForgetPassword = ( Button ) findViewById( R.id.login_button_forget );		textLoginPhone = ( EditText ) findViewById( R.id.login_phone );		textPassword = ( EditText ) findViewById( R.id.login_password );				buttonForgetPassword.setOnClickListener		(			new OnClickListener()			{				public void onClick( View view )				{					if( Tool.isFastDoubleClick() )					{						return;					}					showForget();				}							}		);				buttonRegister.setOnClickListener		(			new OnClickListener()			{				public void onClick( View view )				{					if( Tool.isFastDoubleClick() )					{						return;					}					register();				}							}		);				buttonLogin.setOnClickListener		(			new OnClickListener()			{				public void onClick( View view )				{					if( Tool.isFastDoubleClick() )					{						return;					}					judgeInput();				}							}		);	}		private void showForget()	{		startActivityForResult( new Intent( this, ForgetPasswordActivity.class ), 1010 );	}		private void successToMain( boolean isLoad )	{		saveInformation( isLoad );				if( dialog != null )		{			dialog.dismiss();		}		setResult( 0 );		finish();	}		private void saveInformation( boolean isLoad )	{		SharedPreferences shared = getSharedPreferences( "whole2", Activity.MODE_PRIVATE );		SharedPreferences.Editor editor = shared.edit();		editor.putString( "id", Information.Id );		editor.putString( "token", Information.Token );		editor.commit();		if( isLoad )		{			UserEntity entity = MyDatabaseHelper.getInstance( this ).getUser( Information.Id );						Information.Name = entity.getName();			Information.HeadUrl = entity.getHeadUrl();			Information.Sex = entity.getSex();			Information.Birthday = entity.getBirthday();			Information.PKU_Value = entity.getPku();			Information.Now_Home = entity.getNowHome();			Information.Old_Home = entity.getOldHome();			Information.QQ = entity.getQq();			Information.Company = entity.getJob1();			Information.Part = entity.getJob2();			Information.Job = entity.getJob3();			Information.Version = entity.getVersion();			Information.Tag = entity.getTags();			Information.Question_Count = entity.getQuestionCount();			Information.Answer_Count = entity.getAnswerCount();			Information.Praise_Count = entity.getPraiseCount();			Information.InviteUserName = entity.getInviteName();			Information.InviteUserHeadUrl = entity.getInviteHeadUrl();			Information.InviteUserId = entity.getInviteUserId();			Information.Intro = entity.getIntro();		}		else		{			UserEntity entity = new UserEntity();			entity.setId( Information.Id );			entity.setName( Information.Name );			entity.setHeadUrl( Information.HeadUrl );			entity.setSex( Information.Sex );			entity.setBirthday( Information.Birthday );			entity.setPku( Information.PKU_Value );			entity.setNowHome( Information.Now_Home );			entity.setOldHome( Information.Old_Home );			entity.setQq( Information.QQ );			entity.setJob1( Information.Company );			entity.setJob2( Information.Part );			entity.setJob3( Information.Job );			entity.setVersion( Information.Version );			entity.setTag( Information.Tag );			entity.setQuestionCount( Information.Question_Count );			entity.setAnswerCount( Information.Answer_Count );			entity.setPraiseCount( Information.Praise_Count );			entity.setInviteName( Information.InviteUserName );			entity.setInviteHeadUrl( Information.InviteUserHeadUrl );			entity.setInviteUserId( Information.InviteUserId );			entity.setIntro( Information.Intro );						MyDatabaseHelper.getInstance( this ).insertUser( entity );			MyDatabaseHelper.getInstance( this ).insertFriend( entity );		}	}	private void loadInformation()	{		if( MyDatabaseHelper.getInstance( this ).judgeUserExist( Information.Id ) )		{			successToMain( true );		}		else		{			new Thread			(				new Thread()				{					public void run()					{						doLoadInformation();					}				}			).start();		}	}		private void doLoadInformation()	{		final String urlString = Information.Server_Url + "/api/user/" + Information.Id + "?token=" + Information.Token;		try		{			HttpURLConnection.setFollowRedirects( false );						URL url = new URL( urlString );			connection = ( HttpURLConnection ) url.openConnection();  			connection.setRequestProperty( "Connection", "keep-alive" );			connection.setRequestMethod( "GET" );			connection.setConnectTimeout( 10000 );			connection.setReadTimeout( 30000 );			connection.connect();			final int responseCode = connection.getResponseCode();			if( responseCode == 200 )			{				BufferedReader reader = new BufferedReader( new InputStreamReader( connection.getInputStream() ) );				String temp1 = null;				StringBuilder value = new StringBuilder();				while( ( temp1 = reader.readLine() ) != null )				{					value.append( temp1 );				}				JSONObject jsonObject = new JSONObject( value.toString() );				Information.Name = jsonObject.getString( "name" );				Information.HeadUrl = jsonObject.getString( "headUrl" );							Information.Sex = jsonObject.getInt( "sex" );				Information.Birthday = jsonObject.getString( "birthyear" );				Information.PKU_Value = jsonObject.getString( "pku" );				Information.Now_Home = jsonObject.getString( "base" );				Information.Old_Home = jsonObject.getString( "hometown" );				Information.QQ = jsonObject.getString( "qq" );				Information.Company = jsonObject.getString( "company" );				Information.Part = jsonObject.getString( "department" );				Information.Job = jsonObject.getString( "job" );				Information.Version = jsonObject.getInt( "version" );				Information.Praise_Count = jsonObject.getInt( "praisedCount" );				Information.Answer_Count = jsonObject.getInt( "answerCount" );				Information.Question_Count = jsonObject.getInt( "questionCount" );				Information.Intro =  jsonObject.getString( "intro" );				if( jsonObject.has( "invitedBy" ) )				{					Information.InviteUserName = jsonObject.getJSONObject( "invitedBy" ).getString( "name" );					Information.InviteUserHeadUrl = jsonObject.getJSONObject( "invitedBy" ).getString( "headUrl" );					Information.InviteUserId = jsonObject.getJSONObject( "invitedBy" ).getString( "id" );								}				else				{					Information.InviteUserName = "元老";					Information.InviteUserHeadUrl = "";					Information.InviteUserId = "";				}								JSONArray tags = jsonObject.getJSONArray( "tags" );				final int count = tags.length();				for( int i = 0; i < count; i ++ )				{					Information.Tag[ i ] = tags.getString( i );				}				for( int i = count; i < 5; i ++ )				{					Information.Tag[ i ] = "";				}								handler.sendEmptyMessage( 8 );			}			else			{				handler.sendEmptyMessage( 9 );			}		}		catch( Exception ex )		{			handler.sendEmptyMessage( 9 );		}		finally		{			if( connection != null )			{				connection.disconnect();			}		}	}		private void register()	{		showView_1();	}		private void judgeInput()	{		Information.Phone = textLoginPhone.getText().toString();		if( Tool.judgePhone( Information.Phone ) == false )		{			showError( "手机号输入不正确" );			return;		}				Information.Password = textPassword.getText().toString();		if( Information.Password.equals( "" ) )		{			showError( "请输入密码" );			return;		}				startLogin();	}		private void startCheckPhone()	{		if( Tool.isNetworkConnected( this ) == true )		{			dialog = new Dialog( this, R.style.dialog_progress );			LayoutInflater inflater = LayoutInflater.from( this );  			View view = inflater.inflate( R.layout.dialog_progress, null );			TextView textView = ( TextView ) view.findViewById( R.id.dialog_textview );			textView.setText( "正在验证" );						WindowManager.LayoutParams layoutParams = dialog.getWindow().getAttributes();			layoutParams.alpha = 0.8f;			dialog.getWindow().setAttributes( layoutParams );			dialog.setContentView( view );			dialog.setCancelable( false );			dialog.setOnKeyListener			(				new OnKeyListener()				{					public boolean onKey( DialogInterface dialog, int keyCode, KeyEvent event ) 					{						if( keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0 )						{							if( connection != null )							{								connection.disconnect();							}							dialog.dismiss();							return true;						}						return false;					}				}			);			dialog.show();						new Thread	    	(	    		new Thread()	    		{	    			public void run()	    			{	    				doCheckPhone();	    			}	    		}	    	).start();		}		else		{			showError( "网络不可用，请打开网络" );		}	}		private void doCheckPhone()	{		final String urlString = Information.Server_Url + "/signup/check";		try		{			HttpURLConnection.setFollowRedirects( false );						URL url = new URL( urlString );			connection = ( HttpURLConnection ) url.openConnection();  			connection.setRequestProperty( "Connection", "keep-alive" );			connection.setRequestProperty( "Content-Type", "application/json" );			connection.setRequestMethod( "POST" );			connection.setConnectTimeout( 10000 );			connection.setReadTimeout( 30000 );			connection.setDoOutput( true );			connection.setDoInput( true );						JSONObject json = new JSONObject();			json.put( "phone", Information.Phone );						connection.getOutputStream().write( json.toString().getBytes() );						final int responseCode = connection.getResponseCode();			if( responseCode == 200 )			{				BufferedReader reader = new BufferedReader( new InputStreamReader( connection.getInputStream() ) );				String temp1 = null;				StringBuilder value = new StringBuilder();				while( ( temp1 = reader.readLine() ) != null )				{					value.append( temp1 );				}				JSONObject jsonObject = new JSONObject( value.toString() );				if( jsonObject.getInt( "result" ) == 2000 )				{					Information.Key1 = jsonObject.getString( "key" );					handler.sendEmptyMessage( 6 );				}				else				{					handler.sendEmptyMessage( 4 );				}			}			else			{				handler.sendEmptyMessage( 5 );			}		}		catch( Exception ex )		{			ex.printStackTrace();			handler.sendEmptyMessage( 5 );		}		finally		{			if( connection != null )			{				connection.disconnect();			}		}	}		private void doSendTestCode()	{		final String urlString = Information.Server_Url + "/signup/verify";		try		{			HttpURLConnection.setFollowRedirects( false );						URL url = new URL( urlString );			connection = ( HttpURLConnection ) url.openConnection();  			connection.setRequestProperty( "Connection", "keep-alive" );			connection.setRequestProperty( "Content-Type", "application/json" );			connection.setRequestMethod( "POST" );			connection.setConnectTimeout( 10000 );			connection.setReadTimeout( 30000 );			connection.setDoOutput( true );			connection.setDoInput( true );						JSONObject json = new JSONObject();			json.put( "phone", Information.Phone );			json.put( "key", Information.Key1 );						connection.getOutputStream().write( json.toString().getBytes() );						final int responseCode = connection.getResponseCode();			if( responseCode == 200 )			{				BufferedReader reader = new BufferedReader( new InputStreamReader( connection.getInputStream() ) );				String temp1 = null;				StringBuilder value = new StringBuilder();				while( ( temp1 = reader.readLine() ) != null )				{					value.append( temp1 );				}				JSONObject jsonObject = new JSONObject( value.toString() );				if( jsonObject.getInt( "result" ) == 2000 )				{					Information.Key2 = jsonObject.getString( "key" );					handler.sendEmptyMessage( 7 );				}				else				{					handler.sendEmptyMessage( 5 );				}			}			else			{				handler.sendEmptyMessage( 5 );			}		}		catch( Exception ex )		{			ex.printStackTrace();			handler.sendEmptyMessage( 5 );		}		finally		{			if( connection != null )			{				connection.disconnect();			}		}	}		private void startSendCode()	{		new Thread    	(    		new Thread()    		{    			public void run()    			{    				doSendCode();    			}    		}    	).start();	}		private void doSendCode()	{		final String urlString = Information.Server_Url + "/invite/validate";		try		{			HttpURLConnection.setFollowRedirects( false );						URL url = new URL( urlString );			connection = ( HttpURLConnection ) url.openConnection();  			connection.setRequestProperty( "Connection", "keep-alive" );			connection.setRequestProperty( "Content-Type", "application/json" );			connection.setRequestMethod( "POST" );			connection.setConnectTimeout( 10000 );			connection.setReadTimeout( 30000 );			connection.setDoOutput( true );			connection.setDoInput( true );						JSONObject json = new JSONObject();			json.put( "code", inviteCode );						connection.getOutputStream().write( json.toString().getBytes() );						final int responseCode = connection.getResponseCode();			if( responseCode == 200 )			{				BufferedReader reader = new BufferedReader( new InputStreamReader( connection.getInputStream() ) );				String temp1 = null;				StringBuilder value = new StringBuilder();				while( ( temp1 = reader.readLine() ) != null )				{					value.append( temp1 );				}				JSONObject jsonObject = new JSONObject( value.toString() );				if( jsonObject.getInt( "result" ) == 9000 )				{					doSendTestCode();				}				else				{					handler.sendEmptyMessage( 12 );				}			}			else			{				handler.sendEmptyMessage( 12 );			}		}		catch( Exception ex )		{			ex.printStackTrace();			handler.sendEmptyMessage( 12 );		}		finally		{			if( connection != null )			{				connection.disconnect();			}		}	}		private void startLogin()	{		if( Tool.isNetworkConnected( this ) == true )		{			dialog = new Dialog( StartActivity.this, R.style.dialog_progress );			LayoutInflater inflater = LayoutInflater.from( StartActivity.this );  			View view = inflater.inflate( R.layout.dialog_progress, null );			TextView textView = ( TextView ) view.findViewById( R.id.dialog_textview );			textView.setText( "正在登录" );						WindowManager.LayoutParams layoutParams = dialog.getWindow().getAttributes();			layoutParams.alpha = 0.8f;			dialog.getWindow().setAttributes( layoutParams );			dialog.setContentView( view );			dialog.setCancelable( false );			dialog.setOnKeyListener			(				new OnKeyListener()				{					public boolean onKey( DialogInterface dialog, int keyCode, KeyEvent event ) 					{						if( keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0 )						{							if( connection != null )							{								connection.disconnect();							}							dialog.dismiss();							return true;						}						return false;					}				}			);			dialog.show();						new Thread	    	(	    		new Thread()	    		{	    			public void run()	    			{	    				doLogin();	    			}	    		}	    	).start();		}		else		{			Toast.makeText( StartActivity.this, "网络不可用，请打开网络", Toast.LENGTH_SHORT ).show();		}	}		private void doLogin()	{		String urlString = Information.Server_Url + "/api/token?username=" + Information.Phone + "&password=" + Information.Password;		String device_token = UmengRegistrar.getRegistrationId( this );		if( device_token != null && !device_token.equals( "" ) )		{			hasGetDevice = true;			urlString += "&device=" + device_token;		}		else		{			urlString += "&device=" + "";		}		try		{			HttpURLConnection.setFollowRedirects( false );						URL url = new URL( urlString );			connection = ( HttpURLConnection ) url.openConnection();  			connection.setRequestProperty( "Connection", "keep-alive" );			connection.setRequestMethod( "GET" );			connection.setConnectTimeout( 10000 );			connection.setReadTimeout( 30000 );			connection.connect();			final int responseCode = connection.getResponseCode();			if( responseCode == 200 )			{				BufferedReader reader = new BufferedReader( new InputStreamReader( connection.getInputStream() ) );				String temp1 = null;				StringBuilder value = new StringBuilder();				while( ( temp1 = reader.readLine() ) != null )				{					value.append( temp1 );				}				JSONObject jsonObject = new JSONObject( value.toString() );				if( jsonObject.getInt( "result" ) == 1000 )				{					Information.Id = jsonObject.getString( "id" );					Information.Token = jsonObject.getString( "token" );					handler.sendEmptyMessage( 0 );				}				else if( jsonObject.getInt( "result" ) == 1001 )				{					handler.sendEmptyMessage( 9 );				}				else				{					handler.sendEmptyMessage( 10 );				}			}			else			{				handler.sendEmptyMessage( 1 );			}		}		catch( Exception ex )		{			ex.printStackTrace();			handler.sendEmptyMessage( 1 );		}		finally		{			if( connection != null )			{				connection.disconnect();			}		}	}	/**	 *  View_1	 */	private void showView_1()	{		setContentView( R.layout.register_1 );		nowView = NowView.View_1;				buttonBack1 = ( Button ) findViewById( R.id.register_1_button_back );		buttonNext1 = ( Button ) findViewById( R.id.register_1_button_next );		textPhone = ( EditText ) findViewById( R.id.register_1_phone );		textPhone.setText( Information.Phone );		textPassword1 = ( EditText ) findViewById( R.id.register_1_password1 );		textPassword1.setText( Information.Password );		textPassword2 = ( EditText ) findViewById( R.id.register_1_password2 );		textPassword2.setText( Information.Password );		textCode = ( EditText ) findViewById( R.id.register_1_code );		textCode.setText( inviteCode );		textInviteName = ( EditText ) findViewById( R.id.register_1_invite );		textInviteName.setVisibility( View.INVISIBLE );//		textInviteName.setText( inviteName );				buttonBack1.setText( "<  " );		buttonBack1.setOnClickListener		(			new OnClickListener()			{				public void onClick( View view )				{					if( Tool.isFastDoubleClick() )					{						return;					}					back1();				}							}		);				buttonNext1.setOnClickListener		(			new OnClickListener()			{				public void onClick( View view )				{					if( Tool.isFastDoubleClick() )					{						return;					}					next1();				}							}		);	}		private void back1()	{		initView();	}		private void judgePhone1()	{		Information.Phone = textPhone.getText().toString();		if( Tool.judgePhone( Information.Phone ) == false )		{			showError( "手机号输入不正确" );			return;		}				Information.Password = textPassword1.getText().toString();		if( Tool.judgeTextInput( Information.Password.length(), 16, 6 ) == false )		{			showError( "密码在6-16位之间" );			return;		}				String password2 = textPassword2.getText().toString();		if( !password2.equals( Information.Password ) )		{			showError( "两次密码不一致" );			return;		}				inviteCode = textCode.getText().toString();		if( inviteCode.equals( "" ) )		{			showError( "请输入邀请码" );			return;		}		//		inviteName = textInviteName.getText().toString();//		if( inviteCode.equals( "" ) )//		{//			showError( "请输入邀请人姓名" );//			return;//		}				startCheckPhone();	}		private void next1()	{		judgePhone1();	}	/////////////////////////////////////////////	/**	 *  View_2	 */	private void showView_2()	{		setContentView( R.layout.register_2 );		nowView = NowView.View_2;				buttonBack2 = ( Button ) findViewById( R.id.register_2_button_back );		buttonNext2 = ( Button ) findViewById( R.id.register_2_button_next );		imageHead = ( ImageView ) findViewById( R.id.register_2_head );		imageText = ( TextView ) findViewById( R.id.register_2_head_text );		buttonMale = ( ImageView ) findViewById( R.id.register_2_button_sex_male );		buttonFemale = ( ImageView ) findViewById( R.id.register_2_button_sex_female );		textName = ( EditText ) findViewById( R.id.register_2_name );		textName.setText( Information.Name );		textBirthday = ( EditText ) findViewById( R.id.register_2_birthday );		textBirthday.setText( Information.Birthday );		textPKU = ( Button ) findViewById( R.id.register_2_pku );		textPKU.setText( Information.PKU_Value );		textPKU.setOnClickListener		(			new OnClickListener()			{	            public void onClick( View view )	            {	            	if( Tool.isFastDoubleClick() )					{						return;					}	            	showChoosePKU1();	            }			}				);				textNowHome = ( EditText ) findViewById( R.id.register_2_now_place );		textNowHome.setText( Information.Now_Home );		textOldHome = ( EditText ) findViewById( R.id.register_2_old_place );		textOldHome.setText( Information.Old_Home );		textQQ = ( EditText ) findViewById( R.id.register_2_qq );		textQQ.setText( Information.QQ );				buttonBack2.setText( "<  " );		buttonBack2.setOnClickListener		(			new OnClickListener()			{				public void onClick( View view )				{					if( Tool.isFastDoubleClick() )					{						return;					}					back2();				}							}		);				buttonNext2.setOnClickListener		(			new OnClickListener()			{				public void onClick( View view )				{					if( Tool.isFastDoubleClick() )					{						return;					}					next2();				}							}		);				imageHead.setOnClickListener		(			new OnClickListener()			{				public void onClick( View view )				{					if( Tool.isFastDoubleClick() )					{						return;					}					changeHead();				}							}		);				buttonMale.setOnClickListener		(			new OnClickListener()			{				public void onClick( View view )				{					if( Tool.isFastDoubleClick() )					{						return;					}					changeSex( 1 );				}							}		);				buttonFemale.setOnClickListener		(			new OnClickListener()			{				public void onClick( View view )				{					if( Tool.isFastDoubleClick() )					{						return;					}					changeSex( 0 );				}							}		);				showHead();		changeSex( Information.Sex );	}		private void showChoosePKU1()	{		indexPKU1 = Information.PKU_Index;		dialog1 = new AlertDialog.Builder( this )	    .setTitle( "选择北大所在院系" )	    .setSingleChoiceItems	    ( 	    	Information.PKU1, indexPKU1, new DialogInterface.OnClickListener() 			{          			    public void onClick( DialogInterface dialog, int which ) 			    {			    	indexPKU1 = which;			    }			}  	    )	    .setPositiveButton	    (	    	"确定",	        new DialogInterface.OnClickListener()	    	{		         public void onClick( DialogInterface dialog, int which ) 		         {		        	 Information.PKU_Index = indexPKU1;		        	 textPKU.setText( Information.PKU1[ indexPKU1 ] );		        	 dialog.dismiss();		         }	        }	    )	    .setNegativeButton	    ( 	    	"取消", 	    	new DialogInterface.OnClickListener() 			{				public void onClick( DialogInterface dialog, int which ) 				{						dialog.dismiss();				}			}		)	    .create();			    dialog1.show();	}	//	private void showChoosePKU2()//	{//		indexPKU2 = Information.PKU_Index2;//		dialog2 = new AlertDialog.Builder( this )//	    .setTitle( "选择北大所在系" )//	    .setSingleChoiceItems//	    ( //	    	Information.PKU2[ indexPKU1 ], indexPKU2, new DialogInterface.OnClickListener() //			{          //			    public void onClick( DialogInterface dialog, int which ) //			    {//			    	indexPKU2 = which;//			    }//			}  //	    )//	    .setPositiveButton//	    (//	    	"确定",//	        new DialogInterface.OnClickListener()//	    	{//		         public void onClick( DialogInterface dialog, int which ) //		         {//		        	 Information.PKU_Index2 = indexPKU2;//		        	 //		        	 dialog.dismiss();//		         }//	        }//	    )//	    .setNegativeButton//	    ( //	    	"取消", //	    	new DialogInterface.OnClickListener() //			{//				public void onClick( DialogInterface dialog, int which ) //				{	//					dialog.dismiss();//					showChoosePKU1();//				}//			}//		)//	    .create();//		//	    dialog2.show();//	}		private void showHead()	{		if( Information.HeadUrl.equals( "" ) )		{			imageText.setVisibility( View.VISIBLE );		}		else		{			imageText.setVisibility( View.GONE );			try 			{				imageHead.setImageBitmap( BitmapFactory.decodeStream( new FileInputStream( saveUrl ) ) );			} 			catch( Exception e ) 			{				imageText.setVisibility( View.VISIBLE );			}		}	}		@SuppressWarnings("deprecation")	private void changeHead()	{		View view = getLayoutInflater().inflate( R.layout.photo_choose_dialog, null );		dialog = new Dialog( this, R.style.transparentFrameWindowStyle );		dialog.setContentView( view, new LayoutParams( LayoutParams.MATCH_PARENT,LayoutParams.WRAP_CONTENT ) );				Button button1 = ( Button ) view.findViewById( R.id.photo_choose_dialog_button1 );		button1.setOnClickListener		(			new OnClickListener()			{				public void onClick( View view )				{					if( Tool.isFastDoubleClick() )					{						return;					}					chooseFromGallery();					dialog.dismiss();				}			}		);				Button button2 = ( Button ) view.findViewById( R.id.photo_choose_dialog_button2 );		button2.setOnClickListener		(			new OnClickListener()			{				public void onClick( View view )				{					if( Tool.isFastDoubleClick() )					{						return;					}					chooseFromCamera();					dialog.dismiss();				}			}		);				Button button3 = ( Button ) view.findViewById( R.id.photo_choose_dialog_button3 );		button3.setOnClickListener		(			new OnClickListener()			{				public void onClick( View view )				{					if( Tool.isFastDoubleClick() )					{						return;					}					dialog.dismiss();				}			}		);				Window window = dialog.getWindow();		// 设置显示动画		window.setWindowAnimations( R.style.main_menu_animstyle );		WindowManager.LayoutParams wl = window.getAttributes();		wl.x = 0;		wl.y = getWindowManager().getDefaultDisplay().getHeight();		// 以下这两句是为了保证按钮可以水平满屏		wl.width = ViewGroup.LayoutParams.MATCH_PARENT;		wl.height = ViewGroup.LayoutParams.WRAP_CONTENT;		// 设置显示位置		dialog.onWindowAttributesChanged( wl );		// 设置点击外围解散		dialog.setCanceledOnTouchOutside( true );		dialog.show();	}		private void chooseFromCamera()	{		Intent getImageByCamera = new Intent( "android.media.action.IMAGE_CAPTURE" );   		ContentValues value = new ContentValues();		photoUri = this.getContentResolver().insert( MediaStore.Images.Media.EXTERNAL_CONTENT_URI, value );		getImageByCamera.putExtra( android.provider.MediaStore.EXTRA_OUTPUT, photoUri );		startActivityForResult( getImageByCamera, 1 );	}		private void chooseFromGallery()	{		Intent getImage = new Intent( Intent.ACTION_GET_CONTENT ); 		getImage.addCategory( Intent.CATEGORY_OPENABLE ); 		getImage.setType("image/*"); 		startActivityForResult( getImage, 0 );	}		private void startUploadHead()	{		if( Tool.isNetworkConnected( this ) == true )		{			dialog = new Dialog( StartActivity.this, R.style.dialog_progress );			LayoutInflater inflater = LayoutInflater.from( StartActivity.this );  			View view = inflater.inflate( R.layout.dialog_progress, null );			TextView textView = ( TextView ) view.findViewById( R.id.dialog_textview );			textView.setText( "正在注册" );						WindowManager.LayoutParams layoutParams = dialog.getWindow().getAttributes();			layoutParams.alpha = 0.8f;			dialog.getWindow().setAttributes( layoutParams );			dialog.setContentView( view );			dialog.setCancelable( false );			dialog.setOnKeyListener			(				new OnKeyListener()				{					public boolean onKey( DialogInterface dialog, int keyCode, KeyEvent event ) 					{						if( keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0 )						{							if( connection != null )							{								connection.disconnect();							}							dialog.dismiss();							return true;						}						return false;					}				}			);			dialog.show();						new Thread	    	(	    		new Thread()	    		{	    			public void run()	    			{	    				doUploadHead();	    			}	    		}	    	).start();		}		else		{			Toast.makeText( StartActivity.this, "网络不可用，请打开网络", Toast.LENGTH_SHORT ).show();		}	}		private void doUploadHead()	{		final String urlString = Information.Server_Url + "/signup/upload?phone=" + Information.Phone + "&key=" + Information.Key2 + "&code=123456";		try		{			URL url = new URL( urlString );			connection = ( HttpURLConnection ) url.openConnection();  			connection.setRequestProperty( "Connection", "keep-alive" );			connection.setRequestMethod( "POST" );			connection.setConnectTimeout( 10000 );			connection.setReadTimeout( 60000 );			connection.setDoOutput( true );			            String symbol = Information.HeadUrl.substring( Information.HeadUrl.lastIndexOf( "." ) + 1, Information.HeadUrl.length() );            if( symbol.compareToIgnoreCase( "jpg" ) == 0 || symbol.compareToIgnoreCase( "jpeg" ) == 0 )            {                symbol = "jpeg";            }            else            {            	symbol = "png";            }			String contentDisposition = "Content-Disposition: form-data; name=\"head\"; filename=\"" + Information.Phone + "." + symbol + "\"";            String contentType = "Content-Type: image/" + symbol;            String BOUNDRY = "----WebKitFormBoundaryabcdefghijklmnop";            connection.setRequestProperty( "Content-Type", "multipart/form-data; boundary=" + BOUNDRY );                        DataOutputStream dataOS = new DataOutputStream( connection.getOutputStream());            dataOS.writeBytes( "--" + BOUNDRY + "\r\n" );            dataOS.writeBytes( contentDisposition + "\r\n" );            dataOS.writeBytes( contentType + "\r\n\r\n" );                        FileInputStream fis = new FileInputStream( saveUrl );              byte[] buffer = new byte[ 1024 ];            int count = 0;              while( ( count = fis.read( buffer ) ) != -1 )              {                  dataOS.write( buffer, 0, count );            }            dataOS.writeBytes( "\r\n--" + BOUNDRY + "--\r\n" );                        dataOS.flush();            dataOS.close();            fis.close();			final int responseCode = connection.getResponseCode();			if( responseCode == 200 )			{				BufferedReader reader = new BufferedReader( new InputStreamReader( connection.getInputStream() ) );				String temp1 = null;				StringBuilder value = new StringBuilder();				while( ( temp1 = reader.readLine() ) != null )				{					value.append( temp1 );				}								JSONObject jsonObject = new JSONObject( value.toString() );				if( jsonObject.getInt( "result" ) == 2000 )				{					Information.HeadUrl = jsonObject.getString( "headUrl" );					handler.sendEmptyMessage( 2 );				}				else				{					handler.sendEmptyMessage( 5 );				}			}			else			{				handler.sendEmptyMessage( 5 );			}		}		catch( Exception ex )		{			ex.printStackTrace();			handler.sendEmptyMessage( 5 );		}		finally		{			if( connection != null )			{				connection.disconnect();			}		}	}		private void startRegister()	{		new Thread    	(    		new Thread()    		{    			public void run()    			{    				doReister();    			}    		}    	).start();	}		private void doReister()	{		final String urlString = Information.Server_Url + "/signup/";		try		{			URL url = new URL( urlString );			connection = ( HttpURLConnection ) url.openConnection();  			connection.setRequestProperty( "Cookie", "" );  			connection.setRequestProperty( "Connection", "keep-alive" );			connection.setRequestProperty( "Content-Type", "application/json" );			connection.setRequestMethod( "POST" );			connection.setConnectTimeout( 10000 );			connection.setReadTimeout( 30000 );			connection.setDoOutput( true );			connection.setDoInput( true );						JSONObject json = new JSONObject();			json.put( "key", Information.Key2 );			json.put( "inviteCode", inviteCode );			json.put( "code", "123456" );			json.put( "username", Information.Phone );			json.put( "password", Information.Password );			json.put( "name", Information.Name );			json.put( "headUrl", Information.HeadUrl );			json.put( "sex", Information.Sex );			json.put( "birthyear", Information.Birthday );			json.put( "pku", Information.PKU2[ Information.PKU_Index ]);			json.put( "hometown", Information.Old_Home );			json.put( "base", Information.Now_Home );			json.put( "qq", Information.QQ );			json.put( "company", Information.Company );			json.put( "department", Information.Part );			json.put( "job", Information.Job );			String device_token = UmengRegistrar.getRegistrationId( this );			if( device_token != null && !device_token.equals( "" ) )			{				hasGetDevice = true;				json.put( "device", device_token );			}			else			{				json.put( "device", "" );			}			JSONArray array = new JSONArray();			for( int i = 0; i < 5; i ++ )			{				array.put( Information.Tag[ i ] );			}			json.put( "tags", array );			connection.getOutputStream().write( json.toString().getBytes() );						final int responseCode = connection.getResponseCode();			if( responseCode == 200 )			{				BufferedReader reader = new BufferedReader( new InputStreamReader( connection.getInputStream() ) );				String temp1 = null;				StringBuilder value = new StringBuilder();				while( ( temp1 = reader.readLine() ) != null )				{					value.append( temp1 );				}				JSONObject jsonObject = new JSONObject( value.toString() );				if( jsonObject.getInt( "result" ) == 2000 )				{					Information.Id = jsonObject.getString( "id" );					Information.Token = jsonObject.getString( "token" );					handler.sendEmptyMessage( 3 );				}				else				{					handler.sendEmptyMessage( 5 );				}			}			else			{				handler.sendEmptyMessage( 5 );			}		}		catch( Exception ex )		{			ex.printStackTrace();			handler.sendEmptyMessage( 5 );		}		finally		{			if( connection != null )			{				connection.disconnect();			}		}	}		protected void onActivityResult( int requestCode, int resultCode, Intent data ) 	{		super.onActivityResult( requestCode, resultCode, data );		ContentResolver resolver = getContentResolver(); 		if( requestCode == 0 ) 		{			try 			{				Cursor cursor = resolver.query( data.getData(), null, null, null, null );                            if( cursor != null )                {                	cursor.moveToFirst();                	chooseUrl = cursor.getString( 1 );                	cursor.close();                	                	checkFile();                }                else if( data.getData() != null )                {                	chooseUrl = data.getData().getPath();                	checkFile();                }			} 			catch( Exception ex ) {}		}		else if( requestCode == 1 )		{            try             {                Cursor cursor = resolver.query( photoUri, null, null, null, null );                            if( cursor != null )                {                	cursor.moveToFirst();                	chooseUrl = cursor.getString( 1 );                	cursor.close();                	                	checkFile();                }            }             catch( Exception ex ) {}		}	}		private void checkFile()	{		try		{			String symbol = chooseUrl.substring( chooseUrl.lastIndexOf( "." ) + 1, chooseUrl.length() );			if( symbol.compareToIgnoreCase( "jpg" ) == 0 || symbol.compareToIgnoreCase( "jpeg" ) == 0 || symbol.compareToIgnoreCase( "png" ) == 0 )			{				FileInputStream stream = new FileInputStream( new File( chooseUrl ) );		    	if( stream.available() > 10000000 )		    	{		    		stream.close();		    		showError( "图片不能超过10M" );		    	}		    	else		    	{		    		stream.close();		    		if( savePhotoToNative() == true )		        	{		    			showHead();		        	}		    		else		    		{		    			showError( "读取图片失败" );		    		}		    	}			}			else			{				showError( "只支持jpg和png格式图片" );			}		}		catch( Exception ex ) {}	}		/**	 *  保存用户自己的头像，100像素，上传成功之前	 */	private boolean savePhotoToNative()	{		try		{			Bitmap oldBitmap = BitmapFactory.decodeStream( new FileInputStream( new File( chooseUrl ) ) );			oldBitmap = Tool.roateBitmap( oldBitmap, Tool.getPictureDegree( chooseUrl ) );			Bitmap newBitmap = Tool.zoomBitmap( oldBitmap, 400 );			String symbol = chooseUrl.substring( chooseUrl.lastIndexOf( "." ) + 1, chooseUrl.length() );			File file = new File( Information.Image_Path + Information.Phone + "." + symbol  );			if( !file.exists() )			{				file.createNewFile();			}			BufferedOutputStream stream = new BufferedOutputStream( new FileOutputStream( file ) );			if( symbol.compareToIgnoreCase( "jpg" ) == 0 || symbol.compareToIgnoreCase( "jpeg" ) == 0 )			{				newBitmap.compress( Bitmap.CompressFormat.JPEG, 100, stream );			}			else			{				newBitmap.compress( Bitmap.CompressFormat.PNG, 100, stream );			}			Information.HeadUrl = Information.Image_Path + Information.Phone + "." + symbol;			saveUrl = Information.HeadUrl;			stream.flush();			stream.close();			return true;		}		catch( Exception ex )		{			return false;		}	}		private void changeSex( int sex )	{		Information.Sex = sex;		if( sex == 1 )		{			buttonMale.setImageResource( R.drawable.male_color );			buttonFemale.setImageResource( R.drawable.female_gray );		}		else if( sex == 0 )		{			buttonMale.setImageResource( R.drawable.male_gray );			buttonFemale.setImageResource( R.drawable.female_color );		}		else		{			buttonMale.setImageResource( R.drawable.male_gray );			buttonFemale.setImageResource( R.drawable.female_gray );		}	}		private void back2()	{		showView_1();	}		private void next2()	{		Information.Name = textName.getText().toString();		if( !Tool.judgeTextInput( Information.Name.length(), 6, 2 ) )		{			showError( "姓名2~6个字" );			return;		}				if( saveUrl.equals( "" ) )		{			showError( "请选择头像" );			return;		}				if( Information.Sex > 1 )		{			showError( "请选择性别" );			return;		}				Information.Birthday = textBirthday.getText().toString();		if( Tool.judgeTextInput( Information.Birthday.length(), 4, 4 ) )		{			try			{				int number = Integer.parseInt( Information.Birthday );				if( number < 1900 )				{					showError( "生日输入不正确" );					return;				}			}			catch( Exception ex )			{				showError( "生日输入不正确" );				return;			}		}		else		{			showError( "生日输入不正确" );			return;		}		Information.PKU_Value = textPKU.getText().toString();		if( Information.PKU_Value.equals( "北大所在院系" ) )		{			showError( "请输入院系" );			return;		}		Information.PKU_Value = Information.PKU2[ Information.PKU_Index ];		Information.Now_Home = textNowHome.getText().toString();		if( !Tool.judgeTextInput( Information.Now_Home.length(), 10, 1 ) )		{			showError( "现居地10个字以内" );			return;		}		Information.Old_Home = textOldHome.getText().toString();		if( !Tool.judgeTextInput( Information.Old_Home.length(), 10, 0 ) )		{			showError( "故乡10个字以内" );			return;		}		Information.QQ = textQQ.getText().toString();		if( !Tool.judgeTextInput( Information.QQ.length(), 40, 1 ) )		{			showError( "网络联系方式40个字以内" );			return;		}				showView_3();	}	/**	 *  View_3	 */	private void showView_3()	{		setContentView( R.layout.register_3 );		nowView = NowView.View_3;				buttonBack3 = ( Button ) findViewById( R.id.register_3_button_back );		buttonNext3 = ( Button ) findViewById( R.id.register_3_button_next );		textCompany = ( EditText ) findViewById( R.id.register_3_job1 );		textCompany.setText( Information.Company );		textPart = ( EditText ) findViewById( R.id.register_3_job2 );		textPart.setText( Information.Part );		textJob = ( EditText ) findViewById( R.id.register_3_job3 );		textJob.setText( Information.Job );				buttonBack3.setText( "<  " );		buttonBack3.setOnClickListener		(			new OnClickListener()			{				public void onClick( View view )				{					if( Tool.isFastDoubleClick() )					{						return;					}					back3();				}							}		);				buttonNext3.setOnClickListener		(			new OnClickListener()			{				public void onClick( View view )				{					if( Tool.isFastDoubleClick() )					{						return;					}					next3();				}							}		);	}		private void back3()	{		showView_2();	}		private void next3()	{		Information.Company = textCompany.getText().toString();		if( !Tool.judgeTextInput( Information.Company.length(), 20, 1 ) )		{			showError( "工作单位输入不正确" );			return;		}		Information.Part = textPart.getText().toString();		if( !Tool.judgeTextInput( Information.Part.length(), 10, 0 ) )		{			showError( "所在部门10个字以内" );			return;		}		Information.Job = textJob.getText().toString();		if( !Tool.judgeTextInput( Information.Job.length(), 10, 0 ) )		{			showError( "职位10个字以内" );			return;		}				showView_4();	}	/**	 *  View_4	 */	private void showView_4()	{		setContentView( R.layout.register_4 );		nowView = NowView.View_4;				buttonBack4 = ( Button ) findViewById( R.id.register_4_button_back );		buttonFinish = ( Button ) findViewById( R.id.register_4_button_finish );		textTag1 = ( EditText ) findViewById( R.id.register_4_tag1 );		textTag1.setText( Information.Tag[ 0 ] );		textTag2 = ( EditText ) findViewById( R.id.register_4_tag2 );		textTag2.setText( Information.Tag[ 1 ] );		textTag3 = ( EditText ) findViewById( R.id.register_4_tag3 );		textTag3.setText( Information.Tag[ 2 ] );		textTag4 = ( EditText ) findViewById( R.id.register_4_tag4 );		textTag4.setText( Information.Tag[ 3 ] );		textTag5 = ( EditText ) findViewById( R.id.register_4_tag5 );		textTag5.setText( Information.Tag[ 4 ] );						buttonBack4.setText( "<  " );		buttonBack4.setOnClickListener		(			new OnClickListener()			{				public void onClick( View view )				{					if( Tool.isFastDoubleClick() )					{						return;					}					back4();				}							}		);				buttonFinish.setOnClickListener		(			new OnClickListener()			{				public void onClick( View view )				{					if( Tool.isFastDoubleClick() )					{						return;					}					judgeRegister();				}							}		);	}		private void back4()	{		showView_3();	}		private void judgeRegister()	{		Information.Tag[ 0 ] = textTag1.getText().toString();		if( !Tool.judgeTextInput( Information.Tag[ 0 ].length(), 6, 0 ) )		{			showError( "标签6个字以内" );			return;		}		Information.Tag[ 1 ] = textTag2.getText().toString();		if( !Tool.judgeTextInput( Information.Tag[ 1 ].length(), 6, 0 ) )		{			showError( "标签6个字以内" );			return;		}		Information.Tag[ 2 ] = textTag3.getText().toString();		if( !Tool.judgeTextInput( Information.Tag[ 2 ].length(), 6, 0 ) )		{			showError( "标签6个字以内" );			return;		}		Information.Tag[ 3 ] = textTag4.getText().toString();		if( !Tool.judgeTextInput( Information.Tag[ 3 ].length(), 6, 0 ) )		{			showError( "标签6个字以内" );			return;		}		Information.Tag[ 4 ] = textTag5.getText().toString();		if( !Tool.judgeTextInput( Information.Tag[ 4 ].length(), 6, 0 ) )		{			showError( "标签6个字以内" );			return;		}				startUploadHead();	}		private void showError( String text )	{		Toast.makeText( this, text, Toast.LENGTH_SHORT ).show();	}		public boolean onKeyDown( int keyCode, KeyEvent event )	{		if( keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0 )		{			switch( nowView )			{			case Login :				setResult( 1 );				finish();				break;			case View_1 :				initView();				break;			case View_2 :				showView_1();				break;			case View_3 :				showView_2();				break;			case View_4 :				showView_3();				break;			default :				break;			}			return true;		}		return false;	}		public void onResume() 	{		super.onResume();		MobclickAgent.onResume( this );	}		public void onPause()	{		super.onPause();		MobclickAgent.onPause( this );	}}