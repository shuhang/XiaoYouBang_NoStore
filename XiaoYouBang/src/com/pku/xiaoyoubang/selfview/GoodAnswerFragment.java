package com.pku.xiaoyoubang.selfview;import java.net.HttpURLConnection;import java.util.ArrayList;import java.util.List;import org.json.JSONObject;import android.app.Activity;import android.app.Dialog;import android.content.DialogInterface;import android.content.DialogInterface.OnKeyListener;import android.content.Intent;import android.content.SharedPreferences;import android.os.Bundle;import android.os.Handler;import android.os.Message;import android.support.v4.app.Fragment;import android.view.KeyEvent;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.view.WindowManager;import android.widget.AdapterView;import android.widget.AdapterView.OnItemClickListener;import android.widget.RelativeLayout;import android.widget.TextView;import android.widget.Toast;import com.pku.xiaoyoubang.R;import com.pku.xiaoyoubang.entity.AnswerEntity;import com.pku.xiaoyoubang.entity.QuestionEntity;import com.pku.xiaoyoubang.model.MyAnswerListAdapter;import com.pku.xiaoyoubang.model.MyAnswerListAdapter.MyAnswerListListener;import com.pku.xiaoyoubang.selfview.XListView.IXListViewListener;import com.pku.xiaoyoubang.tool.Information;import com.pku.xiaoyoubang.tool.Tool;import com.pku.xiaoyoubang.view.AnswerInfoActivity;import com.pku.xiaoyoubang.view.QuestionInfoActivity;import com.umeng.analytics.MobclickAgent;public class GoodAnswerFragment extends Fragment implements IXListViewListener, MyAnswerListListener{	private XListView answerListView;	private MyAnswerListAdapter adapter;		private int scrollPosition = 0;	private int scrollTop = 0;		private Dialog dialog;		private HttpURLConnection connection = null;		public static AnswerEntity selectedEntity;		private boolean firstLaunch = true;	private boolean firstRefresh = true;	/**	 *  	 */	private Handler handler;		public void onActivityCreated( Bundle savedInstanceState)	{		super.onActivityCreated( savedInstanceState );				handler = new Handler()		{			public void handleMessage( Message message )			{								switch( message.what )				{				case 0 : //Refresh success					storeRefreshTime();										refreshSuccess( ( String ) message.obj );										answerListView.stopRefresh();					if( firstRefresh )					{						firstRefresh = false;						answerListView.updateHeaderHeight( -120 );					}					answerListView.setPullLoadEnable( true );					break;				case 1 : //Load more sucess					loadMoreSuccess( ( String ) message.obj );										answerListView.setSelectionFromTop( scrollPosition, scrollTop );					answerListView.stopLoadMore();					break;				case 2 : //load info success					if( dialog != null )					{						dialog.dismiss();					}									try 					{						QuestionEntity questionEntity = new QuestionEntity();						Tool.loadQuestionInfoEntity( questionEntity, ( JSONObject ) message.obj );						showToQuestionInfo( questionEntity );					}					catch( Exception ex ) 					{						ex.printStackTrace();					}					break;				case 3 : //get list failed					showError( "加载失败" );					answerListView.stopRefresh();					if( firstRefresh )					{						firstRefresh = false;						answerListView.updateHeaderHeight( -120 );					}					answerListView.setPullLoadEnable( true );					break;				case 4 : //No net - refresh					answerListView.stopRefresh();					if( firstRefresh )					{						firstRefresh = false;						answerListView.updateHeaderHeight( -120 );					}					answerListView.setPullLoadEnable( true );					showError( "网络不可用，请打开网络" );					break;				case 5 : //No net - laod more					answerListView.stopLoadMore();					showError( "网络不可用，请打开网络" );					break;				case 6 : //get info failed					if( dialog != null )					{						dialog.dismiss();					}					showError( "加载失败" );					break;				case 7 : //load more failed					showError( "加载失败" );					answerListView.setSelectionFromTop( scrollPosition, scrollTop );					answerListView.stopLoadMore();					break;				}			}		};	}		public View onCreateView( LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState )	{		View view = inflater.inflate( R.layout.answer_list, null );				RelativeLayout layout = ( RelativeLayout ) view.findViewById( R.id.answer_list_layout );		layout.setVisibility( View.GONE );				answerListView = ( XListView ) view.findViewById( R.id.answer_list_list );		answerListView.setPullLoadEnable( true );		answerListView.setXListViewListener( this );		answerListView.setOnItemClickListener		(			new OnItemClickListener()			{				public void onItemClick( AdapterView<?> parent, View view, int position, long id )				{					if( Tool.isFastDoubleClick() )					{						return;					}					showAnswerInfo( position - 1 );				}			}		);				SharedPreferences shared = getActivity().getSharedPreferences( "whole2", Activity.MODE_PRIVATE );		answerListView.setRefreshTime( shared.getString( "good_answer_update_time", "" ) );				return view;	}		public void loadAnswerList()	{		if( firstLaunch == true )		{			firstLaunch = false;						adapter = new MyAnswerListAdapter( getActivity(), Tool.loadLocalGoodAnswerListFromFile( getActivity() ), 1 );			adapter.setMyListener( this );			answerListView.setAdapter( adapter );						if( adapter.getCount() == 0 )			{				answerListView.setPullLoadEnable( false );			}							answerListView.updateHeaderHeight( 120 );			answerListView.startRefresh();		}	}		/**	 * 	 */	private void storeRefreshTime()	{		SharedPreferences shared = getActivity().getSharedPreferences( "whole2", Activity.MODE_PRIVATE );		SharedPreferences.Editor editor = shared.edit();		editor.putString( "good_answer_update_time", Tool.getNowTime() );		editor.commit();				answerListView.setRefreshTime( Tool.getNowTime() );	}	/**	 *  先加载本地的所有缓存	 *  然后开始刷新	 */	private void showAnswerInfo( int position )	{		Intent intent = new Intent( getActivity(), AnswerInfoActivity.class );		intent.putExtra( "type", 5 );		selectedEntity = adapter.getList().get( position );				startActivityForResult( intent, 1003 );	}		private void showToQuestionInfo( QuestionEntity questionEntity )	{		Intent intent = new Intent( getActivity(), QuestionInfoActivity.class );		intent.putExtra( "type", 3 );		intent.putExtra( "question", questionEntity );		startActivityForResult( intent, 1002 );	}	/**	 *  Load new question list from net	 */	private void loadNewAnswerListFromNet()	{		try		{			final String urlString = Information.Server_Url + "/api/answers/good?token=" + Information.Token;						JSONObject json = new JSONObject();			json.put( "size", 10 );			json.put( "before", "" );						JSONObject result = Tool.doPostWithUrl( urlString, json );			if( result == null )			{				handler.sendEmptyMessage( 3 );			}			else			{				if( result.getInt( "result" ) == 4000 )				{					Tool.writeGoodAnswerListToFile( result.getJSONArray( "data" ).toString() );					Message message = handler.obtainMessage();					message.what = 0;					message.obj = result.getJSONArray( "data" ).toString();					handler.sendMessage( message );				}				else				{					handler.sendEmptyMessage( 3 );				}			}		}		catch( Exception ex )		{			handler.sendEmptyMessage( 3 );		}	}	/**	 *  Load more question list from net	 */	private void loadMoreAnswerListFromNet()	{		try		{			final String urlString = Information.Server_Url + "/api/answers/good?token=" + Information.Token;						JSONObject json = new JSONObject();			json.put( "size", 10 );						if( adapter.getCount() > 0 )			{				AnswerEntity entity = ( AnswerEntity ) adapter.getItem( adapter.getCount() - 1 );				json.put( "before", entity.getModifyTime() );			}			else			{				json.put( "before", "" );			}						JSONObject result = Tool.doPostWithUrl( urlString, json );			if( result == null )			{				handler.sendEmptyMessage( 7 );			}			else			{				if( result.getInt( "result" ) == 4000 )				{					Message message = handler.obtainMessage();					message.what = 1;					message.obj = result.getJSONArray( "data" ).toString();					handler.sendMessage( message );				}				else				{					handler.sendEmptyMessage( 7 );				}			}		}		catch( Exception ex )		{			handler.sendEmptyMessage( 7 );		}	}	/**	 *  Load question info from net	 */	private void loadQuestionInfoFromNet( String id )	{		try		{			final String urlString = Information.Server_Url + "/api/question/" + id + "?token=" + Information.Token;			JSONObject result = Tool.doGetWithUrl( urlString );			if( result == null )			{				handler.sendEmptyMessage( 6 );			}			else			{				if( result.getInt( "result" ) == 3000 )				{					Message message = handler.obtainMessage();					message.what = 2;					message.obj = result;					handler.sendMessage( message );				}				else				{					handler.sendEmptyMessage( 6 );				}			}		}		catch( Exception ex )		{			handler.sendEmptyMessage( 6 );		}	}		private void showDialog()	{		dialog = new Dialog( getActivity(), R.style.dialog_progress );		LayoutInflater inflater = LayoutInflater.from( getActivity() );  		View view = inflater.inflate( R.layout.dialog_progress, null );		TextView textView = ( TextView ) view.findViewById( R.id.dialog_textview );		textView.setText( "正在加载问题详情" );				WindowManager.LayoutParams layoutParams = dialog.getWindow().getAttributes();		layoutParams.alpha = 0.8f;		dialog.getWindow().setAttributes( layoutParams );		dialog.setContentView( view );		dialog.setCancelable( false );		dialog.setOnKeyListener		(			new OnKeyListener()			{				public boolean onKey( DialogInterface dialog, int keyCode, KeyEvent event ) 				{					if( keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0 )					{						if( connection != null )						{							connection.disconnect();						}						dialog.dismiss();						return true;					}					return false;				}			}		);		dialog.show();	}	public void onRefresh() 	{		if( Tool.isNetworkConnected( getActivity() ) == true )		{			new Thread			(				new Thread()				{					public void run()					{						loadNewAnswerListFromNet();					}				}			).start();		}		else		{			handler.sendEmptyMessage( 4 );		}	}	public void onLoadMore() 	{		if( Tool.isNetworkConnected( getActivity() ) == true )		{			scrollPosition = answerListView.getFirstVisiblePosition();			View v = answerListView.getChildAt( 0 );	        scrollTop = ( v == null ) ? 0 : v.getTop();			new Thread			(				new Thread()				{					public void run()					{						loadMoreAnswerListFromNet();					}				}			).start();		}		else		{			handler.sendEmptyMessage( 5 );		}	}		public void refreshSuccess( String jsonString )	{		adapter = new MyAnswerListAdapter( getActivity(), Tool.loadLocalAnswerListFromString( jsonString.toString(), getActivity() ), 1 );		adapter.setMyListener( this );		answerListView.setAdapter( adapter );		adapter.notifyDataSetChanged();	}	public void loadMoreSuccess( String jsonString )	{		List< AnswerEntity > oldList = new ArrayList< AnswerEntity >( adapter.getList() );		oldList.addAll( Tool.loadLocalAnswerListFromString( jsonString.toString(), getActivity() ) );		adapter = new MyAnswerListAdapter( getActivity(), oldList, 1 );		adapter.setMyListener( this );		answerListView.setAdapter( adapter );		adapter.notifyDataSetChanged();	}		private void showError( String text )	{		Toast.makeText( getActivity(), text, Toast.LENGTH_SHORT ).show();	}		public void onActivityResult( int requestCode, int resultCode, Intent data ) 	{		super.onActivityResult( requestCode, resultCode, data );		adapter.notifyDataSetChanged();	}		public void onResume() 	{		super.onResume();		loadAnswerList();	}		public void onPause()	{		super.onPause();		MobclickAgent.onPause( getActivity() );	}	public void clickQuestion( final int index ) 	{		if( Tool.isFastDoubleClick() )		{			return;		}		if( Tool.isNetworkConnected( getActivity() ) == true )		{			showDialog();						new Thread			(				new Thread()				{					public void run()					{						loadQuestionInfoFromNet( adapter.getList().get( index ).getQuestionId() );					}				}			).start();		}		else		{			showError( "网络不可用，请打开网络" );		}	}}