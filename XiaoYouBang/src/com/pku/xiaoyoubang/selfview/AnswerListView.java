/** * @file XListView.java * @package me.maxwin.view * @create Mar 18, 2012 6:28:41 PM * @author Maxwin * @description An ListView support (a) Pull down to refresh, (b) Pull up to load more. * 		Implement IXListViewListener, and see stopRefresh() / stopLoadMore(). */package com.pku.xiaoyoubang.selfview;import android.content.Context;import android.text.Spannable;import android.text.SpannableStringBuilder;import android.text.style.ForegroundColorSpan;import android.util.AttributeSet;import android.util.Log;import android.view.LayoutInflater;import android.view.MotionEvent;import android.view.View;import android.view.ViewTreeObserver.OnGlobalLayoutListener;import android.view.animation.DecelerateInterpolator;import android.widget.AbsListView;import android.widget.AbsListView.OnScrollListener;import android.widget.Button;import android.widget.ImageView;import android.widget.ListAdapter;import android.widget.ListView;import android.widget.RelativeLayout;import android.widget.Scroller;import android.widget.TextView;import com.nostra13.universalimageloader.core.ImageLoader;import com.pku.xiaoyoubang.R;import com.pku.xiaoyoubang.tool.Information;import com.pku.xiaoyoubang.tool.MyDatabaseHelper;import com.pku.xiaoyoubang.tool.Tool;import com.pku.xiaoyoubang.view.QuestionInfoActivity;public class AnswerListView extends ListView implements OnScrollListener {	private float mLastY = -1; // save event y	private Scroller mScroller; // used for scroll back	private OnScrollListener mScrollListener; // user's scroll listener	// the interface to trigger refresh and load more.	private IXListViewListener mListViewListener;	private Context context;	// -- header view	private XListViewHeader mHeaderView;	// header view content, use it to calculate the Header's height. And hide it	// when disable pull refresh.	private RelativeLayout mHeaderViewContent;	private TextView mHeaderTimeView;	private int mHeaderViewHeight; // header view's height	private boolean mEnablePullRefresh = true;	private boolean mPullRefreshing = false; // is refreashing.	// -- footer view	private XListViewFooter mFooterView;	private boolean mEnablePullLoad;	private boolean mPullLoading;	private boolean mIsFooterReady = false;	// total list items, used to detect is at the bottom of listview.	private int mTotalItemCount;	// for mScroller, scroll back from header or footer.	private int mScrollBack;	private final static int SCROLLBACK_HEADER = 0;	private final static int SCROLLBACK_FOOTER = 1;	private final static int SCROLL_DURATION = 400; // scroll back duration	private final static int PULL_LOAD_MORE_DELTA = 50; // when pull up >= 50px														// at bottom, trigger														// load more.	private final static float OFFSET_RADIO = 1.8f; // support iOS like pull		private View viewHeader;	private ImageView headImage;	private TextView textName;	private ImageView imageSex;	private TextView textPKU;	private TextView textCompany;	private TextView textJob;	private TextView textTime;	private TextView textQuestionTitle;	private TextView textQuestionInfo;	private TextView textInviteMe;	private TextView textMyInvite;	private ImageView headImage1;	private ImageView headImage2;	private ImageView headImage3;	private TextView textCommentTitle;	//private TextView textCommentTitleSymbol;	private TextView textCommentName1;	private TextView textCommentSymbol1;	private TextView textCommentInfo1;	private TextView textCommentName2;	private TextView textCommentSymbol2;	private TextView textCommentInfo2;	private TextView textCommentName3;	private TextView textCommentInfo3;	private TextView textCommentSymbol3;	private TextView textAnswerCount;	private Button buttonAddAnswer;	private Button buttonInvite;	private RelativeLayout layoutUser;	private RelativeLayout layoutComment;	private RelativeLayout layoutButton;	private TextView textEditTime;		private RelativeLayout layoutActList;	private ImageView actHeadImage1;	private ImageView actHeadImage2;	private ImageView actHeadImage3;	private TextView actTextTitle;	private TextView actTextName1;	private TextView actTextInfo1;	private TextView actTextSymbol1;	private TextView actTextName2;	private TextView actTextInfo2;	private TextView actTextSymbol2;	private TextView actTextName3;	private TextView actTextInfo3;	private TextView actTextSymbol3;	private TextView actTextTime1;	private TextView actTextTime2;	private TextView actTextTime3;	private TextView textPraiseCount;	private TextView textPraiseUser;	private TextView textTitleNo;	private TextView textCommentNo;	private RelativeLayout layoutPraise2;	private Button buttonPraise;	private Button buttonEdit;	private ImageView imagePraise;		private Button buttonAddAct;	private Button buttonAddComment;	private Button buttonAddSum;		//private View tempLine1;	private View tempLine2;	private View tempLine4;	private View tempLine5;	private View tempLine6;	private View viewBig1;	private View viewBig2;		private ImageLoader imageLoader;	/**	 * @param context	 */	public AnswerListView(Context context) {		super(context);		initWithContext(context);	}	public AnswerListView(Context context, AttributeSet attrs) {		super(context, attrs);		initWithContext(context);	}	public AnswerListView(Context context, AttributeSet attrs, int defStyle) {		super(context, attrs, defStyle);		initWithContext(context);	}	private void initWithContext(Context context) 	{		this.context = context;				this.imageLoader = ImageLoader.getInstance();				mScroller = new Scroller(context, new DecelerateInterpolator());		// XListView need the scroll event, and it will dispatch the event to		// user's listener (as a proxy).		super.setOnScrollListener(this);		// init header view		mHeaderView = new XListViewHeader(context);		mHeaderViewContent = (RelativeLayout) mHeaderView.findViewById(R.id.xlistview_header_content);		mHeaderTimeView = (TextView) mHeaderView.findViewById(R.id.xlistview_header_time);		addHeaderView(mHeaderView);				/**		 * 		 */		viewHeader = LayoutInflater.from( context ).inflate( R.layout.question_info_answer_list_header, null );		addHeaderView( viewHeader );				headImage = ( ImageView ) viewHeader.findViewById( R.id.question_info_answer_list_header_head );		if( !QuestionInfoActivity.entity.isInvisible() )		{			imageLoader.displayImage( Information.Server_Url + QuestionInfoActivity.entity.getUserHeadUrl(), headImage, Information.options );		}		else		{			headImage.setImageResource( R.drawable.head_hidden );		}		textName = ( TextView ) viewHeader.findViewById( R.id.question_info_answer_list_header_name );		if( QuestionInfoActivity.entity.isInvisible() )		{			textName.setText( "匿名用户" );		}		else		{			textName.setText( QuestionInfoActivity.entity.getUserName() );		}		imageSex = ( ImageView ) viewHeader.findViewById( R.id.question_info_answer_list_header_sex );		textPKU = ( TextView ) viewHeader.findViewById( R.id.question_info_answer_list_header_pku );		if( !QuestionInfoActivity.entity.isInvisible() )		{			if( QuestionInfoActivity.entity.getSex() == 1 )			{				imageSex.setImageResource( R.drawable.male_color );			}			else			{				imageSex.setImageResource( R.drawable.female_color );			}						textPKU.setText( QuestionInfoActivity.entity.getPKU() );		}		textCompany = ( TextView ) viewHeader.findViewById( R.id.question_info_answer_list_header_company );		textJob = ( TextView ) viewHeader.findViewById( R.id.question_info_answer_list_header_job );				textTime = ( TextView ) viewHeader.findViewById( R.id.question_info_answer_list_header_time );		textTime.setText( Tool.getShowTime( QuestionInfoActivity.entity.getCreateTime() ) );		textQuestionTitle = ( TextView ) viewHeader.findViewById( R.id.question_info_answer_list_header_question_title );		textQuestionTitle.setText( QuestionInfoActivity.entity.getQuestionTitle() );		textQuestionInfo = ( TextView ) viewHeader.findViewById( R.id.question_info_answer_list_header_question_info );		textQuestionInfo.setText( QuestionInfoActivity.entity.getQuestionInfo() );		textInviteMe = ( TextView ) viewHeader.findViewById( R.id.question_info_answer_list_header_invite_me_text );				textMyInvite = ( TextView ) viewHeader.findViewById( R.id.question_info_answer_list_header_me_invite_text );				textCommentTitle = ( TextView ) viewHeader.findViewById( R.id.question_info_answer_list_header_comment_title );				//textCommentTitleSymbol = ( TextView ) viewHeader.findViewById( R.id.question_info_answer_list_header_comment_title_symbol );			textCommentName1 = ( TextView ) viewHeader.findViewById( R.id.question_info_answer_list_header_comment_1_name );		textCommentInfo1 = ( TextView ) viewHeader.findViewById( R.id.question_info_answer_list_header_comment_1_info );		textCommentName2 = ( TextView ) viewHeader.findViewById( R.id.question_info_answer_list_header_comment_2_name );		textCommentInfo2 = ( TextView ) viewHeader.findViewById( R.id.question_info_answer_list_header_comment_2_info );		textCommentName3 = ( TextView ) viewHeader.findViewById( R.id.question_info_answer_list_header_comment_3_name );		textCommentInfo3 = ( TextView ) viewHeader.findViewById( R.id.question_info_answer_list_header_comment_3_info );		textCommentSymbol1 = ( TextView ) viewHeader.findViewById( R.id.question_info_answer_list_header_comment_1_symbol );		textCommentSymbol2 = ( TextView ) viewHeader.findViewById( R.id.question_info_answer_list_header_comment_2_symbol );		textCommentSymbol3 = ( TextView ) viewHeader.findViewById( R.id.question_info_answer_list_header_comment_3_symbol );		headImage1 = ( ImageView ) viewHeader.findViewById( R.id.question_info_answer_list_header_comment_1_head );		headImage2 = ( ImageView ) viewHeader.findViewById( R.id.question_info_answer_list_header_comment_2_head );		headImage3 = ( ImageView ) viewHeader.findViewById( R.id.question_info_answer_list_header_comment_3_head );		layoutComment = ( RelativeLayout ) viewHeader.findViewById( R.id.question_info_answer_list_header_comment_layout );		layoutButton = ( RelativeLayout ) viewHeader.findViewById( R.id.question_info_answer_list_header_layout2 );		textEditTime = ( TextView ) viewHeader.findViewById( R.id.question_info_answer_list_header_edit_time );				layoutActList = ( RelativeLayout ) viewHeader.findViewById( R.id.question_info_answer_list_header_act_layout );		actTextTitle = ( TextView ) viewHeader.findViewById( R.id.question_info_answer_list_header_act_title );		actHeadImage1 = ( ImageView ) viewHeader.findViewById( R.id.question_info_answer_list_header_act_1_head );		actHeadImage2 = ( ImageView ) viewHeader.findViewById( R.id.question_info_answer_list_header_act_2_head );		actHeadImage3 = ( ImageView ) viewHeader.findViewById( R.id.question_info_answer_list_header_act_3_head );		actTextName1 = ( TextView ) viewHeader.findViewById( R.id.question_info_answer_list_header_act_1_name );		actTextInfo1 = ( TextView ) viewHeader.findViewById( R.id.question_info_answer_list_header_act_1_info );		actTextTime1 = ( TextView ) viewHeader.findViewById( R.id.question_info_answer_list_header_act_1_time );		actTextSymbol1 = ( TextView ) viewHeader.findViewById( R.id.question_info_answer_list_header_act_1_symbol );		actTextName2 = ( TextView ) viewHeader.findViewById( R.id.question_info_answer_list_header_act_2_name );		actTextInfo2 = ( TextView ) viewHeader.findViewById( R.id.question_info_answer_list_header_act_2_info );		actTextTime2 = ( TextView ) viewHeader.findViewById( R.id.question_info_answer_list_header_act_2_time );		actTextSymbol2 = ( TextView ) viewHeader.findViewById( R.id.question_info_answer_list_header_act_2_symbol );		actTextName3 = ( TextView ) viewHeader.findViewById( R.id.question_info_answer_list_header_act_3_name );		actTextInfo3 = ( TextView ) viewHeader.findViewById( R.id.question_info_answer_list_header_act_3_info );		actTextTime3 = ( TextView ) viewHeader.findViewById( R.id.question_info_answer_list_header_act_3_time );		actTextSymbol3 = ( TextView ) viewHeader.findViewById( R.id.question_info_answer_list_header_act_3_symbol );		textPraiseCount = ( TextView ) findViewById( R.id.question_info_answer_list_header_praise_count );		textPraiseUser = ( TextView ) findViewById( R.id.question_info_answer_list_header_praise_user );		layoutPraise2 = ( RelativeLayout ) viewHeader.findViewById( R.id.question_info_answer_list_header_praise_layout2 );		buttonPraise = ( Button ) viewHeader.findViewById( R.id.question_info_answer_list_header_button_praise );		buttonEdit = ( Button ) viewHeader.findViewById( R.id.question_info_answer_list_header_button_edit_info );		imagePraise = ( ImageView ) viewHeader.findViewById( R.id.question_info_answer_list_header_image_praise );				//tempLine1 = ( View ) viewHeader.findViewById( R.id.question_info_answer_list_header_line_temp6 );		tempLine2 = ( View ) viewHeader.findViewById( R.id.question_info_answer_list_header_line_temp11 );		tempLine4 = ( View ) viewHeader.findViewById( R.id.question_info_answer_list_header_line_temp1 );		tempLine5 = ( View ) viewHeader.findViewById( R.id.question_info_answer_list_header_line_temp22 );		tempLine6 = ( View ) viewHeader.findViewById( R.id.question_info_answer_list_header_line_temp13 );		textTitleNo = ( TextView ) viewHeader.findViewById( R.id.question_info_answer_list_header_act_title_no );		textCommentNo = ( TextView ) viewHeader.findViewById( R.id.question_info_answer_list_header_act_comment_no );		viewBig1 = ( View ) viewHeader.findViewById( R.id.question_info_answer_list_header_line_temp_big1 );		viewBig2 = ( View ) viewHeader.findViewById( R.id.question_info_answer_list_header_line_temp_big2 );				buttonAddAct = ( Button ) viewHeader.findViewById( R.id.question_info_answer_list_header_add_act );		buttonAddComment = ( Button ) viewHeader.findViewById( R.id.question_info_answer_list_header_add_comment );		buttonAddSum = ( Button ) viewHeader.findViewById( R.id.question_info_answer_list_header_add_sum );		if( QuestionInfoActivity.entity.getUserId().equals( Information.Id ) )		{			buttonPraise.setVisibility( View.GONE );			layoutPraise2.setVisibility( View.VISIBLE );		}		else		{			layoutPraise2.setVisibility( View.GONE );		}				if( QuestionInfoActivity.entity.getType() == 0 )		{			layoutButton.setVisibility( View.VISIBLE );			layoutActList.setVisibility( View.GONE );			tempLine2.setVisibility( View.GONE );			tempLine4.setVisibility( View.VISIBLE );			textTitleNo.setVisibility( View.GONE );			tempLine5.setVisibility( View.GONE );		}		else		{			layoutButton.setVisibility( View.GONE );			layoutActList.setVisibility( View.VISIBLE );						tempLine2.setVisibility( View.VISIBLE );			tempLine4.setVisibility( View.GONE );		}				buttonAddComment.setOnClickListener		(			new OnClickListener()			{				public void onClick( View view )				{					if( Tool.isFastDoubleClick() )					{						return;					}					mListViewListener.showCommentList();				}			}		);				textAnswerCount = ( TextView ) viewHeader.findViewById( R.id.question_info_answer_list_header_answer_count );			buttonAddAnswer = ( Button ) viewHeader.findViewById( R.id.question_info_answer_list_header_button_add );		buttonAddAnswer.setOnClickListener		(			new OnClickListener()			{				public void onClick( View view )				{					if( Tool.isFastDoubleClick() )					{						return;					}					mListViewListener.addAnswer();				}			}		);				buttonInvite = ( Button ) viewHeader.findViewById( R.id.question_info_answer_list_header_button_invite );		buttonInvite.setOnClickListener		(			new OnClickListener()			{				public void onClick( View view )				{					if( Tool.isFastDoubleClick() )					{						return;					}					mListViewListener.invite();				}			}		);				buttonAddAct.setOnClickListener		(			new OnClickListener()			{				public void onClick( View view )				{					if( Tool.isFastDoubleClick() )					{						return;					}					mListViewListener.clickActButton1();				}			}		);//				buttonAddSum.setOnClickListener		(			new OnClickListener()			{				public void onClick( View view )				{					if( Tool.isFastDoubleClick() )					{						return;					}					mListViewListener.clickActButton3();				}			}		);				buttonPraise.setOnClickListener		(			new OnClickListener()			{				public void onClick( View view )				{					if( Tool.isFastDoubleClick() )					{						return;					}					mListViewListener.praiseAct();				}			}		);		buttonEdit.setOnClickListener		(			new OnClickListener()			{				public void onClick( View view )				{					if( Tool.isFastDoubleClick() )					{						return;					}					mListViewListener.editActOrQuestion();				}			}		);		//		layoutInviteMe = ( RelativeLayout ) viewHeader.findViewById( R.id.question_info_answer_list_header_invite_me_layout );//		layoutInviteMe.setOnClickListener//		(//			new OnClickListener()//			{//				public void onClick( View view )//				{//					if( Tool.isFastDoubleClick() )//					{//						return;//					}//					mListViewListener.showInvite( true );//				}//			}//		);////		layoutMyInvite = ( RelativeLayout ) viewHeader.findViewById( R.id.question_info_answer_list_header_my_invite_layout );//		layoutMyInvite.setOnClickListener//		(//			new OnClickListener()//			{//				public void onClick( View view )//				{//					if( Tool.isFastDoubleClick() )//					{//						return;//					}//					mListViewListener.showInvite( false );//				}//			}//		);		layoutUser = ( RelativeLayout ) viewHeader.findViewById( R.id.question_info_answer_list_header_layout1 );		layoutUser.setOnClickListener		(			new OnClickListener()			{				public void onClick( View view )				{					if( Tool.isFastDoubleClick() )					{						return;					}					mListViewListener.showUserInfo();				}			}		);				layoutComment.setOnClickListener		(			new OnClickListener()			{				public void onClick( View view )				{					if( Tool.isFastDoubleClick() )					{						return;					}					mListViewListener.showCommentList();				}			}		);				layoutActList.setOnClickListener		(			new OnClickListener()			{				public void onClick( View view )				{					if( Tool.isFastDoubleClick() )					{						return;					}					mListViewListener.showActList();				}			}		);				textInviteMe.setOnClickListener		(			new OnClickListener()			{				public void onClick( View view )				{					if( Tool.isFastDoubleClick() )					{						return;					}					mListViewListener.showCommentList();				}			}		);				textMyInvite.setOnClickListener		(			new OnClickListener()			{				public void onClick( View view )				{					if( Tool.isFastDoubleClick() )					{						return;					}					mListViewListener.showCommentList();				}			}		);		mFooterView = new XListViewFooter(context);		mHeaderView.getViewTreeObserver().addOnGlobalLayoutListener		(			new OnGlobalLayoutListener()			{				@SuppressWarnings("deprecation")				public void onGlobalLayout()				{					mHeaderViewHeight = mHeaderViewContent.getHeight();					getViewTreeObserver().removeGlobalOnLayoutListener(this);				}			}		);				textQuestionTitle.setOnClickListener		(			new OnClickListener()			{				public void onClick( View view )				{					int[] location = new int[ 2 ];					textQuestionTitle.getLocationOnScreen( location );				    int y = location[ 1 ];					mListViewListener.showCopy( y, ( int ) textQuestionTitle.getHeight() + ( int ) textQuestionInfo.getHeight() );				}			}		);		textQuestionInfo.setOnClickListener		(			new OnClickListener()			{				public void onClick( View view )				{					int[] location = new int[ 2 ];					textQuestionTitle.getLocationOnScreen( location );				    int y = location[ 1 ];					mListViewListener.showCopy( y, ( int ) textQuestionTitle.getHeight() + ( int ) textQuestionInfo.getHeight() );				}			}		);	}		public void updateHeader()	{		textQuestionTitle.setText( QuestionInfoActivity.entity.getQuestionTitle() );		textQuestionInfo.setText( QuestionInfoActivity.entity.getQuestionInfo() );		if( !QuestionInfoActivity.entity.isInvisible() )		{			String value = QuestionInfoActivity.entity.getCompany();			if( value.length() > 8 )			{				value = value.substring( 0, 8 ) + "…";			}			textCompany.setText( value );			value = QuestionInfoActivity.entity.getJob();			if( value.length() > 5 )			{				value = value.substring( 0, 5 ) + "…";			}			textJob.setText( value );		}		int count = QuestionInfoActivity.entity.getInviteMeList().size();		if( count > 0 )		{			textInviteMe.setVisibility( View.VISIBLE );			String value = QuestionInfoActivity.entity.getInviteMeList().get( 0 ).getName();			if( count > 1 ) value += "、" + QuestionInfoActivity.entity.getInviteMeList().get( 1 ).getName();			if( count > 2 ) value += "等" + count + "人";			if( QuestionInfoActivity.entity.getType() == 0 )			{				textInviteMe.setText( value + " 邀请你回答" );			}			else			{				textInviteMe.setText( value + " 邀请你参加活动" );			}		}		else		{			textInviteMe.setVisibility( View.GONE );		}		count = QuestionInfoActivity.entity.getMyInviteList().size();		if( count > 0 )		{			textMyInvite.setVisibility( View.VISIBLE );			String value = QuestionInfoActivity.entity.getMyInviteList().get( 0 ).getName();			if( count > 1 ) value += "、" + QuestionInfoActivity.entity.getMyInviteList().get( 1 ).getName();			if( count > 2 ) value += "等" + count + "人";			if( QuestionInfoActivity.entity.getType() == 0 )			{				textMyInvite.setText( "你邀请 " + value + " 回答" );			}			else			{				textMyInvite.setText( "你邀请 " + value + " 参加活动" );			}		}		else		{			textMyInvite.setVisibility( View.GONE );		}		if( QuestionInfoActivity.entity.getType() == 0 )		{			textCommentTitle.setText( "问题的评论  " + QuestionInfoActivity.entity.getCommentList().size() );		}		else		{			textCommentTitle.setText( "灌水/邀请  " + QuestionInfoActivity.entity.getCommentList().size() );		}				if( QuestionInfoActivity.entity.getCommentList().size() > 0 )		{			headImage1.setVisibility( View.VISIBLE );			imageLoader.displayImage( Information.Server_Url + QuestionInfoActivity.entity.getCommentList().get( 0 ).getUserHeadUrl(), headImage1, Information.options );			textCommentName1.setVisibility( View.VISIBLE );			textCommentInfo1.setVisibility( View.VISIBLE );			textCommentName1.setText( QuestionInfoActivity.entity.getCommentList().get( 0 ).getUserName() );			textCommentInfo1.setText( QuestionInfoActivity.entity.getCommentList().get( 0 ).getCommentInfo() );			textCommentSymbol1.setVisibility( View.VISIBLE );			textCommentSymbol1.setText( QuestionInfoActivity.entity.getCommentList().size() + "评" );		}		if( QuestionInfoActivity.entity.getCommentList().size() > 1 )		{			headImage2.setVisibility( View.VISIBLE );			imageLoader.displayImage( Information.Server_Url + QuestionInfoActivity.entity.getCommentList().get( 1 ).getUserHeadUrl(), headImage2, Information.options );			textCommentName2.setVisibility( View.VISIBLE );			textCommentInfo2.setVisibility( View.VISIBLE );			textCommentName2.setText( QuestionInfoActivity.entity.getCommentList().get( 1 ).getUserName() );			textCommentInfo2.setText( QuestionInfoActivity.entity.getCommentList().get( 1 ).getCommentInfo() );			textCommentSymbol2.setVisibility( View.VISIBLE );			textCommentSymbol2.setText( ( QuestionInfoActivity.entity.getCommentList().size() - 1 ) + "评" );		}		if( QuestionInfoActivity.entity.getCommentList().size() > 2 )		{			headImage3.setVisibility( View.VISIBLE );			imageLoader.displayImage( Information.Server_Url + QuestionInfoActivity.entity.getCommentList().get( 2 ).getUserHeadUrl(), headImage3, Information.options );			textCommentName3.setVisibility( View.VISIBLE );			textCommentInfo3.setVisibility( View.VISIBLE );			textCommentName3.setText( QuestionInfoActivity.entity.getCommentList().get( 2 ).getUserName() );			textCommentInfo3.setText( QuestionInfoActivity.entity.getCommentList().get( 2 ).getCommentInfo() );			textCommentSymbol3.setVisibility( View.VISIBLE );			textCommentSymbol3.setText( ( QuestionInfoActivity.entity.getCommentList().size() - 2 ) + "评" );		}				if( QuestionInfoActivity.entity.getEditTime().equals( "" ) )		{			textEditTime.setVisibility( View.GONE );		}		else		{			textEditTime.setVisibility( View.VISIBLE );			if( QuestionInfoActivity.entity.getType() == 0 )			{				textEditTime.setText( "此问题编辑于 " + Tool.getShowTime( QuestionInfoActivity.entity.getEditTime() ) );			}			else			{				textEditTime.setText( "此活动编辑于 " + Tool.getShowTime( QuestionInfoActivity.entity.getEditTime() ) );			}		}				if( QuestionInfoActivity.entity.getType() == 1 )		{			if( QuestionInfoActivity.entity.isHasSigned() )			{				buttonAddAct.setText( "修改报名" );			}			actTextTitle.setText( "活动报名  " + QuestionInfoActivity.entity.getActList().size() );						if( QuestionInfoActivity.entity.getUserId().equals( Information.Id ) )			{				buttonEdit.setVisibility( View.VISIBLE );				buttonPraise.setVisibility( View.GONE );				imagePraise.setVisibility( View.GONE );			}			else			{				buttonEdit.setVisibility( View .GONE );				buttonPraise.setVisibility( View.VISIBLE );				imagePraise.setVisibility( View.VISIBLE );								if( QuestionInfoActivity.entity.isHasPraised() )				{					imagePraise.setImageResource( R.drawable.praise_red );				}				else				{					imagePraise.setImageResource( R.drawable.praise_gray );				}			}						textPraiseCount.setText( "赞 " + QuestionInfoActivity.entity.getPraiseList().size() );			final int count1 = QuestionInfoActivity.entity.getPraiseList().size();			StringBuilder value = new StringBuilder();			for( int i = 0; i < count1; i ++ )			{				if( i > 0 ) value.append( "、" );				value.append( QuestionInfoActivity.entity.getPraiseList().get( i ) );			} 			textPraiseUser.setText( value.toString() );						if( QuestionInfoActivity.entity.getCommentList().size() == 0 )			{				textCommentNo.setText( "快快邀请小伙伴参加吧" );				viewBig1.setVisibility( View.VISIBLE );			}			else			{				textCommentNo.setVisibility( View.GONE );				viewBig1.setVisibility( View.GONE );			}						if( QuestionInfoActivity.entity.getActList().size() == 0 )			{				textTitleNo.setText( "还没有人报名哦，快来抢沙发吧" );								viewBig2.setVisibility( View.VISIBLE );			}			else			{				String time1 = MyDatabaseHelper.getInstance( context ).getQuestionModifyTime( QuestionInfoActivity.entity.getId() );				String time2 = QuestionInfoActivity.entity.getActList().get( 0 ).getTime();				if( QuestionInfoActivity.entity.getActList().get( 0 ).getUserId().equals( Information.Id ) )				{					time2 = "";				}				Log.e( "www", time1 + "," + time2 );				if( time1.compareTo( time2 ) < 0 )				{					String value1 = "活动报名  " + QuestionInfoActivity.entity.getActList().size();					SpannableStringBuilder builder = new SpannableStringBuilder( value1 );					ForegroundColorSpan blackSpan = new ForegroundColorSpan( context.getResources().getColor( R.color.gray ) );					ForegroundColorSpan redSpan = new ForegroundColorSpan( context.getResources().getColor( R.color.text_red ) );					builder.setSpan( blackSpan, 0, 4, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE );  					builder.setSpan( redSpan, 6, value1.length(), Spannable.SPAN_INCLUSIVE_INCLUSIVE );										actTextTitle.setText( builder );				}			}						if( QuestionInfoActivity.entity.getActList().size() > 0 )			{				viewBig2.setVisibility( View.GONE );				textTitleNo.setVisibility( View.GONE );				actHeadImage1.setVisibility( View.VISIBLE );				imageLoader.displayImage( Information.Server_Url + QuestionInfoActivity.entity.getActList().get( 0 ).getUserHeadUrl(), actHeadImage1, Information.options );				actTextName1.setVisibility( View.VISIBLE );				actTextInfo1.setVisibility( View.VISIBLE );				actTextTime1.setVisibility( View.VISIBLE );				actTextSymbol1.setVisibility( View.VISIBLE );				actTextName1.setText( QuestionInfoActivity.entity.getActList().get( 0 ).getUserName() );				actTextInfo1.setText( QuestionInfoActivity.entity.getActList().get( 0 ).getCommentInfo() );				actTextTime1.setText( Tool.getShowTime( QuestionInfoActivity.entity.getActList().get( 0 ).getTime() ) );				actTextSymbol1.setText( QuestionInfoActivity.entity.getActList().size() + "报" );			}			if( QuestionInfoActivity.entity.getActList().size() > 1 )			{				actHeadImage2.setVisibility( View.VISIBLE );				imageLoader.displayImage( Information.Server_Url + QuestionInfoActivity.entity.getActList().get( 1 ).getUserHeadUrl(), actHeadImage2, Information.options );				actTextName2.setVisibility( View.VISIBLE );				actTextInfo2.setVisibility( View.VISIBLE );				actTextTime2.setVisibility( View.VISIBLE );				actTextSymbol2.setVisibility( View.VISIBLE );				actTextName2.setText( QuestionInfoActivity.entity.getActList().get( 1 ).getUserName() );				actTextInfo2.setText( QuestionInfoActivity.entity.getActList().get( 1 ).getCommentInfo() );				actTextTime2.setText( Tool.getShowTime( QuestionInfoActivity.entity.getActList().get( 1 ).getTime() ) );				actTextSymbol2.setText( ( QuestionInfoActivity.entity.getActList().size() - 1 ) + "报" );			}			if( QuestionInfoActivity.entity.getActList().size() > 2 )			{				actHeadImage3.setVisibility( View.VISIBLE );				imageLoader.displayImage( Information.Server_Url + QuestionInfoActivity.entity.getActList().get( 2 ).getUserHeadUrl(), actHeadImage3, Information.options );				actTextName3.setVisibility( View.VISIBLE );				actTextInfo3.setVisibility( View.VISIBLE );				actTextTime3.setVisibility( View.VISIBLE );				actTextSymbol3.setVisibility( View.VISIBLE );				actTextName3.setText( QuestionInfoActivity.entity.getActList().get( 2 ).getUserName() );				actTextInfo3.setText( QuestionInfoActivity.entity.getActList().get( 2 ).getCommentInfo() );				actTextTime3.setText( Tool.getShowTime( QuestionInfoActivity.entity.getActList().get( 2 ).getTime() ) );				actTextSymbol3.setText( ( QuestionInfoActivity.entity.getActList().size() - 2 ) + "报" );			}						textAnswerCount.setText( "活动总结  " + QuestionInfoActivity.entity.getAnswerCount() );						if( QuestionInfoActivity.entity.isHasAnswered() )			{				buttonAddSum.setText( "修改总结" );			}		}		else		{			if( QuestionInfoActivity.entity.getUserId().equals( Information.Id ) )			{				buttonEdit.setVisibility( View.VISIBLE );				buttonEdit.setText( "编辑问题" );				buttonPraise.setVisibility( View.GONE );				imagePraise.setVisibility( View.GONE );			}			else			{				buttonEdit.setVisibility( View .GONE );				buttonPraise.setVisibility( View.VISIBLE );				imagePraise.setVisibility( View.VISIBLE );								if( QuestionInfoActivity.entity.isHasPraised() )				{					imagePraise.setImageResource( R.drawable.praise_red );				}				else				{					imagePraise.setImageResource( R.drawable.praise_gray );				}			}						textPraiseCount.setText( "赞 " + QuestionInfoActivity.entity.getPraiseList().size() );			final int count1 = QuestionInfoActivity.entity.getPraiseList().size();			StringBuilder value = new StringBuilder();			for( int i = 0; i < count1; i ++ )			{				if( i > 0 ) value.append( "、" );				value.append( QuestionInfoActivity.entity.getPraiseList().get( i ) );			} 			textPraiseUser.setText( value.toString() );						buttonAddComment.setText( "评论/灌水" );			tempLine6.setVisibility( View.GONE );			buttonAddSum.setVisibility( View.GONE );			viewBig1.setVisibility( View.GONE );			textAnswerCount.setText( "回答  " + QuestionInfoActivity.entity.getAnswerCount() );						if( QuestionInfoActivity.entity.isHasAnswered() )			{				buttonAddAnswer.setBackgroundColor( context.getResources().getColor( R.color.gray ) );				buttonAddAnswer.setTextColor( context.getResources().getColor( R.color.white ) );				buttonAddAnswer.setText( "编辑回答" );			}		}	}	public void setAdapter(ListAdapter adapter)	{		if (mIsFooterReady == false)		{			mIsFooterReady = true;			addFooterView(mFooterView);		}		super.setAdapter(adapter);	}	/**	 * enable or disable pull down refresh feature.	 * 	 * @param enable	 */	public void setPullRefreshEnable(boolean enable) {		mEnablePullRefresh = enable;		if (!mEnablePullRefresh) { // disable, hide the content			mHeaderViewContent.setVisibility(View.INVISIBLE);		} else {			mHeaderViewContent.setVisibility(View.VISIBLE);		}	}	/**	 * enable or disable pull up load more feature.	 * 	 * @param enable	 */	public void setPullLoadEnable(boolean enable) {		mEnablePullLoad = enable;		if (!mEnablePullLoad) {			mFooterView.hide();			mFooterView.setOnClickListener(null);		} else {			mPullLoading = false;			mFooterView.show();			mFooterView.setState(XListViewFooter.STATE_NORMAL);			// both "pull up" and "click" will invoke load more.			mFooterView.setOnClickListener(new OnClickListener() {				@Override				public void onClick(View v) {					startLoadMore();				}			});		}	}	/**	 * stop refresh, reset header view.	 */	public void stopRefresh() {		if (mPullRefreshing == true) {			mPullRefreshing = false;			resetHeaderHeight();		}	}	/**	 * stop load more, reset footer view.	 */	public void stopLoadMore() {		if (mPullLoading == true) {			mPullLoading = false;			mFooterView.setState(XListViewFooter.STATE_NORMAL);		}	}	/**	 * set last refresh time	 * 	 * @param time	 */	public void setRefreshTime(String time) {		mHeaderTimeView.setText(time);	}	private void invokeOnScrolling() {		if (mScrollListener instanceof OnXScrollListener) {			OnXScrollListener l = (OnXScrollListener) mScrollListener;			l.onXScrolling(this);		}	}	public void updateHeaderHeight(float delta) {		mHeaderView.setVisiableHeight((int) delta				+ mHeaderView.getVisiableHeight());		if (mEnablePullRefresh && !mPullRefreshing) { // 未处于刷新状态，更新箭头			if (mHeaderView.getVisiableHeight() > mHeaderViewHeight) {				mHeaderView.setState(XListViewHeader.STATE_READY);			} else {				mHeaderView.setState(XListViewHeader.STATE_NORMAL);			}		}		setSelection(0); // scroll to top each time	}	/**	 * reset header view's height.	 */	private void resetHeaderHeight() {		int height = mHeaderView.getVisiableHeight();		if (height == 0) // not visible.			return;		// refreshing and header isn't shown fully. do nothing.		if (mPullRefreshing && height <= mHeaderViewHeight) {			return;		}		int finalHeight = 0; // default: scroll back to dismiss header.		// is refreshing, just scroll back to show all the header.		if (mPullRefreshing && height > mHeaderViewHeight) {			finalHeight = mHeaderViewHeight;		}		mScrollBack = SCROLLBACK_HEADER;		mScroller.startScroll(0, height, 0, finalHeight - height,				SCROLL_DURATION);		// trigger computeScroll		invalidate();	}	private void updateFooterHeight(float delta) {		int height = mFooterView.getBottomMargin() + (int) delta;		if (mEnablePullLoad && !mPullLoading) {			if (height > PULL_LOAD_MORE_DELTA) { // height enough to invoke load													// more.				mFooterView.setState(XListViewFooter.STATE_READY);			} else {				mFooterView.setState(XListViewFooter.STATE_NORMAL);			}		}		mFooterView.setBottomMargin(height);		// setSelection(mTotalItemCount - 1); // scroll to bottom	}	private void resetFooterHeight() {		int bottomMargin = mFooterView.getBottomMargin();		if (bottomMargin > 0) {			mScrollBack = SCROLLBACK_FOOTER;			mScroller.startScroll(0, bottomMargin, 0, -bottomMargin,					SCROLL_DURATION);			invalidate();		}	}		public void startRefresh()	{		mPullRefreshing = true;		mHeaderView.setState(XListViewHeader.STATE_REFRESHING);		if( mListViewListener != null )		{			mListViewListener.onRefresh();		}	}	private void startLoadMore() {		mPullLoading = true;		mFooterView.setState(XListViewFooter.STATE_LOADING);		if (mListViewListener != null) {			mListViewListener.onLoadMore();		}	}	@Override	public boolean onTouchEvent(MotionEvent ev) {		if (mLastY == -1) {			mLastY = ev.getRawY();		}		switch (ev.getAction()) {		case MotionEvent.ACTION_DOWN:			mLastY = ev.getRawY();			break;		case MotionEvent.ACTION_MOVE:			final float deltaY = ev.getRawY() - mLastY;			mLastY = ev.getRawY();			System.out.println("数据监测：" + getFirstVisiblePosition() + "---->"					+ getLastVisiblePosition());			if (getFirstVisiblePosition() == 0					&& (mHeaderView.getVisiableHeight() > 0 || deltaY > 0)) {				// the first item is showing, header has shown or pull down.				updateHeaderHeight(deltaY / OFFSET_RADIO);				invokeOnScrolling();			} else if (getLastVisiblePosition() == mTotalItemCount - 1					&& (mFooterView.getBottomMargin() > 0 || deltaY < 0)) {				// last item, already pulled up or want to pull up.				updateFooterHeight(-deltaY / OFFSET_RADIO);			}			break;		default:			mLastY = -1; // reset			if (getFirstVisiblePosition() == 0) {				// invoke refresh				if (mEnablePullRefresh						&& mHeaderView.getVisiableHeight() > mHeaderViewHeight) {					mPullRefreshing = true;					mHeaderView.setState(XListViewHeader.STATE_REFRESHING);					if (mListViewListener != null) {						mListViewListener.onRefresh();					}				}				resetHeaderHeight();			}			if (getLastVisiblePosition() == mTotalItemCount - 1) {				// invoke load more.				if (mEnablePullLoad						&& mFooterView.getBottomMargin() > PULL_LOAD_MORE_DELTA) {					startLoadMore();				}				resetFooterHeight();			}			break;		}		return super.onTouchEvent(ev);	}	@Override	public void computeScroll() {		if (mScroller.computeScrollOffset()) {			if (mScrollBack == SCROLLBACK_HEADER) {				mHeaderView.setVisiableHeight(mScroller.getCurrY());			} else {				mFooterView.setBottomMargin(mScroller.getCurrY());			}			postInvalidate();			invokeOnScrolling();		}		super.computeScroll();	}	@Override	public void setOnScrollListener(OnScrollListener l) {		mScrollListener = l;	}	@Override	public void onScrollStateChanged(AbsListView view, int scrollState) {		if (mScrollListener != null) {			mScrollListener.onScrollStateChanged(view, scrollState);		}	}	@Override	public void onScroll(AbsListView view, int firstVisibleItem,			int visibleItemCount, int totalItemCount) {		// send to user's listener		mTotalItemCount = totalItemCount;		if (mScrollListener != null) {			mScrollListener.onScroll(view, firstVisibleItem, visibleItemCount,					totalItemCount);		}	}	public void setXListViewListener(IXListViewListener l) {		mListViewListener = l;	}	/**	 * you can listen ListView.OnScrollListener or this one. it will invoke	 * onXScrolling when header/footer scroll back.	 */	public interface OnXScrollListener extends OnScrollListener {		public void onXScrolling(View view);	}	/**	 * implements this interface to get refresh/load more event.	 */	public interface IXListViewListener 	{		public void onRefresh();		public void onLoadMore();				public void addAnswer();		public void invite();		public void showInvite( boolean symbol );		public void showUserInfo();		public void showCommentList();		public void showActList();		public void clickActButton1();		public void clickActButton2();		public void clickActButton3();		public void praiseAct();		public void editActOrQuestion();		public void showCopy( int x, int y );	}}