package com.pku.xiaoyoubang.selfview;import java.io.ByteArrayInputStream;import java.io.ByteArrayOutputStream;import java.io.File;import java.io.FileOutputStream;import java.io.InputStream;import uk.co.senab.photoview.PhotoViewAttacher;import uk.co.senab.photoview.PhotoViewAttacher.OnPhotoTapListener;import android.annotation.SuppressLint;import android.app.AlertDialog;import android.app.Dialog;import android.content.DialogInterface;import android.content.DialogInterface.OnKeyListener;import android.graphics.Bitmap;import android.os.Bundle;import android.os.Handler;import android.os.Message;import android.support.v4.app.Fragment;import android.view.KeyEvent;import android.view.LayoutInflater;import android.view.View;import android.view.View.OnLongClickListener;import android.view.ViewGroup;import android.view.WindowManager;import android.widget.ImageView;import android.widget.ProgressBar;import android.widget.TextView;import android.widget.Toast;import com.nostra13.universalimageloader.core.ImageLoader;import com.nostra13.universalimageloader.core.assist.FailReason;import com.nostra13.universalimageloader.core.listener.SimpleImageLoadingListener;import com.pku.xiaoyoubang.R;import com.pku.xiaoyoubang.tool.Information;@SuppressLint("HandlerLeak")public class ImageDetailFragment extends Fragment {	private String mImageUrl;	private ImageView mImageView;	private ProgressBar progressBar;	private PhotoViewAttacher mAttacher;	private String localUrl = "";		private Dialog dialog1;	private Handler handler = new Handler()	{		public void handleMessage( Message message )		{				if( dialog1 != null )			{				dialog1.dismiss();			}			switch( message.what )			{			case 0 : //add success				showError( "收藏成功" );				break;			case 1 : //add failed				showError( "收藏照片失败" );				break;			case 2 : //add failed				showError( "该照片已收藏" );				break;			}		}	};		private void showError( String text )	{		Toast.makeText( this.getActivity(), text, Toast.LENGTH_SHORT ).show();	}	public static ImageDetailFragment newInstance( String imageUrl ) 	{		final ImageDetailFragment f = new ImageDetailFragment();		final Bundle args = new Bundle();		args.putString( "url", imageUrl );		f.setArguments( args );		return f;	}	public void onCreate( Bundle savedInstanceState ) 	{		super.onCreate( savedInstanceState );		mImageUrl = getArguments() != null ? getArguments().getString( "url" ) : null;	}	public View onCreateView( LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState ) 	{		final View v = inflater.inflate( R.layout.image_detail_fragment, container, false );		mImageView = ( ImageView ) v.findViewById( R.id.image );				mAttacher = new PhotoViewAttacher( mImageView );				mAttacher.setOnLongClickListener		(			new OnLongClickListener()			{				public boolean onLongClick( View v ) 				{					if( !localUrl.equals( "" ) )					{						AlertDialog.Builder dialog = new AlertDialog.Builder( getActivity() );				        dialog.setTitle( "收藏照片" ).setMessage( "是否收藏该照片？" )				        .setPositiveButton( "确定", new DialogInterface.OnClickListener() 				        {				        	public void onClick( DialogInterface dialog, int which ) 				        	{				        		String name = localUrl.substring( localUrl.lastIndexOf( "/" ) + 1, localUrl.length() );				        		File dir = new File( Information.Store_Path );				        		if( !dir.exists() )				        		{				        			dir.mkdirs();				        		}				        		File file = new File( Information.Store_Path + "/" + name );				        		if( file.exists() )				        		{				        			handler.sendEmptyMessage( 2 );				        			return;				        		}				        						        		dialog1 = new Dialog( getActivity(), R.style.dialog_progress );				        		LayoutInflater inflater = LayoutInflater.from( getActivity() );  				        		View view = inflater.inflate( R.layout.dialog_progress, null );				        		TextView textView = ( TextView ) view.findViewById( R.id.dialog_textview );					        		textView.setText( "正在保存照片" );				        						        		WindowManager.LayoutParams layoutParams = dialog1.getWindow().getAttributes();				        		layoutParams.alpha = 0.8f;				        		dialog1.getWindow().setAttributes( layoutParams );				        		dialog1.setContentView( view );				        		dialog1.setCancelable( false );				        		dialog1.setOnKeyListener				        		(				        			new OnKeyListener()				        			{				        				public boolean onKey( DialogInterface dialog, int keyCode, KeyEvent event ) 				        				{				        					if( keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0 )				        					{				        						dialog.dismiss();				        						return true;				        					}				        					return false;				        				}				        			}				        		);				        		dialog1.show();				        						        		new Thread				        		(				        			new Thread()				        			{				        				public void run()				        				{				        					saveImage();				        				}				        			}				        		).start();				        	}				        }).setNegativeButton( "取消", new DialogInterface.OnClickListener() 				        {				        	public void onClick( DialogInterface dialog, int which ) 				        	{				        		dialog.cancel();				        	}				        }).create().show();					}					return true;				}			}		);		mAttacher.setOnPhotoTapListener		(			new OnPhotoTapListener() 			{				public void onPhotoTap( View arg0, float arg1, float arg2 ) 				{					getActivity().finish();				}			}		);				progressBar = ( ProgressBar ) v.findViewById( R.id.loading );		return v;	}		private void saveImage()	{		String name = localUrl.substring( localUrl.lastIndexOf( "/" ) + 1, localUrl.length() );		File file = new File( Information.Store_Path + "/" + name );		try		{			file.createNewFile();			ByteArrayOutputStream baos = new ByteArrayOutputStream();  			if( name.indexOf( "png" ) == -1 && name.indexOf( "PNG" ) == -1 )			{				mAttacher.getVisibleRectangleBitmap().compress( Bitmap.CompressFormat.JPEG, 100, baos );			}			else			{				mAttacher.getVisibleRectangleBitmap().compress( Bitmap.CompressFormat.PNG, 100, baos );			}			InputStream input = new ByteArrayInputStream( baos.toByteArray() );			FileOutputStream output = new FileOutputStream( new File( Information.Store_Path + "/" + name ) );			byte[] buffer = new byte[ 1024 ];			int temp;			while( ( temp = input.read( buffer ) ) != -1 )			{				output.write( buffer, 0, temp );			}			input.close();			output.close();			handler.sendEmptyMessage( 0 );		}		catch( Exception ex )		{			file.delete();			ex.printStackTrace();			handler.sendEmptyMessage( 1 );		}	}	public void onActivityCreated( Bundle savedInstanceState ) 	{		super.onActivityCreated( savedInstanceState );		ImageLoader.getInstance().displayImage		(			mImageUrl, mImageView, Information.options_image, new SimpleImageLoadingListener() 			{				public void onLoadingStarted( String imageUri, View view ) 				{					progressBar.setVisibility( View.VISIBLE );				}				public void onLoadingFailed( String imageUri, View view, FailReason failReason )				{					String message = null;					switch( failReason.getType() ) 					{					case IO_ERROR:						message = "下载错误";						break;					case DECODING_ERROR:						message = "图片无法显示";						break;					case NETWORK_DENIED:						message = "网络有问题，无法下载";						break;					case OUT_OF_MEMORY:						message = "图片太大无法显示";						break;					case UNKNOWN:						message = "未知的错误";						break;					}					Toast.makeText( getActivity(), message, Toast.LENGTH_SHORT ).show();					progressBar.setVisibility( View.GONE );				}				public void onLoadingComplete( String imageUri, View view, Bitmap loadedImage ) 				{					localUrl = imageUri;					progressBar.setVisibility( View.GONE );					mAttacher.update();				}			}		);	}}